{"abs": {"link": "https://kb.lumerical.com/en/ref_scripts_abs.html", "text": "Returns the absolute value of a number or matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.abs(x)                       | Returns the absolute value of x.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nreal(), imag()\r\n"}, "acos": {"link": "https://kb.lumerical.com/en/ref_scripts_acos.html", "text": "Calculates the inverse trigonometric cosine function (arccosine). Angle\r\nunits are in radians. The function is defined for complex values. Phase\r\nof a complex number is evaluated between -pi and pi. If x is complex, or\r\nabs(x) > 1, the following equation is used:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.acos(x)                      | Returns the complex arccosine of x.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncos()\r\n"}, "add2drect": {"link": "https://kb.lumerical.com/en/ref_scripts_add2drect.html", "text": "Adds a 2D rectangle in the simulation space.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.add2drect()                        | Adds a 2D rectangle in simulation    |\r\n|                                      | space.                               |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), add2dpoly()\r\n"}, "add2dpoly": {"link": "https://kb.lumerical.com/en/ref_scripts_add2dpoly.html", "text": "Adds a 2D polygon in the simulation space.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.add2dpoly()                        | Adds a 2D polygon in simulation      |\r\n|                                      | space.                               |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nadd2drect()\r\n"}, "add2visualizer": {"link": "https://kb.lumerical.com/en/ref_scripts_add2visualizer.html", "text": "Adds data to an existing visualizer.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.add2visualizer( dataset,           | This command adds data to an         |\r\n| visualizer number )                  | existing visualizer. If there is no  |\r\n|                                      | visualizer corresponding to the      |\r\n|                                      | visualizer number, then the command  |\r\n|                                      | is ignored.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nexportfigure(), image(), plot(), setplot(), closeall(), visualize()\r\n"}, "addabsorbing": {"link": "https://kb.lumerical.com/en/ref_scripts_addabsorbing.html", "text": "Adds an absorbing boundary condition to the 'DGTD' solver in DEVICE.  A\r\nDGTD solver region must be present in the objects tree for this command\r\nto work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addabsorbing()                     | Adds a PML boundary condition to the |\r\n|                                      | 'DGTD' solver.                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nadddgtdsolver(), addpml(), addpmc(), addpec(), addperiodic()\r\n"}, "addanalysisgroup": {"link": "https://kb.lumerical.com/en/ref_scripts_addanalysisgroup.html", "text": "Adds an analysis group to the simulation environment.  Analysis groups\r\nare container objects that can contain any simulation object and\r\nassociated script functions which can be used to create customize data\r\nanalysis.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addanalysisgroup()                 | Adds an analysis group to the        |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\naddtogroup(), adduserprop(), runanalysis(), getresult(), addobject()\r\n"}, "addanalysisprop": {"link": "https://kb.lumerical.com/en/ref_scripts_addanalysisprop.html", "text": "Adds a user defined custom analysis property to the setup user defined\r\nin structure and analysis groups.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addanalysisprop(\"property name\",   | Adds a analysis property to a        |\r\n| type, value)                         | selected object group. The name is   |\r\n|                                      | set to \"property name\". The type is  |\r\n|                                      | an integer from 0 to 5. The          |\r\n|                                      | corresponding variable types are     |\r\n|                                      |                                      |\r\n|                                      | +-------------+-------------+------- |\r\n|                                      | ------+-------------+-------------+- |\r\n|                                      | ------------+                        |\r\n|                                      | | 0           | 1           | 2      |\r\n|                                      |       | 3           | 4           |  |\r\n|                                      | 5           |                        |\r\n|                                      | +-------------+-------------+------- |\r\n|                                      | ------+-------------+-------------+- |\r\n|                                      | ------------+                        |\r\n|                                      | | number      | text        | length |\r\n|                                      |       | time        | frequency   |  |\r\n|                                      | material    |                        |\r\n|                                      | +-------------+-------------+------- |\r\n|                                      | ------+-------------+-------------+- |\r\n|                                      | ------------+                        |\r\n|                                      |                                      |\r\n|                                      | The value of the user property is    |\r\n|                                      | set to value.                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddstructuregroup(), runsetup(), addanalysisgroup(), addanalysisresult()\r\n"}, "addanalysisresult": {"link": "https://kb.lumerical.com/en/ref_scripts_addanalysisresult.html", "text": "Adds a new result to an analysis group object.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addanalysisresult(\"A\")             | Adds a new result called \"A\" to an   |\r\n|                                      | analysis group.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddstructuregroup(), runsetup(), addanalysisgroup()\r\n"}, "addattribute": {"link": "https://kb.lumerical.com/en/ref_scripts_addattribute.html", "text": "Adds an attribute to an existing dataset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| R.o.addattribute(\"a\\_name\", a)       | Adds the scalar attribute a to the   |\r\n|                                      | dataset R.                           |\r\n|                                      |                                      |\r\n|                                      | See Dataset introduction for details |\r\n|                                      | about the required dimensions of     |\r\n|                                      | attribute data.                      |\r\n+--------------------------------------+--------------------------------------+\r\n| R.o.addattribute(\"a\\_vector\", a\\_1,  | Adds the vector attribute a\\_vector  |\r\n| a\\_2, a\\_3)                          | to the existing dataset R. The       |\r\n|                                      | components of the vector are a\\_1,   |\r\n|                                      | a\\_2 and a\\_3.                       |\r\n|                                      |                                      |\r\n|                                      | See Dataset introduction for details |\r\n|                                      | about the required dimensions of     |\r\n|                                      | attribute data.                      |\r\n+--------------------------------------+--------------------------------------+\r\n| R.o.addattribute(\"a\\_name\", [data],  | Adds the attribute \"a\\_name\" to the  |\r\n| \"type\")                              | unstructured dataset R. [data] can   |\r\n|                                      | be in one of the forms below:        |\r\n|                                      |                                      |\r\n|                                      | vertex\\_scalar\\_attribute[npts;      |\r\n|                                      | npar\\_1; npar\\_2; ...1]              |\r\n|                                      |                                      |\r\n|                                      | vertex\\_vector\\_attribute[npts;      |\r\n|                                      | npar\\_1; npar\\_2; ...3]              |\r\n|                                      |                                      |\r\n|                                      | cell\\_scalar\\_attribute[ncells; 1]   |\r\n|                                      |                                      |\r\n|                                      | cell\\_vector\\_attribute[ncells; 3]   |\r\n|                                      |                                      |\r\n|                                      | (npts is the number of vertices, the |\r\n|                                      | length of geometric parameters 'x',  |\r\n|                                      | 'y', 'z'                             |\r\n|                                      |                                      |\r\n|                                      | cells is the number of elements,     |\r\n|                                      | equal to number of rows of geometry  |\r\n|                                      | parameter 'elements' )               |\r\n|                                      |                                      |\r\n|                                      | The \"type\" argument is an optional   |\r\n|                                      | string to specify attribute type and |\r\n|                                      | can take values of \"vertex\" or       |\r\n|                                      | \"cell\". If not provided, the         |\r\n|                                      | function will guess the attribute    |\r\n|                                      | type based on the shape of [data]    |\r\n|                                      | argument.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrectilineardataset(), addattribute(), addparameter(), visualize(),\r\ngetparameter(), getattribute(), matrixdataset()\r\n"}, "addbandstructuremonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_addbandstructuremonitor.html", "text": "Adds a band structure monitor to the simulation environment.  This\r\ncommand requires the presence of a CHARGE solver region in the objects\r\ntree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addbandstructuremonitor()          | Adds a band structure monitor to the |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addefieldmonitor(), addchargemonitor(), addjfluxmonitor()\r\n"}, "addbulkgen": {"link": "https://kb.lumerical.com/en/ref_scripts_addbulkgen.html", "text": "Adds a bulk (optical) generation region to the simulation environment.\r\n The bulk generation (source) object can be used to create an analytic\r\nsolar generation profile.  This command requires a CHARGE solver region\r\nto be present in the objects tree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addbulkgen()                       | Add a bulk (optical) generation      |\r\n|                                      | region.                              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addimportgen()\r\n"}, "addchargemesh": {"link": "https://kb.lumerical.com/en/ref_scripts_addchargemesh.html", "text": "Adds a mesh constraint (override region) to the 'CHARGE' simulation\r\nenvironment in DEVICE.  A CHARGE solver region must be present in the\r\nobjects tree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addchargemesh()                    | Adds a mesh constraint to the        |\r\n|                                      | 'CHARGE' simulation environment.     |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddchargesolver(), set()\r\n"}, "addchargemonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_addchargemonitor.html", "text": "Adds a charge monitor to the simulation environment.  This command\r\nrequires the presence of a CHARGE solver region in the objects tree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addchargemonitor()                 | Adds a charge monitor to the         |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addbandstructuremonitor(), addefieldmonitor(), addjfluxmonitor()\r\n"}, "addchargesolver": {"link": "https://kb.lumerical.com/en/ref_scripts_addchargesolver.html", "text": "Adds an electrical (CHARGE) solver region to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addchargesolver()                  | Adds an electrical (CHARGE) solver   |\r\n|                                      | region to the simulation             |\r\n|                                      | environment.                         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), run()\r\n"}, "addcircle": {"link": "https://kb.lumerical.com/en/ref_scripts_addcircle.html", "text": "Adds a circle primitive to the simulation environment.  Circles denote\r\nphysical objects which appear circular or ellipsoid from above.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addcircle()                        | Adds a circle primitive to the       |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addconvectionbc": {"link": "https://kb.lumerical.com/en/ref_scripts_addconvectionbc.html", "text": "Adds a new convection boundary condition to the HEAT or CHARGE solver\r\n[Boundary Conditions (Thermal Simulation)].  A HEAT or CHARGE solver\r\nregion must be present in the objects tree before this boundary\r\ncondition can be added.  If both solvers are present then the intended\r\nsolver's name must be provided as an argument to the script command.\r\n\r\nThe convection boundary condition can only be added to the CHARGE solver\r\nwhen the solver's temperature dependency is set to 'coupled'.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addconvectionbc()                  | Adds a convection boundary condition |\r\n|                                      | to the HEAT or CHARGE solver         |\r\n|                                      | (whichever is present in the objects |\r\n|                                      | tree).                               |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addconvectionbc(\"solver\\_name\")    | Adds a convection boundary condition |\r\n|                                      | to the desired solver defined by the |\r\n|                                      | argument \"solver\\_name\".  The        |\r\n|                                      | options are \"HEAT\" and \"CHARGE\".     |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\naddtemperaturebc(), addradiationbc(), addthermalpowerbc(),\r\naddheatfluxbc(), addthermalinsulatingbc(), addvoltagebc()\r\n"}, "addcustom": {"link": "https://kb.lumerical.com/en/ref_scripts_addcustom.html", "text": "Adds a custom primitive to the simulation environment.  Custom\r\nprimitives are objects that are defined by equations describing the\r\nboundaries of the physical object.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addcustom()                        | Adds a custom primitive to the       |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "adddeltachargesource": {"link": "https://kb.lumerical.com/en/ref_scripts_adddeltachargesource.html", "text": "Adds a delta optical generation source to the simulation environment.\r\n This command requires a CHARGE solver region to be present in the\r\nobjects tree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.adddeltachargesource()             | Add a delta optical generation       |\r\n|                                      | source to the simulation             |\r\n|                                      | environment.                         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addimportgen(), addbulkgen()\r\n"}, "addelectricalcontact": {"link": "https://kb.lumerical.com/en/ref_scripts_addelectricalcontact.html", "text": "Adds a new electrical contact boundary condition to the CHARGE solver\r\n[Boundary Conditions (Electrical Simulation)].  A CHARGE solver region\r\nmust be present in the objects tree before an electrical contact\r\nboundary condition can be added.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addelectricalcontact()             | Adds an electrical contact boundary  |\r\n|                                      | condition to the CHARGE solver.      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddsurfacerecombinationbc()\r\n"}, "addemabsorptionmonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_addemabsorptionmonitor.html", "text": "Adds an absorption monitor to the 'DGTD' solver in DEVICE.  The monitor\r\nreports the power absorbed within the monitor volume.  A DGTD solver\r\nregion must be present in the objects tree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addemabsorptionmonitor()           | Adds an absorption monitor to the    |\r\n|                                      | 'DGTD' solver.                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\nadddgtdsolver(), addemfieldmonitor(), addemfieldtimemonitor()\r\n"}, "addemfieldmonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_addemfieldmonitor.html", "text": "Adds a frequency domain EM (electro-magnetic) field monitor to the\r\n'DGTD' solver in DEVICE.  Along with the EM field data the monitor also\r\nreports the net flux through the surface of the monitor.  A DGTD solver\r\nregion must be present in the objects tree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addemfieldmonitor()                | Adds a frequency domain EM field     |\r\n|                                      | monitor to the 'DGTD' solver.        |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\nadddgtdsolver(), addemabsorptionmonitor(), addemfieldtimemonitor()\r\n"}, "addemfieldtimemonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_addemfieldtimemonitor.html", "text": "Adds a time domain EM (electro-magnetic) field monitor to the 'DGTD'\r\nsolver in DEVICE.  A DGTD solver region must be present in the objects\r\ntree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addemfieldtimemonitor()            | Adds a time domain EM field monitor  |\r\n|                                      | to the 'DGTD' solver.                |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\nadddgtdsolver(), addemfieldmonitor(), addemabsorptionmonitor()\r\n"}, "adddevice": {"link": "https://kb.lumerical.com/en/ref_scripts_adddevice.html", "text": "Adds a CHARGE solver region to the simulation environment.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: The 'adddevice' command is deprecated and will be removed in       |\r\n| future releases. Please refer to addchargesolver as a replacement.       |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.adddevice()                        | Add a CHARGE solver region to the    |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), run()\r\n"}, "adddgtdmesh": {"link": "https://kb.lumerical.com/en/ref_scripts_adddgtdmesh.html", "text": "Adds a mesh constraint (override region) to the 'DGTD' simulation\r\nenvironment in DEVICE.  A DGTD solver region must be present in the\r\nobjects tree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.adddgtdmesh()                      | Adds a mesh constraint to the 'DGTD' |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nadddgtdsolver()\r\n"}, "adddgtdsolver": {"link": "https://kb.lumerical.com/en/ref_scripts_adddgtdsolver.html", "text": "Adds a DGTD solver region to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.adddgtdsolver()                    | Adds a DGTD solver region to the     |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nadddgtdmesh()\r\n"}, "adddiffusion": {"link": "https://kb.lumerical.com/en/ref_scripts_adddiffusion.html", "text": "Adds a diffusion doping region to the simulation environment.  This\r\ncommand requires a CHARGE solver region to be present in the objects\r\ntree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.adddiffusion()                     | Add a diffusion doping region in the |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), adddope()\r\n"}, "adddipole": {"link": "https://kb.lumerical.com/en/ref_scripts_adddipole.html", "text": "Adds a dipole source to the simulation environment.  In MODE Solutions\r\nthe command requires an active varFDTD solver region in the objects\r\ntree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.adddipole()                        | Adds a dipole source to the          |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addplane(), addgaussian(), addtfsf()\r\n"}, "adddope": {"link": "https://kb.lumerical.com/en/ref_scripts_adddope.html", "text": "Adds a constant doping object to the simulation environment.  This\r\ncommand requires a CHARGE solver region to be present in the objects\r\ntree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.adddope()                          | Add a constant doping region.        |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), adddiffusion()\r\n"}, "addeffectiveindex": {"link": "https://kb.lumerical.com/en/ref_scripts_addeffectiveindex.html", "text": "Adds an effective index monitor to the simulation environment.  This\r\ncommand requires the presence of an active varFDTD solver region.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addeffectiveindex()                | Adds an effective index monitor to   |\r\n|                                      | the varFDTD solver region.           |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addefieldmonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_addefieldmonitor.html", "text": "Adds an electric field monitor to the simulation environment.  This\r\ncommand requires the presence of a CHARGE solver region in the objects\r\ntree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addefieldmonitor()                 | Adds an electric field monitor to    |\r\n|                                      | the simulation environment.          |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addbandstructuremonitor(), addchargemonitor(), addjfluxmonitor()\r\n"}, "addelement": {"link": "https://kb.lumerical.com/en/ref_scripts_addelement.html", "text": "Adds an element from the INTERCONNECT element library to the simulation\r\nenvironment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addelement(\"element\")              | Adds an element from the element     |\r\n|                                      | library.                             |\r\n|                                      |                                      |\r\n|                                      | If no element name is given, this    |\r\n|                                      | command will add a compound element  |\r\n|                                      | by default.                          |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addeme": {"link": "https://kb.lumerical.com/en/ref_scripts_addeme.html", "text": "Adds a Eigenmode Expansion (EME) solver region to the MODE Solutions\r\nsimulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addeme()                           | Add an EME solver region to the      |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nselect(), run(), addvarfdtd(), addfde()\r\n"}, "addemeindex": {"link": "https://kb.lumerical.com/en/ref_scripts_addemeindex.html", "text": "Adds an index monitor that can be used to return the spatial refractive\r\nindex when using an EME solver region.  The EME solver object must be\r\nset as the active solver for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addemeindex()                      | Add an index monitor when using an   |\r\n|                                      | EME solver region.                   |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetactivesolver()\r\n"}, "addemeport": {"link": "https://kb.lumerical.com/en/ref_scripts_addemeport.html", "text": "Adds a port to an EME solver region/object.  The EME solver object must\r\nbe set as the active solver for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addemeport()                       | Add a port to the active EME solver  |\r\n|                                      | region.                              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetactivesolver()\r\n"}, "addemeprofile": {"link": "https://kb.lumerical.com/en/ref_scripts_addemeprofile.html", "text": "Adds a profile monitor that can be used to return the spatial electric\r\nand magnetic field profiles when using an EME solver region.  The EME\r\nsolver object must be set as the active solver for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addemeprofile()                    | Add a profile monitor when using an  |\r\n|                                      | EME solver region.                   |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetactivesolver()\r\n"}, "addfde": {"link": "https://kb.lumerical.com/en/ref_scripts_addfde.html", "text": "Adds a Finite Difference Eigenmode (FDE) solver region object to the\r\nMODE Solutions simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addfde()                           | Adds an FDE solver region to the     |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), findmodes(), addvarfdtd(), addeme()\r\n"}, "addfdtd": {"link": "https://kb.lumerical.com/en/ref_scripts_addfdtd.html", "text": "Adds an FDTD solver region to the simulation environment.  The extent of\r\nthe solver region determines the simulated volume/area in FDTD\r\nSolutions.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addfdtd()                          | Adds an FDTD solver region to the    |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), run()\r\n"}, "addgaussian": {"link": "https://kb.lumerical.com/en/ref_scripts_addgaussian.html", "text": "Adds a Gaussian source to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addgaussian()                      | Adds a Gaussian source to the        |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addplane(), addtfsf()\r\n"}, "addgridattribute": {"link": "https://kb.lumerical.com/en/ref_scripts_addgridattribute.html", "text": "Adds a grid attribute object to the simulation environment. See the\r\nReference Guide Attributes page for more information.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addgridattribute(\"type\")           | Adds a grid attribute object to the  |\r\n|                                      | simulation.                          |\r\n|                                      |                                      |\r\n|                                      | \u2022type: Type of attribute to add.     |\r\n|                                      | Options are \"lc orientation\",        |\r\n|                                      | \"permittivity rotation\", \"matrix     |\r\n|                                      | transform\", \"np density\", or         |\r\n|                                      | \"temperature\".                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addgridattribute(\"type\",dataset)   | Adds a grid attribute with spatially |\r\n|                                      | varying data.                        |\r\n|                                      |                                      |\r\n|                                      | \u2022type: Type of attribute to add.     |\r\n|                                      | Options are \"lc orientation\",        |\r\n|                                      | \"permittivity rotation\", \"matrix     |\r\n|                                      | transform\", \"np density\", or         |\r\n|                                      | \"temperature\".                       |\r\n|                                      |                                      |\r\n|                                      | \u2022dataset: A dataset containing the   |\r\n|                                      | grid attribute data - see the below  |\r\n|                                      | table for details.                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Data           | Simulation     | Dataset type   | Name for       | Name for       |\r\n|                | object         |                | variables      | variables      |\r\n|                |                |                | defining       | defining       |\r\n|                |                |                | coordinate     | actual data    |\r\n|                |                |                | data           |                |\r\n+================+================+================+================+================+\r\n| Liquid crystal | 'lc            | Rectilinear    | x, y, z        | u              |\r\n| orientation (3 | orientation'   |                |                |                |\r\n| element unit   | grid attribute |                |                |                |\r\n| vector)        |                |                |                |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Rotation       | 'permittivity  | Rectilinear    | x, y, z        | theta, phi,    |\r\n| angles in      | rotation' grid |                |                | psi            |\r\n| radians        | attribute      |                |                |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Unitary        | 'matrix        | Rectilinear    | x, y, z        | U              |\r\n| transform      | transform'     |                |                |                |\r\n| matrix (3x3    | grid attribute |                |                |                |\r\n| tensor)        |                |                |                |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Charge density | 'np density'   | Unstructured   | x, y, z,       | n, p           |\r\n|                | grid attribute |                | elements (see  |                |\r\n|                |                |                | Dataset        |                |\r\n|                |                |                | builder for    |                |\r\n|                |                |                | more           |                |\r\n|                |                |                | information)   |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Temperature in | 'temperature'  | Unstructured   | x, y, z,       | N              |\r\n| Kelvin         | grid attribute |                | elements (see  |                |\r\n|                |                |                | Dataset        |                |\r\n|                |                |                | builder for    |                |\r\n|                |                |                | more           |                |\r\n|                |                |                | information)   |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nimportdataset(), cleardataset(), unstructureddataset()\r\n"}, "addgroup": {"link": "https://kb.lumerical.com/en/ref_scripts_addgroup.html", "text": "Adds a container group to the simulation environment.  Container groups\r\ncan be used to put multiple structures, monitors, and/or sources\r\ntogether in a single group in the objects tree.  In DEVICE container\r\ngroups are always children of the solver regions and cannot contain any\r\nstructure.  If multiple solver regions are present in the DEVICE objects\r\ntree then this command will add a container group to the solver region\r\nthat is currently selected.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addgroup()                         | Adds a container group to the        |\r\n|                                      | simulation environment.  In DEVICE   |\r\n|                                      | it will add a container group to the |\r\n|                                      | solver region that is currently      |\r\n|                                      | selected.                            |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddtogroup(), addstructuregroup(), addanalysisgroup()\r\n"}, "addheatfluxbc": {"link": "https://kb.lumerical.com/en/ref_scripts_addheatfluxbc.html", "text": "Adds a new heat flux boundary condition to the HEAT or CHARGE solver\r\n[Boundary Conditions (Thermal Simulation)].  A HEAT or CHARGE solver\r\nregion must be present in the objects tree before this boundary\r\ncondition can be added.  If both solvers are present then the intended\r\nsolver's name must be provided as an argument to the script command.\r\n\r\nThe heat flux boundary condition can only be added to the CHARGE solver\r\nwhen the solver's temperature dependency is set to 'coupled'.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addheatfluxbc()                    | Adds a heat flux boundary condition  |\r\n|                                      | to the HEAT or CHARGE solver         |\r\n|                                      | (whichever is present in the objects |\r\n|                                      | tree).                               |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addheatfluxbc(\"solver\\_name\")      | Adds a heat flux boundary condition  |\r\n|                                      | to the desired solver defined by the |\r\n|                                      | argument \"solver\\_name\".  The        |\r\n|                                      | options are \"HEAT\" and \"CHARGE\".     |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddtemperaturebc(), addconvectionbc(), addradiationbc(),\r\naddthermalpowerbc(), addthermalinsulatingbc(), addvoltagebc()\r\n"}, "addheatfluxmonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_addheatfluxmonitor.html", "text": "Adds a heat flux monitor to the HEAT solver region. The monitor can only\r\nbe added if the simulation environment already has a 'HEAT' solver\r\npresent.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addheatfluxmonitor()               | Adds a heat flux monitor to the      |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addtemperaturemonitor()\r\n"}, "addheatmesh": {"link": "https://kb.lumerical.com/en/ref_scripts_addheatmesh.html", "text": "Adds a mesh constraint (override region) to the 'HEAT' simulation\r\nenvironment in DEVICE.  A HEAT solver region must be present in the\r\nobjects tree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addheatmesh()                      | Adds a mesh constraint to the 'HEAT' |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddheatsolver(), set()\r\n"}, "addheatsolver": {"link": "https://kb.lumerical.com/en/ref_scripts_addheatsolver.html", "text": "Adds a thermal (HEAT) solver region to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addheatsolver()                    | Adds a thermal (HEAT) solver region  |\r\n|                                      | to the simulation environment.       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), run()\r\n"}, "addimport": {"link": "https://kb.lumerical.com/en/ref_scripts_addimport.html", "text": "Adds an import primitive to the simulation environment.  The import\r\nprimitive can be used to create a 3D geometry by importing a surface, an\r\nimage, or binary data.  It can also be used to create an n,k material.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addimport()                        | Adds an import primitive to the      |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nimportsurface(), importsurface2()\r\n"}, "addimportdope": {"link": "https://kb.lumerical.com/en/ref_scripts_addimportdope.html", "text": "Adds a doping region to the simulation environment that can be used to\r\nload a custom doping profile.  The custom doping profile can be created\r\nanalytically using script or it can be imported from other sources such\r\nas process simulation.  This command requires a CHARGE solver region to\r\nbe present in the objects tree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addimportdope()                    | Add an import doping region to the   |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nOnce the import doping object is created, the doping data can be\r\nimported from a matlab (.mat) file using the GUI or by assigning a\r\ndataset to the object using the importdataset script command. The\r\ndataset can be a rectilinear or an unstructured dataset. Doping data can\r\nbe imported into the solver workspace from other tools (e.g. process\r\nsimulation) using the Dataset builder.\r\n\r\nSee Also\r\n\r\nset(), linspace(), rectilineardataset(), select(), importdataset(),\r\nadddope(), adddiffusion()\r\n"}, "addimportedsource": {"link": "https://kb.lumerical.com/en/ref_scripts_addimportedsource.html", "text": "Adds an imported source to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addimportedsource()                | Adds an imported source to the       |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nasapimport(), asapload(), asapexport()\r\n"}, "addimportgen": {"link": "https://kb.lumerical.com/en/ref_scripts_addimportgen.html", "text": "Adds an (optical) generation region to the simulation environment where\r\nthe generation profile has been imported into DEVICE.  This command\r\nrequires a CHARGE solver region to be present in the objects tree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addimportgen()                     | Add an import generation object to   |\r\n|                                      | the simulation environment.          |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nOnce the import generation object is created, the optical generation\r\ndata can be imported from a matlab (.mat) file using the GUI or by\r\nassigning a dataset to the object using the importdataset script\r\ncommand.  The .mat file must contain a 3D matrix G containing the\r\ngeneration data on a rectilinear grid and the three coordinate vectors\r\nx, y, z.  The dataset can be either a rectilinear or an unstructured\r\ndataset.\r\n\r\nSee Also\r\n\r\nset(), linspace(), rectilineardataset(), select(), importdataset(),\r\naddbulkgen(), adddeltachargesource()\r\n"}, "addimportheat": {"link": "https://kb.lumerical.com/en/ref_scripts_addimportheat.html", "text": "Adds a heat source to the DEVICE simulation environment where the\r\nprofile of the heat source can be imported from an external source.  For\r\nthe CHARGE solver, the import heat source only gets applied if the\r\n\"temperature dependence\" is set to \"coupled.\"\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addimportheat()                    | Adds an import primitive to define a |\r\n|                                      | heat source. This format of the      |\r\n|                                      | command is only application when     |\r\n|                                      | only one solver is present/active in |\r\n|                                      | the model tree.                      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n|                                      |                                      |\r\n|                                      | If multiple solvers are present then |\r\n|                                      | use the second format.               |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addimportheat(\"solver\\_name\")      | This format of the command will add  |\r\n|                                      | an import heat source to the solver  |\r\n|                                      | defined by the argument. The \"solver |\r\n|                                      | name\" will be either \u201cCHARGE\u201d or     |\r\n|                                      | \u201cHEAT.\u201d                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nOnce the import heat source is created, the data can be imported from a\r\nmatlab (.mat) file using the GUI or by assigning a dataset to the object\r\nusing the importdataset script command. The dataset can be in\r\nrectilinear or unstructured (finite-element) format.\r\n\r\nSee Also\r\n\r\nlinspace(), rectilineardataset(), select(), importdataset(),\r\nadduniformheat(), addimporttemperature()\r\n"}, "addimporttemperature": {"link": "https://kb.lumerical.com/en/ref_scripts_addimporttemperature.html", "text": "Adds an import temperature source to the CHARGE solver (only applicable\r\nto non-isothermal transport).  The import temperature object can be used\r\nto import a temperature map for non-isothermal simulation.  A CHARGE\r\nsolver region must be present in the objects tree for this command to\r\nwork.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addimporttemperature()             | Adds an import temperature source to |\r\n|                                      | the CHARGE solver.  The source only  |\r\n|                                      | gets applied if the \"temperature     |\r\n|                                      | dependence\" is set to                |\r\n|                                      | \"non-isothermal.\"                    |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nOnce the import temperature source is created, the data can be imported\r\nfrom a matlab (.mat) file using the GUI or by assigning a dataset to the\r\nobject using the importdataset script command. The dataset can either be\r\nin rectilinear or unstructured (finite-element) format.\r\n\r\nSee Also\r\n\r\nlinspace(), rectilineardataset(), select(), importdataset(),\r\naddimportheat()\r\n"}, "addindex": {"link": "https://kb.lumerical.com/en/ref_scripts_addindex.html", "text": "Adds an index monitor to the simulation environment.  In MODE Solutions\r\nan active varFDTD region needs to be present for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addindex()                         | Adds an index monitor to the         |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addfdtd(), addvarfdtd(), getresult(), visualize()\r\n"}, "addjfluxmonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_addjfluxmonitor.html", "text": "Adds a current flux monitor to the simulation environment.  This command\r\nrequires the presence of a CHARGE solver region in the objects tree.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addjfluxmonitor()                  | Adds a current flux monitor to the   |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addefieldmonitor(), addchargemonitor()\r\n"}, "addjob": {"link": "https://kb.lumerical.com/en/ref_scripts_addjob.html", "text": "Adds a simulation file to the job manager queue.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addjob(filename,\"solver\")          | Add the simulation file \"filename\"   |\r\n|                                      | to the job manager queue. The        |\r\n|                                      | \"solver\" argument is used to select  |\r\n|                                      | the solver to add the job to and is  |\r\n|                                      | optional if only one solver exists   |\r\n|                                      | (or is active) in the simulation     |\r\n|                                      | environment. The \"solver\" argument   |\r\n|                                      | is not supported by INTERCONNECT.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrun(), runsweep(), runjobs(), clearjobs(), listjobs(), currentfilename()\r\n"}, "addlayer": {"link": "https://kb.lumerical.com/en/ref_scripts_addlayer.html", "text": "Adds a layer to the layer builder object. The command only works if\r\nthere is a layer builder object and is selected.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addlayer()                         | Adds a layer to the selected layer   |\r\n|                                      | builder object.  The name of the     |\r\n|                                      | layer is set to \"default name\".      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addlayer(\"name\")                   | Adds a layer named \"name\"            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddlayerbuilder(), getlayerlist(), setlayer(), loadgdsfile(),\r\ngetcelllist(), getlayerlist(), setlayer()\r\n"}, "addlayerbuilder": {"link": "https://kb.lumerical.com/en/ref_scripts_addlayerbuilder.html", "text": "Adds a layer builder object to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addlayerbuilder()                  | Adds a layer builder object to the   |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddlayer(), getlayerlist(), setlayer(), loadgdsfile(), getcelllist(),\r\ngetlayerlist(), setlayer()\r\n"}, "addmaterial": {"link": "https://kb.lumerical.com/en/ref_scripts_addmaterial.html", "text": "Adds a new material to the material database given the material model or\r\ntype and returns the name of the new material. For details on available\r\nmaterial models see: Material permittivity models and Material\r\nconductivity models.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.addmaterial()                | Lists all available material models  |\r\n|                                      | that can be added into the material  |\r\n|                                      | database.                            |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.addmaterial(\"materialtype\")  | Adds a new material and returns the  |\r\n|                                      | name of the new material. The        |\r\n|                                      | argument \"materialtype\" has to match |\r\n|                                      | correct string exactly.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndeletematerial(), copymaterial(), setmaterial(), getmaterial()\r\n"}, "addmaterialproperties": {"link": "https://kb.lumerical.com/en/ref_scripts_addmaterialproperties.html", "text": "Adds a (material) property to the selected material model.  A material\r\nmodel (in the 'materials' folder) must be selected in the objects tree\r\nfor this script command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addmaterialproperties(\"material\\_t | Adds a (material) property to the    |\r\n| ype\",\"material\\_name\")               | selected material model in the       |\r\n|                                      | objects tree in DEVICE.  The         |\r\n|                                      | property comes from one of the       |\r\n|                                      | material databases in DEVICE.        |\r\n|                                      |                                      |\r\n|                                      | The \"material\\_type\" argument        |\r\n|                                      | selects the type of material         |\r\n|                                      | property to be added.  The options   |\r\n|                                      | are \"CT\" for electrical property,    |\r\n|                                      | \"HT\" for thermal property, and \"EM\"  |\r\n|                                      | for optical property.                |\r\n|                                      |                                      |\r\n|                                      | The \"material\\_name\" argument        |\r\n|                                      | defines the name of the material in  |\r\n|                                      | the appropriate material database    |\r\n|                                      | whose properties will be imported.   |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\naddmodelmaterial()\r\n"}, "addmesh": {"link": "https://kb.lumerical.com/en/ref_scripts_addmesh.html", "text": "Adds a mesh override region to the simulation environment.  The mesh\r\noverride region can be used to control the size of the mesh in a certain\r\nregion.  In DEVICE, a CHARGE solver region must be present in the\r\nobjects tree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addmesh()                          | Adds a mesh override region to the   |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | In DEVICE, this command adds an      |\r\n|                                      | electrical mesh which applies only   |\r\n|                                      | to the 'CHARGE' solver.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addmode": {"link": "https://kb.lumerical.com/en/ref_scripts_addmode.html", "text": "Adds a mode source to the simulation environment for FDTD Solutions.\r\n For MODE Solutions, adds an eigenmode (FDE) solver region to the\r\nsimulation environment.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: The 'addmode' command is deprecated in MODE Solutions and will be  |\r\n| removed in future releases. Please refer to addfde as a replacement.     |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addmode()                          | For FDTD Solutions:                  |\r\n|                                      |                                      |\r\n|                                      | Add a mode source to the simulation  |\r\n|                                      | environment.                         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addmode()                          | For MODE Solutions:                  |\r\n|                                      |                                      |\r\n|                                      | Add an eigenmode solver to the       |\r\n|                                      | simulation environment.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), updatesourcemode(), findmodes()\r\n"}, "addmodeexpansion": {"link": "https://kb.lumerical.com/en/ref_scripts_addmodeexpansion.html", "text": "Adds a mode expansion monitor to the simulation environment.   In MODE\r\nSolutions an active varFDTD region needs to be present for this command\r\nto work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addmodeexpansion()                 | Adds a mode expansion monitor to the |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), setexpansion(), removeexpansion(), updatemodes(),\r\nseteigensolver(), geteigensolver()\r\n"}, "addmodelmaterial": {"link": "https://kb.lumerical.com/en/ref_scripts_addmodelmaterial.html", "text": "Adds an empty material model to the 'materials' folder in the objects\r\ntree.  Different properties (electrical, thermal, or optical) can then\r\nbe assigned to the material.  Once created the material can be assigned\r\nto any geometry and be used in simulations using the CHARGE, HEAT, or\r\nDGTD solvers.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addmodelmaterial()                 | Adds a new material to the           |\r\n|                                      | 'materials' folder in the objects    |\r\n|                                      | tree in DEVICE.                      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\naddmaterialproperties()\r\n"}, "addmodesource": {"link": "https://kb.lumerical.com/en/ref_scripts_addmodesource.html", "text": "Adds a mode source to the 2.5D varFDTD simulation environment.  The\r\nvarFDTD solver object must be set as the active solver for this command\r\nto work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addmodesource()                    | Adds a  mode source to the varFDTD   |\r\n|                                      | solver region.                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addvarfdtd(), updatesourcemode()\r\n"}, "addmovie": {"link": "https://kb.lumerical.com/en/ref_scripts_addmovie.html", "text": "Adds a movie monitor to the simulation environment.  Movie monitors\r\ncapture a desired field component over the region spanned by the monitor\r\nfor the duration of the simulation.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addmovie()                         | Adds a movie monitor to the          |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addobject": {"link": "https://kb.lumerical.com/en/ref_scripts_addobject.html", "text": "Adds an object from the object library in FDTD Solutions and MODE\r\nSolutions. The command can also be used to return the names of all the\r\navailable objects and analysis groups in the objects library.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addobject(\"script\\_ID\")            | Adds an object from the object       |\r\n|                                      | library.                             |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| A = o.addobject()                    | Returns names of all the objects in  |\r\n|                                      | the library and saves it in a cell   |\r\n|                                      | array named \"A\".                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddtogroup(), addstructuregroup(), addanalysisgroup()\r\n"}, "addparameter": {"link": "https://kb.lumerical.com/en/ref_scripts_addparameter.html", "text": "Adds a parameter to an existing dataset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| R.o.addparameter(\"p\\_name\", p)       | Adds the parameter p to the existing |\r\n|                                      | dataset R.                           |\r\n+--------------------------------------+--------------------------------------+\r\n| R.o.addparameter(\"p1\\_name\", p1,     | Adds the interdependent parameter    |\r\n| \"p2\\_name\", p2)                      | p1\\_name, p2\\_name to the R dataset. |\r\n|                                      |                                      |\r\n|                                      | The most common interdependent       |\r\n|                                      | parameter is frequency and           |\r\n|                                      | wavelength. Parameters that are not  |\r\n|                                      | interdependent must be added         |\r\n|                                      | separately.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrectilineardataset(), addattribute(), addparameter(), visualize(),\r\ngetparameter(), getattribute(), matrixdataset()\r\n"}, "addpath": {"link": "https://kb.lumerical.com/en/ref_scripts_addpath.html", "text": "Adds a directory to the path.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addpath(\"directory\")               | Adds a directory to the path.        |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetpath(), which(), pwd(), clearpath()\r\n"}, "addpec": {"link": "https://kb.lumerical.com/en/ref_scripts_addpec.html", "text": "Adds a PEC (perfect electrical conductor) boundary condition to the\r\n'DGTD' solver in DEVICE.  A DGTD solver region must be present in the\r\nobjects tree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addpec()                           | Adds a PEC boundary condition to the |\r\n|                                      | 'DGTD' solver.                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nadddgtdsolver(), addpml(), addpmc(), addperiodic(), addabsorbing()\r\n"}, "addperiodic": {"link": "https://kb.lumerical.com/en/ref_scripts_addperiodic.html", "text": "Adds a periodic (or Bloch) boundary condition to the 'DGTD' solver in\r\nDEVICE.  A DGTD solver region must be present in the objects tree for\r\nthis command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addperiodic()                      | Adds a periodic boundary condition   |\r\n|                                      | to the 'DGTD' solver.                |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nadddgtdsolver(), addpml(), addpmc(), addpec(), addabsorbing()\r\n"}, "addplane": {"link": "https://kb.lumerical.com/en/ref_scripts_addplane.html", "text": "For FDTD and MODE:\r\n------------------\r\n\r\nAdds a plane wave source to the simulation environment.\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addplane()                         | Adds a plane wave source to the      |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addplane(), addgaussian(), addtfsf()\r\n\r\nFor DEVICE DGTD:\r\n----------------\r\n\r\nAdds a plane wave source to the 'DGTD' solver in DEVICE.  A DGTD solver\r\nregion must be present in the objects tree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addplane()                         | Adds a plane wave source to the      |\r\n|                                      | 'DGTD' solver.                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nExample 1\r\n\r\nThe following script commands will add a plane wave source to the 'DGTD'\r\nsolver already present in the objects tree and print the name of all of\r\nits properties.\r\n\r\naddplane;\r\n\r\n?set;\r\n\r\nExample 2\r\n\r\nThe following script commands will add a plane wave source to the 'DGTD'\r\nsolver, change its name, and set up its properties.  The script then\r\nsets the solid named \"2D rectangle\" as the injection surface.\r\n\r\naddplane; \r\n\r\nset(\"name\",\"plane\\_wave\");\r\n\r\n# set the propagation direction\r\n\r\nset(\"direction definition\",\"axis\");\r\n\r\nset(\"direction\",\"backward\");\r\n\r\nset(\"angle theta\",30);\r\n\r\nset(\"angle phi\",60);\r\n\r\n# set the polarization angle\r\n\r\nset(\"polarization angle\",90);\r\n\r\n# set the injection surface\r\n\r\nset(\"surface type\",\"solid\");\r\n\r\nset(\"solid\",\"2D rectangle\");\r\n\r\nSee Also\r\n\r\nadddgtdsolver()\r\n"}, "addplanarsolid": {"link": "https://kb.lumerical.com/en/ref_scripts_addplc.html", "text": "Adds a planar solid primitive with the specified vertices.  Planar\r\nsolids offer a very convenient option to create custom, complex 3D\r\ngeometries.  You can find more information about planar solids in this\r\npage: Structures - Planar solid.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addplanarsolid()                   | Adds an empty planar solid object.   |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addplanarsolid(vtx, fct)           | Adds a planer solid object whose     |\r\n|                                      | vertices are defined by 'vtx' and    |\r\n|                                      | whose facets are defined by 'fct'    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "addpmc": {"link": "https://kb.lumerical.com/en/ref_scripts_addpmc.html", "text": "Adds a PMC (perfect magnetic conductor) boundary condition to the 'DGTD'\r\nsolver in DEVICE.  A DGTD solver region must be present in the objects\r\ntree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addpmc()                           | Adds a PMC boundary condition to the |\r\n|                                      | 'DGTD' solver.                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nadddgtdsolver(), addpml(), addpec(), addperiodic(), addabsorbing()\r\n"}, "addpml": {"link": "https://kb.lumerical.com/en/ref_scripts_addpml.html", "text": "Adds a PML (perfectly matched layer) boundary condition to the 'DGTD'\r\nsolver in DEVICE.  A DGTD solver region must be present in the objects\r\ntree for this command to work.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addpml()                           | Adds a PML boundary condition to the |\r\n|                                      | 'DGTD' solver.                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\nadddgtdsolver(), addpmc(), addpec(), addperiodic(), addabsorbing()\r\n"}, "addpoly": {"link": "https://kb.lumerical.com/en/ref_scripts_addpoly.html", "text": "Adds a polygon primitive to the simulation environment.  The polygon\r\nobject defines a polygon in the XY plane using a set of x, y coordinates\r\n(vertices) and then extrudes it in the Z direction to create a 3D\r\ngeometry.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addpoly()                          | Adds a polygon primitive to the      |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addpower": {"link": "https://kb.lumerical.com/en/ref_scripts_addpower.html", "text": "Adds a power (field and power) monitor to the simulation environment.\r\n The 'field and power' monitor also records the electric and magnetic\r\nfield in the frequency domain along with the power.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addpower()                         | Adds a power monitor to the          |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addprofile()\r\n"}, "addport": {"link": "https://kb.lumerical.com/en/ref_scripts_addport2.html", "text": "Adds a port object to the ports group under the FDTD simulation region.\r\nA simulation region must be present in order to add a port. For more\r\ninformation about the port object see Ports. This topic addresses the\r\naddport command in FDTD Solutions - for information about the\r\nINTERCONNECT command, see addport.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addport()                          | Adds a port.                         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), geteigensolver(), seteigensolver(), updateportmodes(),\r\nclearportmodedata()\r\n"}, "addprofile": {"link": "https://kb.lumerical.com/en/ref_scripts_addprofile.html", "text": "Adds a frequency domain field profile monitor to the simulation\r\nenvironment.  Unlike the 'field and power' monitor, the 'profile'\r\nmonitor does not snap to the nearest mesh cell and uses interpolation to\r\nrecord the data exactly where the monitor is located.  This can be\r\nuseful in a few situations, but the extra interpolation required can\r\nslightly reduce the accuracy of the data. In most situations, we\r\nrecommend using the 'field and power' monitor.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addprofile()                       | Adds a field profile monitor to the  |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addpower()\r\n"}, "addproperty": {"link": "https://kb.lumerical.com/en/ref_scripts_addproperty.html", "text": "The script command adds a property to a compound or to a scripted\r\nelement.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addproperty(name,property=\u201dnew\\_pr | Adds a new property named \u2018property\u2019 |\r\n| operty\u201d,category=\u201d\u201d,type=\u201dNumber\u201d,fr | to a compound element or to a        |\r\n| om=0,to=0,kind=\u201dFixedUnit\u201d,unit=\u201d\u201d)  | scripted element named \u2018name\u2019.       |\r\n|                                      | Category defines the folder when the |\r\n|                                      | property will be stored in the       |\r\n|                                      | properties view window. \u201cstring\u201d,    |\r\n|                                      | \u201clogical\u201d and \u201cnumber\u201d are valid     |\r\n|                                      | values for the parameter \u201ctype\u201d. The |\r\n|                                      | parameter range is defined by        |\r\n|                                      | parameters \u2018from\u2019 and \u2018to\u2019.          |\r\n|                                      | Parameter \u2018kind\u2019 is typically set to |\r\n|                                      | \u2018FixedUnit\u2019, other valid values are  |\r\n|                                      | \u2018Power\u2019, \u2018Frequency\u2019, etc. Parameter |\r\n|                                      | \u2018unit\u2019 is the unit of the new        |\r\n|                                      | property.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nautoarrange(), setexpression(), createcompound()\r\n"}, "addpyramid": {"link": "https://kb.lumerical.com/en/ref_scripts_addpyramid.html", "text": "Adds a pyramid primitive to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addpyramid()                       | Adds a pyramid primitive to the      |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addradiationbc": {"link": "https://kb.lumerical.com/en/ref_scripts_addradiationbc.html", "text": "Adds a new radiation boundary condition to the HEAT or CHARGE solver\r\n[Boundary Conditions (Thermal Simulation)].  A HEAT or CHARGE solver\r\nregion must be present in the objects tree before this boundary\r\ncondition can be added.  If both solvers are present then the intended\r\nsolver's name must be provided as an argument to the script command.\r\n\r\nThe radiation boundary condition can only be added to the CHARGE solver\r\nwhen the solver's temperature dependency is set to 'coupled'.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addradiationbc()                   | Adds a radiation boundary condition  |\r\n|                                      | to the HEAT or CHARGE solver         |\r\n|                                      | (whichever is present in the objects |\r\n|                                      | tree).                               |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addradiationbc(\"solver\\_name\")     | Adds a radiation boundary condition  |\r\n|                                      | to the desired solver defined by the |\r\n|                                      | argument \"solver\\_name\".  The        |\r\n|                                      | options are \"HEAT\" and \"CHARGE\".     |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\naddtemperaturebc(), addconvectionbc(), addthermalpowerbc(),\r\naddheatfluxbc(), addthermalinsulatingbc(), addvoltagebc()\r\n"}, "addrect": {"link": "https://kb.lumerical.com/en/ref_scripts_addrect.html", "text": "Adds a rectangle primitive to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addrect()                          | Adds a rectangle primitive to the    |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addring": {"link": "https://kb.lumerical.com/en/ref_scripts_addring.html", "text": "Adds a ring primitive to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addring()                          | Adds a ring primitive to the         |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addsimulationregion": {"link": "https://kb.lumerical.com/en/ref_scripts_addsimulationregion.html", "text": "Adds a simulation region to the DEVICE design environment.  Once created\r\nthe simulation region can be linked to any existing solver.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addsimulationregion()              | Adds a simulation region to the      |\r\n|                                      | DEVICE design environment.           |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nadddgtdsolver()\r\n"}, "addsphere": {"link": "https://kb.lumerical.com/en/ref_scripts_addsphere.html", "text": "Adds a sphere primitive to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addsphere()                        | Adds a sphere primitive to the       |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addstructuregroup": {"link": "https://kb.lumerical.com/en/ref_scripts_addstructuregroup.html", "text": "Adds a structure group to the simulation environment.  Structure groups\r\nare very convenient when you want to parametrize your design.  You can\r\ndefine different parameters for the structure group and use the \"setup\"\r\nscript to create your geometry (along with monitors and/or sources)\r\naccording to those parameter values.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addstructuregroup()                | Adds a structure group to the        |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddtogroup(), adduserprop(), addgroup(), addanalysisgroup(), set()\r\n"}, "addsurface": {"link": "https://kb.lumerical.com/en/ref_scripts_addsurface.html", "text": "Adds a surface primitive to the simulation environment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addsurface()                       | Adds primitive to the simulation     |\r\n|                                      | environment.                         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addsurfacerecombinationbc": {"link": "https://kb.lumerical.com/en/ref_scripts_addsurfacerecombinationbc.html", "text": "Adds a new surface recombination boundary condition to the CHARGE solver\r\n[Boundary Conditions (Electrical Simulation)].  A CHARGE solver region\r\nmust be present in the objects tree before a surface recombination\r\nboundary condition can be added.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addsurfacerecombinationbc()        | Adds a new surface recombination     |\r\n|                                      | boundary condition to the CHARGE     |\r\n|                                      | solver.                              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\naddelectricalcontact(), addmodelmaterial()\r\n"}, "addsweep": {"link": "https://kb.lumerical.com/en/ref_scripts_addsweep.html", "text": "Adds a parameter sweep/optimization/Monte Carlo/S-parameter sweep item\r\nas the top-most analysis item.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addsweep(type)                     | adds a parameter                     |\r\n|                                      | sweep/optimization/Monte             |\r\n|                                      | Carlo/S-parameter sweep item as the  |\r\n|                                      | top-most analysis item.              |\r\n|                                      |                                      |\r\n|                                      | 'type' = 0 for sweep                 |\r\n|                                      |                                      |\r\n|                                      | 'type' = 1 for optimization          |\r\n|                                      |                                      |\r\n|                                      | 'type' = 2 for yield                 |\r\n|                                      |                                      |\r\n|                                      | 'type' = 3 for S-parameter matrix    |\r\n|                                      | sweep (in FDTD Solutions only)       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndeletesweep(), copysweep(), pastesweep(), insertsweep(), getsweep(),\r\nsetsweep(), addsweepparameter(), addsweepresult(),\r\nremovesweepparameter(), removesweepresult()\r\n"}, "addsweepparameter": {"link": "https://kb.lumerical.com/en/ref_scripts_addsweepparameter.html", "text": "Adds a parameter to a parameter sweep/optimization/Monte\r\nCarlo/S-parameter sweep item.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addsweepparameter(\"name\",          | Adds a parameter to a parameter      |\r\n| \"parameter\")                         | sweep/optimization/Monte             |\r\n|                                      | Carlo/S-parameter sweep item.        |\r\n|                                      |                                      |\r\n|                                      | \"name\" is the absolute name of an    |\r\n|                                      | analysis item.                       |\r\n|                                      |                                      |\r\n|                                      | \"parameter\" could be a string (i.e.  |\r\n|                                      | create a parameter with default      |\r\n|                                      | values. eg.                          |\r\n|                                      | ::model::rectangle::index) or a      |\r\n|                                      | struct which counld contain          |\r\n|                                      | parameter, type, start, stop, unit,  |\r\n|                                      | etc.                                 |\r\n|                                      |                                      |\r\n|                                      | Returns the parameter name.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopysweep(), pastesweep(), addsweep(), insertsweep(), getsweep(),\r\nsetsweep(), addsweepresult(), removesweepparameter(),\r\nremovesweepresult()\r\n"}, "addsweepresult": {"link": "https://kb.lumerical.com/en/ref_scripts_addsweepresult.html", "text": "Adds a result to a sweep/optimization/Monte Carlo item.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addsweepresult(\"name\", \"result\")   | Adds a result to a                   |\r\n|                                      | sweep/optimization/Monte Carlo item. |\r\n|                                      |                                      |\r\n|                                      | \"name\" is the absolute name of an    |\r\n|                                      | analysis item.                       |\r\n|                                      |                                      |\r\n|                                      | \"result\" could be a string (i.e.     |\r\n|                                      | create a result with default values) |\r\n|                                      | or a struct which could contain      |\r\n|                                      | results and operations.              |\r\n|                                      |                                      |\r\n|                                      | Returns the result name.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopysweep(), pastesweep(), addsweep(), insertsweep(), getsweep(),\r\nsetsweep(), addsweepparameter(), removesweepparameter(),\r\nremovesweepresult()\r\n"}, "addtemperaturebc": {"link": "https://kb.lumerical.com/en/ref_scripts_addtemperaturebc.html", "text": "Adds a new temperature boundary condition to the HEAT or CHARGE solver\r\n[Boundary Conditions (Thermal Simulation)].  A HEAT or CHARGE solver\r\nregion must be present in the objects tree before this boundary\r\ncondition can be added.  If both solvers are present then the intended\r\nsolver's name must be provided as an argument to the script command.\r\n\r\nThe temperature boundary condition can only be added to the CHARGE\r\nsolver when the solver's temperature dependency is set to 'coupled'.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addtemperaturebc()                 | Adds a temperature boundary          |\r\n|                                      | condition to the HEAT or CHARGE      |\r\n|                                      | solver (whichever is present in the  |\r\n|                                      | objects tree).                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addtemperaturebc(\"solver\\_name\")   | Adds a temperature boundary          |\r\n|                                      | condition to the desired solver      |\r\n|                                      | defined by the argument              |\r\n|                                      | \"solver\\_name\".  The options are     |\r\n|                                      | \"HEAT\" and \"CHARGE\".                 |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddconvectionbc(), addradiationbc(), addthermalpowerbc(),\r\naddheatfluxbc(), addthermalinsulatingbc(), addvoltagebc()\r\n"}, "addtemperaturemonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_addtemperaturemonitor.html", "text": "Adds a temperature monitor to the DEVICE simulation environment. The\r\nmonitor can only be added if the simulation environment already has a\r\n'HEAT' or 'CHARGE' (or both) solver present.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addtemperaturemonitor()            | Adds a temperature monitor to the    |\r\n|                                      | simulation environment. This format  |\r\n|                                      | of the command is only application   |\r\n|                                      | when only one solver is present in   |\r\n|                                      | the model tree.                      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n|                                      |                                      |\r\n|                                      | If multiple solvers are present then |\r\n|                                      | use the second format                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addtemperaturemonitor(\"solver\\_nam | This format of the command will add  |\r\n| e\")                                  | a temperature monitor to the solver  |\r\n|                                      | defined by the argument. The \"solver |\r\n|                                      | name\" will be either \u201cCHARGE\u201d or     |\r\n|                                      | \u201cHEAT.\u201d For the CHARGE solver, the   |\r\n|                                      | temperature monitor only works if    |\r\n|                                      | the \"temperature dependence\" is set  |\r\n|                                      | to \"non-isothermal\" or \"coupled.\"    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addheatfluxmonitor()\r\n"}, "addtfsf": {"link": "https://kb.lumerical.com/en/ref_scripts_addtfsf.html", "text": "Adds a Total Field Scattered Field (TFSF) source to the simulation\r\nenvironment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addtfsf()                          | Add a total field scattered field    |\r\n|                                      | source to the simulation             |\r\n|                                      | environment.                         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addplane(), addgaussian()\r\n"}, "addthermalinsulatingbc": {"link": "https://kb.lumerical.com/en/ref_scripts_addthermalinsulatingbc.html", "text": "Adds a new insulating (thermal) boundary condition to the HEAT or CHARGE\r\nsolver [Boundary Conditions (Thermal Simulation)].  A HEAT or CHARGE\r\nsolver region must be present in the objects tree before this boundary\r\ncondition can be added.  If both solvers are present then the intended\r\nsolver's name must be provided as an argument to the script command.\r\n\r\nThe  insulating (thermal) boundary condition can only be added to the\r\nCHARGE solver when the solver's temperature dependency is set to\r\n'coupled'.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addthermalinsulatingbc()           | Adds an insulating (thermal)         |\r\n|                                      | boundary condition to the HEAT or    |\r\n|                                      | CHARGE solver (whichever is present  |\r\n|                                      | in the objects tree).                |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addthermalinsulatingbc(\"solver\\_na | Adds an insulating (thermal)         |\r\n| me\")                                 | boundary condition to the desired    |\r\n|                                      | solver defined by the argument       |\r\n|                                      | \"solver\\_name\".  The options are     |\r\n|                                      | \"HEAT\" and \"CHARGE\".                 |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddtemperaturebc(), addconvectionbc(), addradiationbc(),\r\naddthermalpowerbc(), addheatfluxbc(), addvoltagebc()\r\n"}, "addthermalpowerbc": {"link": "https://kb.lumerical.com/en/ref_scripts_addthermalpowerbc.html", "text": "Adds a new thermal power boundary condition to the HEAT or CHARGE solver\r\n[Boundary Conditions (Thermal Simulation)].  A HEAT or CHARGE solver\r\nregion must be present in the objects tree before this boundary\r\ncondition can be added.  If both solvers are present then the intended\r\nsolver's name must be provided as an argument to the script command.\r\n\r\nThe thermal power boundary condition can only be added to the CHARGE\r\nsolver when the solver's temperature dependency is set to 'coupled'.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addthermalpowerbc()                | Adds a thermal power boundary        |\r\n|                                      | condition to the HEAT or CHARGE      |\r\n|                                      | solver (whichever is present in the  |\r\n|                                      | objects tree).                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addthermalpowerbc(\"solver\\_name\")  | Adds a thermal power boundary        |\r\n|                                      | condition to the desired solver      |\r\n|                                      | defined by the argument              |\r\n|                                      | \"solver\\_name\".  The options are     |\r\n|                                      | \"HEAT\" and \"CHARGE\".                 |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddtemperaturebc(), addconvectionbc(), addradiationbc(),\r\naddheatfluxbc(), addthermalinsulatingbc(), addvoltagebc()\r\n"}, "addtime": {"link": "https://kb.lumerical.com/en/ref_scripts_addtime.html", "text": "Adds a time monitor to the simulation environment.  The time monitor\r\nprovides time-domain information for field components over the course of\r\nthe simulation\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addtime()                          | Adds a time monitor to the           |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "addtogroup": {"link": "https://kb.lumerical.com/en/ref_scripts_addtogroup.html", "text": "Adds selected objects to a group.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addtogroup(\"group name\")           | Adds selected object(s) to a group.  |\r\n|                                      | If a group with name \"group name\"    |\r\n|                                      | already exists, then the objects are |\r\n|                                      | added to the existing group.         |\r\n|                                      | Otherwise, a group named \"group      |\r\n|                                      | name\" is created.                    |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddgroup(), addstructuregroup(), addanalysisgroup(), adduserprop(),\r\nrunsetup()\r\n"}, "addtolibrary": {"link": "https://kb.lumerical.com/en/ref_scripts_addtolibrary.html", "text": "Adds the selected element to the currently selected folder under Custom\r\nlibrary.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addtolibrary (\"name\")              | Adds an element, to the currently    |\r\n|                                      | selected folder under Custom         |\r\n|                                      | library. The \"name\" specified is the |\r\n|                                      | custom folder name. If no folder     |\r\n|                                      | named as specified, a new folder     |\r\n|                                      | will be generated under the Custom   |\r\n|                                      | library.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlibrary(), customlibrary()\r\n"}, "addtriangle": {"link": "https://kb.lumerical.com/en/ref_scripts_addtriangle.html", "text": "Adds a 3 vertex, triangle shaped polygon primitive to the simulation\r\nenvironment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addtriangle()                      | Adds a triangle primitive to the     |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddpoly(), set()\r\n"}, "adduniformheat": {"link": "https://kb.lumerical.com/en/ref_scripts_adduniformheat.html", "text": "Adds a constant heat source to the HEAT solver region.  The input is\r\ndefined as the net heat input to the volume in units of Watt.  The\r\nuniform heat source can either be 2D or 3D.  The heat input per unit\r\nvolume (W/m3) is calculated by dividing the net input power by the\r\nvolume of the (3D) source.  In the case of a 2D source the volume of the\r\nsource is defined by setting the length in the third dimension equal to\r\neither the \"equivalent length\" of the source or the \"norm length\" of the\r\nHEAT solver.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.adduniformheat()                   | Adds a constant heat source to the   |\r\n|                                      | simulation environment.              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), addimportheat()\r\n"}, "adduserprop": {"link": "https://kb.lumerical.com/en/ref_scripts_adduserprop.html", "text": "Adds a user defined custom property to the setup user defined structure\r\nand analysis groups.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.adduserprop(\"property name\", type, | Adds a user property to a selected   |\r\n| value)                               | structure group. The name is set to  |\r\n|                                      | \"property name\". The type is an      |\r\n|                                      | integer from 0 to 5. The             |\r\n|                                      | corresponding variable types are     |\r\n|                                      |                                      |\r\n|                                      | 0 number                             |\r\n|                                      |                                      |\r\n|                                      | 1 text                               |\r\n|                                      |                                      |\r\n|                                      | 2 length                             |\r\n|                                      |                                      |\r\n|                                      | 3 time                               |\r\n|                                      |                                      |\r\n|                                      | 4 frequency                          |\r\n|                                      |                                      |\r\n|                                      | 5 material                           |\r\n|                                      |                                      |\r\n|                                      | The value of the user property is    |\r\n|                                      | set to value.                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddstructuregroup(), runsetup()\r\n"}, "addvarfdtd": {"link": "https://kb.lumerical.com/en/ref_scripts_addvarfdtd.html", "text": "Adds a 2.5D varFDTD solver region to the MODE Solutions simulation\r\nenvironment.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addvarfdtd()                       | Adds a 2.5D varFDTD simulation       |\r\n|                                      | region.                              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrun(), addeme(), addfde()\r\n"}, "addvoltagebc": {"link": "https://kb.lumerical.com/en/ref_scripts_addvoltagebc.html", "text": "Adds a new voltage boundary condition to the HEAT solver [Boundary\r\nConditions (Thermal Simulation)].  A HEAT solver region must be present\r\nin the objects tree before an electrical contact boundary condition can\r\nbe added.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addvoltagebc()                     | Adds a voltage boundary condition to |\r\n|                                      | the HEAT solver.                     |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddconvectionbc(), addradiationbc(), addthermalpowerbc(),\r\naddheatfluxbc(), addvoltagebc()\r\n"}, "addwaveguide": {"link": "https://kb.lumerical.com/en/ref_scripts_addwaveguide.html", "text": "Adds a waveguide object in the simulation space.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.addwaveguide()                     | Adds a waveguide in the simulation   |\r\n|                                      | space.                               |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset()\r\n"}, "all": {"link": "https://kb.lumerical.com/en/ref_scripts_all.html", "text": "Returns 1 if all of the specified matrix entries are nonzero and returns\r\n0 otherwise.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.all(A)                       | Will return 1 if all of the A matrix |\r\n|                                      | entries are nonzero and will return  |\r\n|                                      | 0 otherwise.                         |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.all(A,n)                     | n is an optional parameter to        |\r\n|                                      | analyze entries in a specific        |\r\n|                                      | dimension                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nany(), almostequal()\r\n"}, "almostequal": {"link": "https://kb.lumerical.com/en/ref_scripts_almostequal.html", "text": "Performs an almost-equal comparison. When using floating point numbers\r\n(rather than integers), two values that are meant to be equal may not be\r\nexactly equal due to rounding errors that are always present in floating\r\npoint calculations. In such cases, the almostequal function can be\r\nuseful.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.almostequal(A, B)            | Returns 1 if \\|A - B\\| is less than  |\r\n|                                      | or equal to \\|A + B\\|/2\\*1e-15.      |\r\n|                                      | Returns 0 otherwise.                 |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.almostequal(A, B, relative   | Returns 1 if \\|A - B\\| is less than  |\r\n| diff)                                | or equal to \\|A + B\\|/2 times        |\r\n|                                      | relative diff. Returns 0 otherwise.  |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.almostequal(A, B, relative   | Returns 1 if \\|A - B\\| is less than  |\r\n| diff, absolute diff)                 | or equal to \\|A + B\\|/2 times        |\r\n|                                      | relative diff or if \\|A - B\\| is     |\r\n|                                      | less than or equal to absolute diff. |\r\n|                                      | Returns 0 otherwise.                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nand(), or()\r\n"}, "amax": {"link": "https://kb.lumerical.com/en/ref_scripts_amax.html", "text": "Returns the maximum value in a specified dimension of a matrix. For\r\ncomplex numbers, only the real part is considered.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.amax(x,n)                    | The maximum value in the specified   |\r\n|                                      | dimension n of matrix x.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmin(), max(), abs(), mean(), amin()\r\n"}, "amin": {"link": "https://kb.lumerical.com/en/ref_scripts_amin.html", "text": "Returns the minimum value in a specified dimension of a matrix. For\r\ncomplex numbers, only the real part is considered.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.amin(x,n)                    | The minimum value in the specified   |\r\n|                                      | dimension n of matrix x.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmin(), max(), abs(), mean(), amax()\r\n"}, "analysis": {"link": "https://kb.lumerical.com/en/ref_scripts_analysis.html", "text": "Opens the MODE Solutions analysis window corresponding to the active\r\nsolver (FDE or EME).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.analysis()                         | Opens the analysis window            |\r\n|                                      | corresponding to the active solver.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetanalysis(), getanalysis(), mesh(), findmodes(), frequencysweep()\r\n"}, "and": {"link": "https://kb.lumerical.com/en/ref_scripts_and2.html", "text": "Is the logical AND function. Imaginary components of x and y are\r\nignored.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = y & x()                        | If the real part of either or both   |\r\n|                                      | of x,y are zero, then return 0.      |\r\n|                                      | Otherwise return 1.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| y o.and x()                          | Same as &.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nand(), or()\r\n"}, "angle": {"link": "https://kb.lumerical.com/en/ref_scripts_angle.html", "text": "Returns the angle or phase of a complex number or matrix in radians.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.angle(x)                     | Returns the phase of x. The phase is |\r\n|                                      | evaluated between -pi and pi.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nreal(), imag(), unwrap()\r\n"}, "annotateproperty": {"link": "https://kb.lumerical.com/en/ref_scripts_annotateproperty.html", "text": "Enables \u2018property\u2019 annotation on a given \u2018element\u2019.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.annotateproperty               | Enables \u2018property\u2019 annotation on a   |\r\n| (element,property,annotate)          | given \u2018element\u2019. If \u2018annotate\u2019 is    |\r\n|                                      | true the property is annotated, if   |\r\n|                                      | \u2018annotate\u2019 is false the annotation   |\r\n|                                      | is disable. The default value of     |\r\n|                                      | \u2018annotate\u2019 is true.                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nhideproperty(), hidecategory(), ispropertyactive()\r\n"}, "any": {"link": "https://kb.lumerical.com/en/ref_scripts_any.html", "text": "Returns 1 if any of the specified matrix entries are nonzero and returns\r\n0 otherwise.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.any(A)                       | Will return 1 if any of the A matrix |\r\n|                                      | entries are nonzero and will return  |\r\n|                                      | 0 otherwise.                         |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.any(A,n)                     | n is an optional parameter to        |\r\n|                                      | analyze entries in a specific        |\r\n|                                      | dimension                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nall(), almostequal()\r\n"}, "appopen": {"link": "https://kb.lumerical.com/en/ref_scripts_appopen.html", "text": "A MATLAB command that opens a session of selected Lumerical tool via the\r\nMatlab interoperability API. Once the session is opened, Lumerical can\r\nbe called from Matlab to execute Lumerical script command(s) and execute\r\nthem. Opened Lumerical session also allows Matlab to get variables from\r\nLumerical workspace.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| h=o.appopen('fdtd')                  | When executed in Matlab, this        |\r\n|                                      | command will open a session of FDTD  |\r\n|                                      | via the interoperability API.        |\r\n|                                      |                                      |\r\n|                                      | Accepted parameters:                 |\r\n|                                      |                                      |\r\n|                                      | 'fdtd'                               |\r\n|                                      |                                      |\r\n|                                      | 'mode'                               |\r\n|                                      |                                      |\r\n|                                      | 'device'                             |\r\n|                                      |                                      |\r\n|                                      | 'interconnect'                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nappclose(), appevalscript(), appgetvar()\r\n"}, "appclose": {"link": "https://kb.lumerical.com/en/ref_scripts_appclose.html", "text": "A MATLAB command that will close an active Lumerical session opened via\r\nMatlab interoperability API.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.appclose(h)                        | Closes an active session h           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nappopen(), appevalscript(), appgetvar()\r\n"}, "appevalscript": {"link": "https://kb.lumerical.com/en/ref_scripts_appevalscript.html", "text": "A Matlab command that will execute Lumerical script command(s) in an\r\nactive Lumerical session opened via Matlab interoperability API.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.appevalscript(h,'scriptcommand')   | Executes an arbitrary Lumerical      |\r\n|                                      | script command in an active session  |\r\n|                                      | h                                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nappopen(), appclose(), appgetvar()\r\n"}, "appgetvar": {"link": "https://kb.lumerical.com/en/ref_scripts_appgetvar.html", "text": "A Matlab command that will retrieve a variable from Lumerical workspace\r\ninto Matlab workspace via Matlab interoperability API.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| x=o.appgetvar(h,'T')                 | Retrieves variable T from Lumerical  |\r\n|                                      | workspace via an active session h    |\r\n|                                      | and adds it into Matlab workspace as |\r\n|                                      | variable x                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nappopen(), appclose(), appevalscript()\r\n"}, "arrayperiodicdata": {"link": "https://kb.lumerical.com/en/ref_scripts_arrayperiodicdata.html", "text": "Generates an array of periodic data from a unit cell dataset based on a\r\ngiven plane of periodicity. This function is useful for obtaining the\r\ncomplete form of data from a periodic simulation which only contains\r\ndata from one unit cell. Only unstructured datasets are supported by\r\nthis command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.arrayperiodicdata(dataset,'periodi | Unfolds data from a symmetric        |\r\n| c\\_plane',count)                     | dataset based on a given plane of    |\r\n|                                      | symmetry.                            |\r\n|                                      |                                      |\r\n|                                      | The first argument is a 2D or 3D     |\r\n|                                      | unstructured dataset. The second     |\r\n|                                      | argument is the plane with respect   |\r\n|                                      | to which data is periodic in the     |\r\n|                                      | format [+-][xyz], e.g. \u201c-y\u201d and      |\r\n|                                      | refers to the axis of the plane of   |\r\n|                                      | periodicity (i.e. the direction for  |\r\n|                                      | the periodicity vector will be taken |\r\n|                                      | from the sign, and that plane, e.g.  |\r\n|                                      | y-normal, will be used for           |\r\n|                                      | arraying). The third argument count  |\r\n|                                      | is number of unit cells to copy in   |\r\n|                                      | the array (if 1, only returns the    |\r\n|                                      | unit cell).                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nunfoldsymmetricdata(), unstructureddataset(), rectilineardataset(),\r\naddattribute(), addparameter(), visualize(), getparameter(),\r\ngetattribute(), matrixdataset(), struct()\r\n"}, "asapexport": {"link": "https://kb.lumerical.com/en/ref_scripts_asapexport.html", "text": "Exports the desired monitor to a file for interfacing with BRO's ASAP.\r\nThese files have the .fld extension. The monitor must be a frequency\r\npower or a frequency profile monitor.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.asapexport( \"monitorname\")         | Export data from monitorname. By     |\r\n|                                      | default, the first frequency point   |\r\n|                                      | is exported.                         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.asapexport( \"monitorname\", f)      | Exports the frequency point          |\r\n|                                      | specified by the index f.            |\r\n+--------------------------------------+--------------------------------------+\r\n| o.asapexport( \"monitorname\", f,      | Exports to the specified \"filename\"  |\r\n| \"filename\")                          | without opening a file browser       |\r\n|                                      | window.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nasapload(), asapimport(), addimportedsource()\r\n"}, "asapimport": {"link": "https://kb.lumerical.com/en/ref_scripts_asapimport.html", "text": "Imports an ASAP fld file into an ASAP source. This is equivalent to\r\nediting the properties of the Import source, and clicking on the Import\r\nSource button.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.asapimport( \"sourcename\")          | Imports the fld file into the        |\r\n|                                      | sourcename source. A file browser    |\r\n|                                      | will open to select the file.        |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.asapimport( \"sourcename\",          | Specify the file to open.            |\r\n| \"filename\")                          |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nasapexport(), asapload(), addimportedsource(), fileexists()\r\n"}, "asapload": {"link": "https://kb.lumerical.com/en/ref_scripts_asapload.html", "text": "Loads data from an fld file from BRO's ASAP. asapload creates a d-card\r\nstructure called \"fld\\_data\" which contains all the data in the file. If\r\n\"fld\\_data\" exists, it will be called \"fld\\_data\\_2\". After loading an\r\nasapfile with asapload, you can extract any desired data., which can be\r\n\r\n\u2022Ex, Ey, Ez, Hx, Hy, Hz, x, y, z\r\n\r\n\u2022power, frequency, wavelength, index\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.asapload()                         | Select the file to load with the     |\r\n|                                      | file browser.                        |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.asapload( \"filename\")              | Loads data from an fld file called   |\r\n|                                      | \"filename\" without a file browser.   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nasapexport(), asapimport(), addimportedsource(), fileexists()\r\n"}, "asin": {"link": "https://kb.lumerical.com/en/ref_scripts_asin.html", "text": "Calculates the inverse trigonometric sine function (arcsine). Angle\r\nunits are in radians. The function is defined for complex values. Phase\r\nof a complex number is evaluated between -pi and pi. If x is complex, or\r\nabs(x) > 1, the following equation is used:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.asin(x)                      | Returns the complex arcsine of x.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsin()\r\n"}, "atan": {"link": "https://kb.lumerical.com/en/ref_scripts_atan.html", "text": "Calculates the inverse trigonometric tangent function (arctangent).\r\nAngle units are in radians. The function is defined for complex values.\r\nPhase of a complex number is evaluated between -pi and pi. If x is\r\ncomplex, or abs(x) > 1, the following equation is used:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.atan(x)                      | Returns the complex arctangent of x. |\r\n|                                      | The range of atan is -pi/2 to pi/2.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\natan2(), tan()\r\n"}, "atan2": {"link": "https://kb.lumerical.com/en/ref_scripts_atan2.html", "text": "Calculates the inverse trigonometric tangent function (arctangent) of\r\ny/x, returning the angle in the correct quadrant. Angle units are in\r\nradians. The function is defined for real values only.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.atan2(y,x)                   | x,y must be real. The range of atan2 |\r\n|                                      | is -pi to pi.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\natan(), tan()\r\n"}, "autoarrange": {"link": "https://kb.lumerical.com/en/ref_scripts_autoarrange.html", "text": "The script command arranges port positions and dimensions of compound or\r\nscripted elements automatically. Equivalently it can also be done by\r\npressing \u2018Arrange\u2019 on the element port editor tab.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.autoarrange (name)                 | Arrange port positions and           |\r\n|                                      | dimensions of compound or scripted   |\r\n|                                      | elements automatically. This command |\r\n|                                      | does not return anything.            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncreatecompound()\r\n"}, "autosaveoff": {"link": "https://kb.lumerical.com/en/ref_scripts_autosaveoff.html", "text": "This command turns off the feature to automatically save the current\r\nproject before running a simulation.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.autosaveoff()                      | The project will not be saved        |\r\n|                                      | automatically before running a       |\r\n|                                      | simulation (default).                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nautosaveon()\r\n"}, "autosaveon": {"link": "https://kb.lumerical.com/en/ref_scripts_autosaveon.html", "text": "This command turns on the feature to automatically save the current\r\nproject before running a simulation.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.autosaveon()                       | Automatically saves current project  |\r\n|                                      | before running a simulation.         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nautosaveoff()\r\n"}, "bar": {"link": "https://kb.lumerical.com/en/ref_scripts_bar.html", "text": "Plots a bar chart.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.bar(y)                       | Creates a bar plot where each bar    |\r\n|                                      | corresponds to one element in y,     |\r\n|                                      | which must be a 1D array. The figure |\r\n|                                      | number is returned.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.bar(x,y)                           | x is a nx1 matrix.                   |\r\n|                                      |                                      |\r\n|                                      | y is a nxm matrix.                   |\r\n|                                      |                                      |\r\n|                                      | Creates m bar plots with n bars in   |\r\n|                                      | the same figure for the elements in  |\r\n|                                      | y at positions given by x. The       |\r\n|                                      | figure number is returned.           |\r\n+--------------------------------------+--------------------------------------+\r\n| o.bar(x,y, \"x label\", \"y label\",     | Creates a bar plot of y vs x with    |\r\n| \"title\")                             | axis labels and a title, returns the |\r\n|                                      | figure number. The figure number is  |\r\n|                                      | returned.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+----+\r\n+----+----+\r\n\r\nSee Also\r\n\r\nhistc(), plot()\r\n"}, "besseli": {"link": "https://kb.lumerical.com/en/ref_scripts_besseli.html", "text": "Computes the modified Bessel function of the first kind.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.besseli(nu, z)                 | \"nu\" is the order and \"z\" could be   |\r\n|                                      | an array. Both nu and z need to be   |\r\n|                                      | real.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nbessely(), besselj(), besselk()\r\n"}, "besselj": {"link": "https://kb.lumerical.com/en/ref_scripts_besselj.html", "text": "Computes the Bessel function of the first kind.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.besselj(nu, z)                 | \"nu\" is the order and \"z\" could be   |\r\n|                                      | an array. Both nu and z need to be   |\r\n|                                      | real.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nbessely(), besseli(), besselk()\r\n"}, "besselk": {"link": "https://kb.lumerical.com/en/ref_scripts_besselk.html", "text": "Computes the modified Bessel function of the second kind.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.besselk(nu, z)                 | \"nu\" is the order and \"z\" could be   |\r\n|                                      | an array. Both nu and z need to be   |\r\n|                                      | real.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nbessely(), besseli(), besselj()\r\n"}, "bessely": {"link": "https://kb.lumerical.com/en/ref_scripts_bessely.html", "text": "Computes the Bessel function of the second kind.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.bessely(nu, z)                 | \"nu\" is the order and \"z\" could be   |\r\n|                                      | an array. Both nu and z need to be   |\r\n|                                      | real.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nbesselj(), besseli(), besselk()\r\n"}, "bestoverlap": {"link": "https://kb.lumerical.com/en/ref_scripts_bestoverlap.html", "text": "Finds the mode with highest (best) overlap between the specified D-CARD\r\nand the currently calculated modes in the mode list. Returns the name of\r\nthe mode with the best overlap. This function is used for tracking the\r\ndesired mode during parameter sweeps using the FDE solver.\r\n\r\nSee the overlap function for more details about overlap and coupling\r\ncalculations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.bestoverlap(\"test\\_mode\")    | Calculates the best overlap.         |\r\n|                                      |                                      |\r\n|                                      | \u2022out: a string containing the name   |\r\n|                                      | of the mode with the best overlap    |\r\n|                                      |                                      |\r\n|                                      | \u2022test\\_mode: a string containing the |\r\n|                                      | name of a D-CARD mode                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfindmodes(), coupling(), overlap(), propagate(), expand(), expand2(),\r\nbestoverlap2()\r\n"}, "bestoverlap2": {"link": "https://kb.lumerical.com/en/ref_scripts_bestoverlap2.html", "text": "This function is similar to bestoverlap but it uses expand2 to get the\r\nnecessary parameters, which can be useful when an evanescent mode is\r\ninvolved.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.bestoverlap2(\"test\\_mode\")   | Calculates the best overlap.         |\r\n|                                      |                                      |\r\n|                                      | \u2022out: a string containing the name   |\r\n|                                      | of the mode with the best overlap    |\r\n|                                      |                                      |\r\n|                                      | \u2022test\\_mode: a string containing the |\r\n|                                      | name of a D-CARD mode                |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.bestoverlap2(\"test\\_mode\",   | Calculates the best overlap.         |\r\n| x,y,z)                               |                                      |\r\n|                                      | \u2022out: a string containing the name   |\r\n|                                      | of the mode with the best overlap    |\r\n|                                      |                                      |\r\n|                                      | \u2022test\\_mode: a string containing the |\r\n|                                      | name of a D-CARD mode                |\r\n|                                      |                                      |\r\n|                                      | Mode alignment can be adjusted       |\r\n|                                      | before best overlap is calculated.   |\r\n|                                      |                                      |\r\n|                                      | \u2022x offset                            |\r\n|                                      |                                      |\r\n|                                      | \u2022y offset                            |\r\n|                                      |                                      |\r\n|                                      | \u2022z offset                            |\r\n|                                      |                                      |\r\n|                                      | The offset is applied to the         |\r\n|                                      | test\\_mode.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfindmodes(), coupling(), overlap(), propagate(), expand(), expand2(),\r\nbestoverlap()\r\n"}, "break": {"link": "https://kb.lumerical.com/en/ref_scripts_break.html", "text": "Stops a script from executing.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.break()                            | Will stop a script file from         |\r\n|                                      | executing at that line. A warning    |\r\n|                                      | will be generated.                   |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npause()\r\n"}, "cd": {"link": "https://kb.lumerical.com/en/ref_scripts_cd.html", "text": "Changes the directory. The directory is where the file is saved by\r\ndefault.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.cd()                               | Opens a window to browse to a        |\r\n|                                      | directory.                           |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.cd(\"directory\")                    | Changes the working directory to     |\r\n|                                      | \"directory\". Whenever you open an    |\r\n|                                      | fsp file or run a script file, it    |\r\n|                                      | will set the working directory to    |\r\n|                                      | the directory of the file opened.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npwd()\r\n"}, "ceil": {"link": "https://kb.lumerical.com/en/ref_scripts_ceil.html", "text": "Rounds the input to the nearest integer greater than or equal to itself.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.ceil(x)                      | Returns the nearest integer greater  |\r\n|                                      | than or equal to x.                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfloor(), mod()\r\n"}, "cell": {"link": "https://kb.lumerical.com/en/ref_scripts_cell.html", "text": "Creates a cell array variable with specified number of elements. The\r\ncell array element can be any data type, such as matrix, string, and\r\ndataset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| a = o.cell(n)                        | Creates a cell array with n          |\r\n|                                      | elements.                            |\r\n+--------------------------------------+--------------------------------------+\r\n| a{n} = \"string\"()                    | Adds a string to the specified       |\r\n|                                      | element of the cell array.           |\r\n+--------------------------------------+--------------------------------------+\r\n| a{n} = matrix(5,5)                   | Adds a field of matrix of 5x5 to the |\r\n|                                      | specified element of the cell array. |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatrixdataset(), rectilineardataset(), struct(), splitstring()\r\n"}, "centroid": {"link": "https://kb.lumerical.com/en/ref_scripts_centroid.html", "text": "Returns the center of mass of a polygon assuming uniform density.\r\n\r\nThe polygon vertices are contained in a single matrix of dimension Nx2\r\n(or 2xN), where N >= 3 is the number of vertices. The dimension 2\r\ncorresponds to the x,y positions. For example, a square of side length 1\r\ncan be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.centroid(V)                  | Returns the center of mass of V,     |\r\n|                                      | assuming uniform density. The output |\r\n|                                      | is a 2x1 matrix representing the x   |\r\n|                                      | and y positions.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npolyarea(), polyintersect(), inpoly(), polygrow(), polyand(), polyor(),\r\npolydiff(), polyxor()\r\n"}, "chebin": {"link": "https://kb.lumerical.com/en/ref_scripts_chebin.html", "text": "Returns the Chebyshev interpolation of a sampled function. Chebyshev\r\ninterpolation is useful for accurately interpolating a smooth function\r\nusing a very small number of samples. The key requirement for this type\r\nof interpolation to work is that the function is sampled on the\r\nChebyshev roots grid.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.chebin(f,x,xi,xmin,xmax)           | Interpolates the function f onto the |\r\n|                                      | xi points. It assumes that f         |\r\n|                                      | contains the samples of the function |\r\n|                                      | taken on the Chebyshev roots grid    |\r\n|                                      | specified in x; x must be            |\r\n|                                      | constructed by the call              |\r\n|                                      |                                      |\r\n|                                      | # x = chpts(xmin,xmax,NumPts),       |\r\n|                                      | otherwise an error is returned.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndcht(), chpts(), icht()\r\n"}, "chebpol": {"link": "https://kb.lumerical.com/en/ref_scripts_chebpol.html", "text": "Generates the Chebyshev polynomials of the first kind. This command can\r\nbe used in combination with dcht to calculate the Chebyshev\r\ninterpolation. Compared to the chebin command, using chebpol for the\r\ninterpolation offers additional control over the interpolation process\r\nas it allows the user to specify the polynomial order.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.chebpol(N,xi,xmin,xmax)            | This command generates a matrix      |\r\n|                                      | containing the Chebyshev polynomials |\r\n|                                      | of the first kind of orders zero to  |\r\n|                                      | N-1 evaluated at the xi points.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndcht(), chpts(), icht(), chebin(), chebpol1()\r\n"}, "chebpol1": {"link": "https://kb.lumerical.com/en/ref_scripts_chebpol1.html", "text": "Returns the first derivative of the Chebyshev polynomials of the first\r\nkind.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.chebpol1(N,xi,xmin,xmax)           | This command generates a matrix      |\r\n|                                      | containing the Chebyshev polynomials |\r\n|                                      | of the first kind of orders zero to  |\r\n|                                      | N-1 evaluated at the xi points.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndcht(), chpts(), icht(), chebin(), chebpol()\r\n"}, "checkout": {"link": "https://kb.lumerical.com/en/ref_scripts_checkout.html", "text": "Obtains the given license feature from the license server and holds it\r\nfor the duration of the application's lifetime. Any additional checkout\r\nattempts by the application for the license will not increment the\r\nlicense count. Closing the application is the only way to release the\r\nlicense back into the pool.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.checkout(\"licensefeature\")         | Obtains the given license feature    |\r\n|                                      | from the license server and holds it |\r\n|                                      | for the duration of the              |\r\n|                                      | application's lifetime.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "chol": {"link": "https://kb.lumerical.com/en/ref_scripts_chol.html", "text": "Calculates the Cholesky lower triangular factorization or decomposition.\r\nFor a given matrix A, chol returns a lower triangular matrix L such that\r\nA is the matrix product of L and its conjugate transpose. The matrix A\r\ncan be real or complex but it must be Hermitian and positive-definite. \r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| L = o.chol(A)                        | Returns a lower triangular matrix L  |\r\n|                                      | that satisfies the equation A =      |\r\n|                                      | mult(L,ctranspose(L))                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmult(), ctranspose()\r\n"}, "chpts": {"link": "https://kb.lumerical.com/en/ref_scripts_chpts.html", "text": "Samples function on a Chebyshev grid. Chebyshev interpolation is useful\r\nfor accurately interpolating a smooth function using a very small number\r\nof samples. The key requirement for this type of interpolation to work\r\nis that the function is sampled on the Chebyshev roots grid, which can\r\nbe done by using this command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| x=o.chpts(xmin,xmax,NumPts,option)   | Returns Chebyshev roots grid on      |\r\n|                                      | interval between xmin and xmax that  |\r\n|                                      | can be used to sample a smooth       |\r\n|                                      | function.                            |\r\n|                                      |                                      |\r\n|                                      | NumPts defines the number of points  |\r\n|                                      | on given interval.                   |\r\n|                                      |                                      |\r\n|                                      | Option:                              |\r\n|                                      |                                      |\r\n|                                      | If option=1 is selected, the vector  |\r\n|                                      | x will not include the endpoints     |\r\n|                                      |                                      |\r\n|                                      | If option=2 is selected, the vector  |\r\n|                                      | x will include the endpoints         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndcht(), chebin(), icht(), interp()\r\n"}, "clear": {"link": "https://kb.lumerical.com/en/ref_scripts_clear.html", "text": "Clears all or specified stored workspace variables. This will not clear\r\nany simulation data stored in d-cards. The variables c, pi, eps0, mu0\r\nwill be reset to their default values.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.clear()                            | Clears all workspace variables.      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.clear(var1, var2, ...)             | Clears only the workspace variables  |\r\n|                                      | with the specified names.            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncleardcard()\r\n"}, "clearanalysis": {"link": "https://kb.lumerical.com/en/ref_scripts_clearanalysis.html", "text": "Clears analysis object results. This data is also cleared by switching\r\nfrom Analysis Mode to Layout Mode.\r\n\r\nNote: The analysis object results are calculated with the runanalysis\r\ncommand.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.clearanalysis()                    | Clears analysis object results.      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.clearanalysis( \"name1\", \"name2\",   | Clears data from specific analysis   |\r\n| ...)                                 | objects.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nswitchtolayout(), getdata(), runanalysis(), havedata()\r\n"}, "cleardataset": {"link": "https://kb.lumerical.com/en/ref_scripts_cleardataset.html", "text": "This command clears the dataset from any current 'np Density' grid\r\nattribute. This is only useful for keeping file size small.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.cleardataset()                     | Clears the dataset from the selected |\r\n|                                      | grid attribute.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nimportdataset(), addgridattribute()\r\n"}, "cleardcard": {"link": "https://kb.lumerical.com/en/ref_scripts_cleardcard.html", "text": "Clears global d-cards. Only global d-cards are cleared. Local d-cards\r\nare associated with the current simulation and can only be cleared by\r\nswitching from Analysis Mode to Layout Mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.cleardcard()                       | Clears all the global d-cards.       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.cleardcard( \"name1\", \"name2\", ...) | Clears any number of specified       |\r\n|                                      | d-cards.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nhavedata(), copydcard()\r\n"}, "clearjobs": {"link": "https://kb.lumerical.com/en/ref_scripts_clearjobs.html", "text": "Remove all jobs from the job manager queue.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.clearjobs(\"solver\")                | Remove all jobs from the job queue   |\r\n|                                      | of the specified solver. If no       |\r\n|                                      | solver is specified, jobs for all    |\r\n|                                      | solvers will be removed from job     |\r\n|                                      | manager queue. No solver argument is |\r\n|                                      | needed for INTERCONNECT.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddjob(), runjobs(), listjobs()\r\n"}, "clearmodedata": {"link": "https://kb.lumerical.com/en/ref_scripts_clearmodedata.html", "text": "Clears mode data for a mode expansion monitor in layout mode. This is\r\nmainly useful to reduce file sizes when saving.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.clearmodedata()                    | Clears mode data for the selected    |\r\n|                                      | mode expansion monitor.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nupdatesourcemode(), asapimport(), asapload(), asapexport(),\r\nclearsourcedata(), getresult(), overlap(), expand(), seteigensolver(),\r\ngeteigensolver()\r\n"}, "clearlogwindow": {"link": "https://kb.lumerical.com/en/ref_scripts_clearlogwindow.html", "text": "Clears the log output log window.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.clearlogwindow()                   | clears output log window.            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "clearpath": {"link": "https://kb.lumerical.com/en/ref_scripts_clearpath.html", "text": "Removes all directories from the script path, except \"./\".\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.clearpath(\"directory\")             | Remove\"directory\" from the script    |\r\n|                                      | path if it is there.                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetpath(), which(), pwd(), addpath()\r\n"}, "clearportmodedata": {"link": "https://kb.lumerical.com/en/ref_scripts_clearportmodedata.html", "text": "Clears mode data from selected FDTD port and ports in MODE Solutions'\r\nEME solver. For more information about the port object see Ports.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.clearportmodedata()                | Clears mode data from selected port. |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddport(), set(), geteigensolver(), seteigensolver(), updateportmodes()\r\n"}, "clearsourcedata": {"link": "https://kb.lumerical.com/en/ref_scripts_clearsourcedata.html", "text": "Clears source data for an imported source, or the selected mode for a\r\nmode source.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.clearsourcedata()                  | Clears source data for the selected  |\r\n|                                      | source.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nupdatesourcemode(), asapimport(), asapload(), asapexport(),\r\nclearmodedata(), getresult(), overlap(), expand(), seteigensolver(),\r\ngeteigensolver()\r\n"}, "cloneportdata": {"link": "https://kb.lumerical.com/en/ref_scripts_cloneportdata.html", "text": "Clones an existing data value. Used for Scripted Element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| data\\_destination =                  | Clones \"data\\_source\", returns the   |\r\n| o.cloneportdata(data\\_source)        | data destination.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npopportdata(), pushportdata(), portdatasize()\r\n"}, "closeall": {"link": "https://kb.lumerical.com/en/ref_scripts_closeall.html", "text": "Closes all open figure windows.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.closeall()                         | Close all open figure windows.       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplot(), image(), exportfigure()\r\n"}, "closesession": {"link": "https://kb.lumerical.com/en/ref_scripts_closesession.html", "text": "An interoperability command that will close an active server session of\r\na specified Lumerical product previously opened via automation API.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.closesession(s)                    | Closes an active session s           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nopensession(), putremotedata(), getremotedata(), evalremote()\r\n"}, "colormatch": {"link": "https://kb.lumerical.com/en/ref_scripts_colormatch.html", "text": "Returns the X, Y and Z tristimulus values calculated for a given\r\nspectral power distribution (power per unit area per unit wavelength)\r\nand a selected set of color matching functions. The colormatch function\r\nassumes that the units of wavelength for the spectral power distribution\r\nare nanometers, for example, W/(m2 nm). The available color functions\r\nare the CIE 1931 and CIE 1964.\r\n\r\nThe X, Y, Z values have dimensions of power per unit area, in the units\r\nused for the spectral power distribution. The expressions for\r\ncalculating the X, Y and Z values are:\r\n\r\nwhere is the spectral power distribution and are the color matching\r\nfunctions.\r\n\r\nReferences:\r\n\r\nhttps://en.wikipedia.org/wiki/CIE\\_1931\\_color\\_space\r\n\r\nCIE Proceedings (1932), 1931. Cambridge: Cambridge University Press.\r\n\r\nCIE Proceedings (1964) Vienna Session, 1963, Vol. B, pp. 209-220\r\n(Committee Report E-1.4.1), Bureau Central de la CIE, Paris.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| cm = o.colormatch(spec, lam,         | Returns X, Y, Z for the spectrum     |\r\n| \"functions\")                         | spec evaluated at the wavelength     |\r\n|                                      | values in lam (units of meters),     |\r\n|                                      | using the selected color functions.  |\r\n|                                      | If no functions are specified, the   |\r\n|                                      | \"CIE 1931\" set is used.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplot(), colormatchfunction(), colormatchxy(), colormatchuv()\r\n"}, "colormatchfunction": {"link": "https://kb.lumerical.com/en/ref_scripts_colormatchfunction.html", "text": "Returns the set of color matching functions selected by the user. These\r\nfunctions are dimensionless. The available sets are the CIE 1931 and CIE\r\n1964.\r\n\r\nReferences:\r\n\r\nCIE Proceedings (1932), 1931. Cambridge: Cambridge University Press.\r\n\r\nCIE Proceedings (1964) Vienna Session, 1963, Vol. B, pp. 209-220\r\n(Committee Report E-1.4.1), Bureau Central de la CIE, Paris.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.colormatchfunction()         | Show the list of available color     |\r\n|                                      | matching functions.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| M =                                  | Get the desired set of color         |\r\n| o.colormatchfunction(\"functions\")    | matching functions from the list of  |\r\n|                                      | available ones.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplotxy(), pinch(), colormatch(), colormatchxy(), colormatchuv()\r\n"}, "colormatchuv": {"link": "https://kb.lumerical.com/en/ref_scripts_colormatchuv.html", "text": "Returns the u' and v' chromaticity values calculated for a given\r\nspectral power distribution (power per unit area per unit wavelength)\r\nand a selected set of color matching functions. The colormatchuv\r\nfunction assumes that the units of wavelength for the spectral power\r\ndistribution are nanometers, for example, W/(m2 nm). The available color\r\nfunctions are the CIE 1931 and CIE 1964.\r\n\r\nThe u' and v' values are dimensionless and they are related to the X, Y\r\nand Z values by:\r\n\r\nReferences:\r\n\r\nhttps://en.wikipedia.org/wiki/CIE\\_1931\\_color\\_space\r\n\r\nhttp://en.wikipedia.org/wiki/CIELUV\r\n\r\nCIE Proceedings (1932), 1931. Cambridge: Cambridge University Press.\r\n\r\nCIE Proceedings (1964) Vienna Session, 1963, Vol. B, pp. 209-220\r\n(Committee Report E-1.4.1), Bureau Central de la CIE, Paris.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| cmuv =                               | Returns u', v' for the spectrum spec |\r\n| o.colormatchuv(colormatch(spec, lam, | evaluated at the wavelength values   |\r\n| \"functions\"))                        | in lam (units of meters), using the  |\r\n|                                      | selected color functions. If no      |\r\n|                                      | functions are specified, the \"CIE    |\r\n|                                      | 1931\" set is used.                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplot(), colormatchfunction(), colormatch(), colormatchxy()\r\n"}, "colormatchxy": {"link": "https://kb.lumerical.com/en/ref_scripts_colormatchxy.html", "text": "Returns the x and y chromaticity values calculated for a given spectral\r\npower distribution (power per unit area per unit wavelength) and a\r\nselected set of color matching functions. The colormatchxy function\r\nassumes that the units of wavelength for the spectral power distribution\r\nare nanometers, for example, W/(m2 nm). The available color functions\r\nare the CIE 1931 and CIE 1964.\r\n\r\nThe x and y values are dimensionless and they are related to the X, Y\r\nand Z values by:\r\n\r\nReferences:\r\n\r\nhttps://en.wikipedia.org/wiki/CIE\\_1931\\_color\\_space\r\n\r\nCIE Proceedings (1932), 1931. Cambridge: Cambridge University Press.\r\n\r\nCIE Proceedings (1964) Vienna Session, 1963, Vol. B, pp. 209-220\r\n(Committee Report E-1.4.1), Bureau Central de la CIE, Paris.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| cmxy =                               | Returns x, y for the spectrum spec   |\r\n| o.colormatchxy(colormatch(spec, lam, | evaluated at the wavelength values   |\r\n| \"functions\"))                        | in lam (units of meters), using the  |\r\n|                                      | selected color functions. If no      |\r\n|                                      | functions are specified, the \"CIE    |\r\n|                                      | 1931\" set is used.                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplot(), colormatchfunction(), colormatch(), colormatchuv()\r\n"}, "comments": {"link": "https://kb.lumerical.com/en/ref_scripts_comments.html", "text": "Comments script files. Anything after the # character is ignored.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| x=1; # set x to 1                    | Anything after the # character is    |\r\n|                                      | ignored.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "conj": {"link": "https://kb.lumerical.com/en/ref_scripts_conj.html", "text": "Returns the complex conjugate of a number or matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.conj(x)                      | Returns the complex conjugate of x.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nreal(), imag()\r\n"}, "connect": {"link": "https://kb.lumerical.com/en/ref_scripts_connect.html", "text": "Connects one element to another via the specified ports.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.connect(\"element1\", \"port1\",       | Connects \"port1\" of \"element1\" to    |\r\n| \"element2\", \"port2\")                 | \"element2\" or \"port2\".               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndisconnect()\r\n"}, "constructgeneratormatrix": {"link": "https://kb.lumerical.com/en/ref_scripts_constructgeneratormatrix.html", "text": "Constructs a symmetric coding generator matrix. This command is\r\nespecially useful together with the FEC block.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.constructgeneratormatrix(parityin, | Constructs a symmetric coding        |\r\n| generatorout, parityout)             | generator matrix \u2018generatorout\u2019 and  |\r\n|                                      | the correspondent parity check       |\r\n|                                      | matrix \u2018parityout\u2019 from a input      |\r\n|                                      | parity check matrix \u2018parityin\u2019. The  |\r\n|                                      | input and the generated files are    |\r\n|                                      | AList formatted files.               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "copy": {"link": "https://kb.lumerical.com/en/ref_scripts_copy.html", "text": "Creates a copy of the selected objects. The copied objects will\r\ntypically be identical (same name, position, etc). For some objects that\r\nmust have a unique name, '\\_1' will be appended to the name.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.copy()                             | Copy the selected objects.           |\r\n+--------------------------------------+--------------------------------------+\r\n| o.copy(dx)                           | Same as copy; but with a specified   |\r\n|                                      | move of dx.                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.copy(dx,dy)                        | Same as copy; but with a specified   |\r\n|                                      | move of dx, dy.                      |\r\n+--------------------------------------+--------------------------------------+\r\n| o.copy(dx,dy,dz)                     | Same as copy; but with a specified   |\r\n|                                      | move of dx, dy, dz.                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmove(), select(), copytoclipboard()\r\n"}, "copydcard": {"link": "https://kb.lumerical.com/en/ref_scripts_copydcard.html", "text": "Will create a global copy of any d-card currently in memory.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.copydcard( \"name\")                 | Will create a global copy of any     |\r\n|                                      | d-card currently in memory called    |\r\n|                                      | \"name\". By default, the new name     |\r\n|                                      | will be \"::global\\_name\". For        |\r\n|                                      | example, copydcard(\"mode1\"); sends   |\r\n|                                      | mode1 to the deck, named             |\r\n|                                      | global\\_mode1.                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.copydcard( \"name\", \"newname\")      | Will create a global copy of any     |\r\n|                                      | d-card currently in memory called    |\r\n|                                      | \"name\". The new name will be         |\r\n|                                      | \"::newname\".                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nhavedata(), cleardcard(), overlap(), savedcard()\r\n"}, "copymaterial": {"link": "https://kb.lumerical.com/en/ref_scripts_copymaterial.html", "text": "Makes a copy of a material in the material database.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.copymaterial(\"materialname\") | Creates a copy of the material       |\r\n|                                      | \"materialname\". The new name is      |\r\n|                                      | returned.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddmaterial(), deletematerial(), setmaterial(), getmaterial()\r\n"}, "copysweep": {"link": "https://kb.lumerical.com/en/ref_scripts_copysweep.html", "text": "Copies a sweep/optimization/Monte Carlo analysis item to clipboard.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.copysweep(\"name\")                  | Copies a sweep/optimization/Monte    |\r\n|                                      | Carlo analysis item to clipboard.    |\r\n|                                      |                                      |\r\n|                                      | \"name\" is the absolute name of a     |\r\n|                                      | sweep/optimization/Monte Carlo       |\r\n|                                      | analysis (eg.                        |\r\n|                                      | ::optimization::sweep1)              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddsweep(), deletesweep(), pastesweep(), addsweep(), insertsweep(),\r\ngetsweep(), setsweep(), addsweepparameter(), addsweepresult(),\r\nremovesweepparameter(), removesweepresult()\r\n"}, "copytoclipboard": {"link": "https://kb.lumerical.com/en/ref_scripts_copytoclipboard.html", "text": "Copies the selected objects into the system clipboard. Equivalent to\r\n'Ctrl-C'.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.copytoclipboard()                  | Copies selected objects to the       |\r\n|                                      | system clipboard                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npastefromclipboard(), copy()\r\n"}, "corrcoef": {"link": "https://kb.lumerical.com/en/ref_scripts_corrcoef.html", "text": "Calculates the correlation matrix. The input can be one matrix, which\r\ncontains the observations of a set of random variables, or two matrices,\r\neach one representing a vector of observations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.corrcoef(A) o.corrcoef(A, B)       | Calculate the correlation matrix.    |\r\n|                                      |                                      |\r\n|                                      | R = corrcoef(A) returns the matrix   |\r\n|                                      | of correlation coefficients for A,   |\r\n|                                      | where the columns of A represent     |\r\n|                                      | random variables and the rows        |\r\n|                                      | represent observations.              |\r\n|                                      |                                      |\r\n|                                      | R = corrcoef(A, B) returns the       |\r\n|                                      | correlation coefficients between two |\r\n|                                      | random variables A and B. If A and B |\r\n|                                      | are vectors of observations with     |\r\n|                                      | equal length, corrcoef(A, B) is the  |\r\n|                                      | 2-by-2 correlation matrix; if A and  |\r\n|                                      | B are matrices of observations,      |\r\n|                                      | corrcoef(A, B) treats A and B as     |\r\n|                                      | vectors and is equivalent to         |\r\n|                                      | corrcoef(A(1:lenght(A)),             |\r\n|                                      | B(1:length(B))). A and B must have   |\r\n|                                      | equal size.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncov(), corrtransf()\r\n"}, "corrtransf": {"link": "https://kb.lumerical.com/en/ref_scripts_corrtransf.html", "text": "Calculates the transformation matrix to generate multiple sequences of\r\ncorrelated random variables.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.corrtransf(A)                      | Calculate the transformation matrix  |\r\n|                                      | to generate multiple sequences of    |\r\n|                                      | correlated random variables given a  |\r\n|                                      | correlation matrix A.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncov(), corrcoef()\r\n"}, "cos": {"link": "https://kb.lumerical.com/en/ref_scripts_cos.html", "text": "Calculates the trigonometric cosine function. Angle units are in\r\nradians. The function is defined for complex angles. Phase of a complex\r\nnumber is evaluated between -pi and pi.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.cos(x)                       | Returns the complex cosine of x.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nacos()\r\n"}, "coupling": {"link": "https://kb.lumerical.com/en/ref_scripts_coupling.html", "text": "Returns the complex coupling coefficient between two modes. The power\r\ncoupling can be calculated with the overlap function, or by the\r\nfollowing formula.\r\n\r\nReference: Allan W. Snyder and John D. Love, Optical Waveguide Theory.\r\nChapman & Hall, London, England, 1983.\r\n\r\nSee the overlap function for more details about overlap and coupling\r\ncalculations.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: coupling command is deprecated, consider using expand              |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.coupling(mode2, mode1)       | \u2022mode2, mode1: the mode names        |\r\n|                                      |                                      |\r\n|                                      | \u2022out: the coupling coefficient       |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.coupling(mode2, mode1, x, y) | Mode alignment can be adjusted       |\r\n|                                      | before coupling is calculated.       |\r\n|                                      |                                      |\r\n|                                      | \u2022x offset                            |\r\n|                                      |                                      |\r\n|                                      | \u2022y offset                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopydcard(), findmodes(), coupling(), overlap(), bestoverlap(),\r\npropagate(), expand(), expand2()\r\n"}, "cov": {"link": "https://kb.lumerical.com/en/ref_scripts_cov.html", "text": "Calculates the covariance matrix. The input can be one matrix, which\r\ncontains the observations of a set of random variables, or two matrices,\r\neach one representing a vector of observations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.cov(A) o.cov(A, B)                 | Calculate the covariance matrix.     |\r\n|                                      |                                      |\r\n|                                      | C = cov(A) returns the covariance. A |\r\n|                                      | is a matrix where columns represent  |\r\n|                                      | random variables and rows represent  |\r\n|                                      | observations; C is the covariance    |\r\n|                                      | matrix with the corresponding column |\r\n|                                      | variances along the diagonal.        |\r\n|                                      |                                      |\r\n|                                      | C = cov(A, B) returns the covariance |\r\n|                                      | between two random variables A and   |\r\n|                                      | B. If A and B are vectors of         |\r\n|                                      | observations with equal length,      |\r\n|                                      | cov(A, B) is the 2-by-2 covariance   |\r\n|                                      | matrix; if A and B are matrices of   |\r\n|                                      | observations, cov(A, B) treats A and |\r\n|                                      | B as vectors and is equivalent to    |\r\n|                                      | cov(A(1:lenght(A)), B(1:length(B))). |\r\n|                                      | A and B must have equal size.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncorrcoef(), corrtransf()\r\n"}, "cp": {"link": "https://kb.lumerical.com/en/ref_scripts_cp.html", "text": "Copies a file. The copy can be created in a specified path.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.cp(\"file1\",\"file2\")                | Makes a copy of file1 called file2.  |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.cp(\"path1\\\\file1\",\"path2\\\\file2\")  | Copies file1 in path1 to file2 in    |\r\n|                                      | path2.                               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmv(), pwd()\r\n"}, "createbeam": {"link": "https://kb.lumerical.com/en/ref_scripts_createbeam.html", "text": "Creates a new Gaussian beam that is accessible from the deck/global\r\nworkspace. The Gaussian beam has the properties specified in the Overlap\r\nanalysis -> Beam tab of the eigensolver analysis window.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.createbeam()                       | Creates a Gaussian beam in the       |\r\n|                                      | deck/global workspace.               |\r\n|                                      |                                      |\r\n|                                      | Returns the name of the Gaussian     |\r\n|                                      | beam created, which is by default    |\r\n|                                      | \"gaussian#\" (# being the total       |\r\n|                                      | number of Gaussian beams already     |\r\n|                                      | existing in the current deck + 1).   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.createbeam()                 | Creates a Gaussian beam in the       |\r\n|                                      | deck/global workspace and saves its  |\r\n|                                      | name in the variable \"out\".          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "createcompound": {"link": "https://kb.lumerical.com/en/ref_scripts_createcompound.html", "text": "The script command creates a compound element with the currently\r\nselected elements.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.createcompound()                   | Creates a compound element with the  |\r\n|                                      | currently selected elements.         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nautoarrange(), addproperty(), setexpression()\r\n"}, "createsphericalsurface": {"link": "https://kb.lumerical.com/en/ref_scripts_createsphericalsurface.html", "text": "Creates a triangulated spherical surface or a segmented circular arc. It\r\ncan be used to define the far-field points for a far field projection as\r\nthese are often specified using a spherical surface (3D simulations) or\r\na circular arc (2D simulations).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Creates an unstructured data set     |\r\n| o.createsphericalsurface([theta1,the | with a triangulated surface or a     |\r\n| ta2],[phi1,phi2],                    | segmented arc. Their dimensions are  |\r\n| [X,Y,Z],radius,lmax)                 | specified by the input angles,       |\r\n|                                      | orientation axis and radius. The     |\r\n|                                      | coarseness of the triangulation (or  |\r\n|                                      | line segmentation) is specified as   |\r\n|                                      | the maximum separation between       |\r\n|                                      | adjacent points. The output data set |\r\n|                                      | contains the IDs of each element     |\r\n|                                      | (triangles or lines) and the         |\r\n|                                      | corresponding areas (only for        |\r\n|                                      | triangles).                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| theta1         | optional       | 0              | number         | Starting value |\r\n|                |                |                |                | of the         |\r\n|                |                |                |                | elevation      |\r\n|                |                |                |                | angle (theta)  |\r\n|                |                |                |                | range in       |\r\n|                |                |                |                | radians with   |\r\n|                |                |                |                | respect to the |\r\n|                |                |                |                | reference      |\r\n|                |                |                |                | axis.          |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| theta2         | optional       | pi             | number         | End value of   |\r\n|                |                |                |                | the elevation  |\r\n|                |                |                |                | angle (theta)  |\r\n|                |                |                |                | range in       |\r\n|                |                |                |                | radians with   |\r\n|                |                |                |                | respect to the |\r\n|                |                |                |                | reference      |\r\n|                |                |                |                | axis.          |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| phi1           | optional       | 0              | number         | Starting value |\r\n|                |                |                |                | of the         |\r\n|                |                |                |                | azimuthal      |\r\n|                |                |                |                | angle (phi)    |\r\n|                |                |                |                | range in       |\r\n|                |                |                |                | radians with   |\r\n|                |                |                |                | respect to the |\r\n|                |                |                |                | reference      |\r\n|                |                |                |                | axis.          |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| phi2           | optional       | 2\\*pi          | number         | End value of   |\r\n|                |                |                |                | the azimuthal  |\r\n|                |                |                |                | angle (phi)    |\r\n|                |                |                |                | range in       |\r\n|                |                |                |                | radians with   |\r\n|                |                |                |                | respect to the |\r\n|                |                |                |                | reference      |\r\n|                |                |                |                | axis.          |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| [X,Y,Z]        | optional       | [0,0,1]        | vector         | Orientation    |\r\n|                |                |                |                | axis: [1,0,0]  |\r\n|                |                |                |                | for X-axis,    |\r\n|                |                |                |                |  [0,1,0] for   |\r\n|                |                |                |                | Y-axis and     |\r\n|                |                |                |                |  [0,0,1] for   |\r\n|                |                |                |                | Z-axis.        |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| radius         | optional       | 1              | number         | Radius of the  |\r\n|                |                |                |                | sphere or arc  |\r\n|                |                |                |                | to be created  |\r\n|                |                |                |                | in meters.     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| lmax           | optional       | 0.2            | number         | Maximum        |\r\n|                |                |                |                | separation     |\r\n|                |                |                |                | between two    |\r\n|                |                |                |                | adjacent data  |\r\n|                |                |                |                | points on far  |\r\n|                |                |                |                | field location |\r\n|                |                |                |                | in meters.     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nnear2far()\r\n"}, "cross": {"link": "https://kb.lumerical.com/en/ref_scripts_cross.html", "text": "Calculates the vector cross product of two matrices, which must have the\r\nsame size. The cross product will be computed on the first dimension\r\nthat has a size of 3. There must be at least one dimension with a size\r\nof 3.\r\n\r\nAssume that A,B are 2D matrices, where the second dimension contains the\r\nvector components. The size of the second dimension must be 3. Then the\r\nelements of C will be calculated with the standard cross product\r\nformulas.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| C = o.cross(A, B)                    | Returns the cross product of A and B |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndot(), length(), size()\r\n"}, "ctranspose": {"link": "https://kb.lumerical.com/en/ref_scripts_ctranspose.html", "text": "Transposes a 1D or 2D matrix and takes the complex conjugate of each\r\nelement. The resulting matrix is the conjugate transpose or Hermitian\r\ntranspose.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| y = o.ctranspose(x)                  | If x is an N x M matrix, then y will |\r\n|                                      | be M x N, where the entries are      |\r\n|                                      | y(j,i)=x(i,j)\\*.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ntranspose()\r\n"}, "currentfilename": {"link": "https://kb.lumerical.com/en/ref_scripts_current_filename.html", "text": "Returns the current project filename and directory.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.currentfilename()            | Returns the current filename as a    |\r\n|                                      | string.                              |\r\n|                                      |                                      |\r\n|                                      | If the current filename is not       |\r\n|                                      | defined, this function returns an    |\r\n|                                      | empty string \"\".                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfileexists(), getpath(), which(), pwd(), fileextension(),\r\nfilebasename(), filedirectory(), currentscriptname()\r\n"}, "currentscriptname": {"link": "https://kb.lumerical.com/en/ref_scripts_currentscriptname.html", "text": "Returns the current script filename and directory.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.currentscriptname()          | Returns the current script filename  |\r\n|                                      | as a string.                         |\r\n|                                      |                                      |\r\n|                                      | If entered in the script prompt,     |\r\n|                                      | this function returns the string     |\r\n|                                      | \"prompt\".                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfileexists(), getpath(), which(), pwd(), fileextension(),\r\nfilebasename(), filedirectory(), currentfilename()\r\n"}, "customlibrary": {"link": "https://kb.lumerical.com/en/ref_scripts_customlibrary.html", "text": "Returns the location (path) of the Custom library.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.customlibrary()              | Returns the directory of the custom  |\r\n|                                      | library.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlibrary(), addtolibrary()\r\n"}, "cwnorm": {"link": "https://kb.lumerical.com/en/ref_scripts_cwnorm.html", "text": "Uses CW normalization. All simulation data will be normalized to the\r\ninjected source power. Most users prefer to do their analysis in the CW\r\nnormalization state, since it removes any effect caused by the finite\r\npulse length of the source. It also converts the units of all\r\nelectromagnetic fields to be the same as in the time domain. Note, this\r\ncommand works in both the Layout and Analysis mode.\r\n\r\nThis function controls the checkbox located in Settings - Normalization\r\nstate.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.cwnorm()                           | Use CW normalization.                |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnonorm()\r\n"}, "czt": {"link": "https://kb.lumerical.com/en/ref_scripts_czt.html", "text": "Returns the chirped z-transform of a set of data. The czt function is\r\noften more convenient than the standard fft functions because you can\r\nspecify an arbitrary range of k.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.czt(Ex,t,w)                  | Returns the chirped z-transform of   |\r\n|                                      | Ex, function of t, at each desired   |\r\n|                                      | angular frequency w. Note that w     |\r\n|                                      | must be a linearly spaced set of     |\r\n|                                      | angular frequencies but can cover    |\r\n|                                      | any range. It is also possible for   |\r\n|                                      | inverse transform, ie                |\r\n|                                      | out=czt(Ex,w,t), see the             |\r\n|                                      | interpolation example below for      |\r\n|                                      | details. E can be a matrix where one |\r\n|                                      | of the two dimensions is the same as |\r\n|                                      | length. The Z-transform is computed  |\r\n|                                      | along the dimension that matches     |\r\n|                                      | length, and the output vector will   |\r\n|                                      | be a matrix where the matched        |\r\n|                                      | dimension is length(kx) and the      |\r\n|                                      | other dimension is the same as E.    |\r\n|                                      | This functionality allows to compute |\r\n|                                      | multiple 1D Z-transforms with a      |\r\n|                                      | single function call.                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.czt(Ex,x,y,kx,ky)                  | The two dimensional chirped          |\r\n|                                      | z-transform. kx and ky must be       |\r\n|                                      | linearly spaced sets of wavenumbers  |\r\n|                                      | but can cover any range.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfft(), fftw()\r\n"}, "dcht": {"link": "https://kb.lumerical.com/en/ref_scripts_dcht.html", "text": "Returns the Chebyshev interpolation coefficients. The amplitude of the\r\ncoefficients decreases exponentially and the last coefficient offers an\r\nestimate of the relative accuracy of the interpolation.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| coeff=o.dcht(f,option)               | Returns the Chebyshev interpolation  |\r\n|                                      | coefficients of a sampled function   |\r\n|                                      | f. The function f must be sampled on |\r\n|                                      | a Chebyshev roots grid.              |\r\n|                                      |                                      |\r\n|                                      | Option:                              |\r\n|                                      |                                      |\r\n|                                      | If option=1 is selected, the vector  |\r\n|                                      | x will not include the endpoints     |\r\n|                                      |                                      |\r\n|                                      | If option=2 is selected, the vector  |\r\n|                                      | x will include the endpoints         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nchpts(), chebin(), icht(), chebpol(), chebpol1()\r\n"}, "debug": {"link": "https://kb.lumerical.com/en/ref_scripts_debug.html", "text": "Opens the debug utility window. This command is useful for debugging\r\npurposes. When this command is used, script will run to the line before\r\nthe debug command. Then user can start to call other commands to test\r\ncommands that have been run. Once the utility window is closed, the\r\nscript lines will continue to run. Multiple debug commands are allowed.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.debug()                            | Opens the debug utility window. This |\r\n|                                      | command can also be used in the      |\r\n|                                      | analysis script.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "del": {"link": "https://kb.lumerical.com/en/ref_scripts_del.html", "text": "Deletes a file. A path can be specified.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.del(\"filename\") rm(\"filename\")     | Deletes the file \"filename\".         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndelete(), rm()\r\n"}, "delete": {"link": "https://kb.lumerical.com/en/ref_scripts_delete.html", "text": "Deletes selected objects.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.delete()                           | Deletes selected objects.            |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngroupscope()\r\n"}, "deleteall": {"link": "https://kb.lumerical.com/en/ref_scripts_deleteall.html", "text": "Deletes all objects in the current group scope.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.deleteall()                        | Deletes all objects in the current   |\r\n|                                      | group scope.                         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngroupscope()\r\n"}, "deletematerial": {"link": "https://kb.lumerical.com/en/ref_scripts_deletematerial.html", "text": "Deletes a material from the material database.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.deletematerial(\"materialname\")     | Deletes a material named             |\r\n|                                      | \"materialname\" from the material     |\r\n|                                      | database.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddmaterial(), setmaterial(), getmaterial(), copymaterial()\r\n"}, "deletesweep": {"link": "https://kb.lumerical.com/en/ref_scripts_deletesweep.html", "text": "Deletes a specified parameter sweep, optimization, or Monte Carlo\r\nanalysis task.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.deletesweep(\"name\")                | Deletes the sweep, optimization, or  |\r\n|                                      | Monte Carlo analysis task with the   |\r\n|                                      | specified name.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddsweep(), copysweep(), pastesweep(), insertsweep(), getsweep(),\r\nsetsweep()\r\n"}, "designmode": {"link": "https://kb.lumerical.com/en/ref_scripts_designmode.html", "text": "In INTERCONNECT, this script command can be used to determine whether\r\nthe simulation file is currently in DESIGN mode or in ANALYSIS mode.  It\r\nis important to use this command to check the status of the project file\r\nonce it is opened to avoid running into an error during the subsequent\r\noperations if the file is not in the desired mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.designmode()                 | Returns 1 if in DESIGN mode, and 0   |\r\n|                                      | if in ANALYSIS mode.                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nswitchtolayout(), layoutmode(), switchtodesign()\r\n"}, "dipolepower": {"link": "https://kb.lumerical.com/en/ref_scripts_dipolepower.html", "text": "Returns the power injected into the simulation region by a dipole\r\nsource. In 3D simulations, the units will be in Watts if cwnorm is used,\r\nand Watts/Hertz2 if nonorm is used.\r\n\r\nThe dipolepower script command returns the power that was injected into\r\nthe simulation region, and is equivalent to measuring the power\r\ntransmitted out of a small box surrounding the dipole. In contrast,\r\nsourcepower will return the power that the dipole would radiate in a\r\nhomogeneous material. dipolepower and sourcepower are equivalent for\r\ndipoles in a homogeneous medium.\r\n\r\nAdvanced notes:\r\n\r\n\u2022If the dipole is located within a dispersive medium (with a non-zero\r\nimaginary part of the refractive index), then the results of this\r\nfunction are not reliable. In such situations, using a box of monitors\r\naround the dipole is recommended.\r\n\r\n\u2022Numerical errors in this calculation may become noticeable when very\r\nsmall simulation mesh sizes are used. If the mesh step is the order of,\r\nor smaller than, \u03bb/1000, verifying the dipolepower results by measuring\r\nthe radiated power with a small box of monitors surrounding the dipole\r\nis recommended.\r\n\r\nPlease visit the Support Center for more assistance if you are using a\r\ndipole in a dispersive medium.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.dipolepower(f)               | Returns the amount of power radiated |\r\n|                                      | by the dipole source, at frequency   |\r\n|                                      | points f. (f in Hz)                  |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.dipolepower(f, name)         | This option allows you to obtain the |\r\n|                                      | power radiated by a single dipole,   |\r\n|                                      | rather than the sum of all dipoles.  |\r\n|                                      | This option is only needed for       |\r\n|                                      | simulations with multiple dipoles.   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcenorm(), sourcepower(), sourcepower\\_avg(), sourcepower\\_pavg(),\r\ntransmission(), cwnorm(), nonorm()\r\n"}, "dir": {"link": "https://kb.lumerical.com/en/ref_scripts_dir.html", "text": "Lists files in a directory. Files other than Lumerical project files are\r\nalso listed.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.dir; out = ls()              | The output is a string.              |\r\n|                                      |                                      |\r\n|                                      | Use ?dir; to write the value to the  |\r\n|                                      | screen.                              |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.dir(\"o.directory\") out =     | Lists the files in the specified     |\r\n| ls(\"o.directory\")                    | directory. For example,              |\r\n|                                      | ?ls(\"C:\\\\Downloads\");                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nload(), splitstring()\r\n"}, "disconnect": {"link": "https://kb.lumerical.com/en/ref_scripts_disconnect.html", "text": "Disconnects one element to another via the specified ports.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.disconnect(\"element1\", \"port1\",    | Deletes the connection between       |\r\n| \"element2\", \"port2\")                 | \"port1\" of \"element1\" and \"port2\" of |\r\n|                                      | \"element2\".                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nconnect()\r\n"}, "dot": {"link": "https://kb.lumerical.com/en/ref_scripts_dot.html", "text": "Calculates the dot product of two matrices, which must have the same\r\nnumber of elements. The dot product of matrices A and B will be computed\r\nwith the following formula:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| C = o.dot(A, B)                      | Returns the dot product of A and B   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncross(), length(), size()\r\n"}, "eig": {"link": "https://kb.lumerical.com/en/ref_scripts_eig.html", "text": "Finds the eigenvalue and/or eigenvector of a matrix. The matrix has to\r\nbe square.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.eig(A) out = o.eig(A, 1)     | Returns the eigenvalues of matrix A. |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.eig(A, 2)                    | Returns the eigenvectors of matrix   |\r\n|                                      | A.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.eig(A, 3)                    | Returns both the eigenvalues and     |\r\n|                                      | eigenvectors of matrix A.            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nand(), or(), mult(), permute(), reshape(), inv()\r\n"}, "emepropagate": {"link": "https://kb.lumerical.com/en/ref_scripts_emepropagate.html", "text": "Propagates fields for EME profile monitor and calculates s-matrix and\r\nuser s-matrix results, as well as any error diagnostic results when in\r\nAnalysis mode using EME solver. This is equivalent to clicking the \"eme\r\npropagate\" button.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.emepropagate()                     | Propagate fields and s-matrix        |\r\n|                                      | results. This is equivalent to the   |\r\n|                                      | \"eme propagate\" button in the        |\r\n|                                      | graphical user interface.            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nemesweep(), getemesweep()\r\n"}, "emesweep": {"link": "https://kb.lumerical.com/en/ref_scripts_emesweep.html", "text": "When in Analysis mode using EME solver, runs either propagation sweep\r\ntool which sweeps the length of a cell group span or mode convergence\r\nsweep tool which sweeps the number of modes. .\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.emesweep; o.emesweep(\"propagation  | Run propagation sweep.               |\r\n| sweep\")                              |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n| o.emesweep(\"mode convergence sweep\") | Run mode convergence sweep.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetemeanalysis(), getemesweep()\r\n"}, "encryptscript": {"link": "https://kb.lumerical.com/en/ref_scripts_encryptscript.html", "text": "Save a copy of the specified script file in an encrypted format. The new\r\nfile will have a .lsfx file extension. Encrypting a script allows a\r\nscript to be shared with others, without allowing them to see the\r\ncontents of the script.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.encryptscript(\"filename.lsf\")      | Encrypt a copy of the script. The    |\r\n|                                      | new file will be named               |\r\n|                                      | \"filename.lsfx\".                     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.encryptscript(\"filename.lsf\",      | Specify an alternate file name.      |\r\n| \"new\\_filename\")                     |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n \r\n~\r\n\r\nSee Also\r\n\r\n\r\n"}, "endl": {"link": "https://kb.lumerical.com/en/ref_scripts_endl.html", "text": "Adds an end of line character to a string\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = \"line1\"+o.endl+\"line2\"()       | Add an end of line character to the  |\r\n|                                      | string.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnum2str(), write()\r\n"}, "erf": {"link": "https://kb.lumerical.com/en/ref_scripts_erf.html", "text": "Calculates the error function as defined by the following equation:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.erf(z)                         | Returns error function of z where z  |\r\n|                                      | is a scalar number or matrix of      |\r\n|                                      | scalar numbers.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nerfc(), erfinv(), erfcinv()\r\n"}, "erfc": {"link": "https://kb.lumerical.com/en/ref_scripts_erfc.html", "text": "Calculates the complementary error function as defined by the following\r\nequation:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.erfc(z)                        | Returns the complementary error      |\r\n|                                      | function of z where z is a scalar    |\r\n|                                      | number or matrix of scalar numbers.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nerf(), erfinv(), erfcinv()\r\n"}, "erfcinv": {"link": "https://kb.lumerical.com/en/ref_scripts_erfcinv.html", "text": "Calculates the inverse complementary error function as defined by the\r\nfollowing equation in relationship to the inverse error function erfinv:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.erfcinv(z)                     | Returns the inverse complementary    |\r\n|                                      | error function of z where z is a     |\r\n|                                      | scalar number or matrix of scalar    |\r\n|                                      | numbers.                             |\r\n|                                      |                                      |\r\n|                                      | For inputs outside the interval (0,  |\r\n|                                      | 2), erfcinv returns NaN.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nerf(), erfc(), erfinv()\r\n"}, "erfinv": {"link": "https://kb.lumerical.com/en/ref_scripts_erfinv.html", "text": "Calculates the inverse error function as defined by the following\r\nequation:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.erfinv(z)                      | Returns the inverse error function   |\r\n|                                      | of z where z is a scalar number or   |\r\n|                                      | matrix of scalar numbers.            |\r\n|                                      |                                      |\r\n|                                      | For inputs outside the interval (-1, |\r\n|                                      | 1), erfinv returns NaN.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nerf(), erfc(), erfcinv()\r\n"}, "eval": {"link": "https://kb.lumerical.com/en/ref_scripts_eval.html", "text": "Executes a string containing Lumerical's scripting language.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.eval(string)                       | Executes the Lumerical script        |\r\n|                                      | commands in string.                  |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfeval(), str2num(), num2str(), lower(), upper(), toscript()\r\n"}, "evalremote": {"link": "https://kb.lumerical.com/en/ref_scripts_evalremote.html", "text": "An interoperability command that will send a script commnad(s) to the\r\nserver product and executes it there\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.evalremote(s,\"y=x^2;\")             | Sends command y=x^2; to the server   |\r\n|                                      | via an open session s and executes   |\r\n|                                      | it                                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nopensession(), closesession(), putremotedata(), getremotedata()\r\n"}, "exist": {"link": "https://kb.lumerical.com/en/ref_scripts_exist.html", "text": "Returns a number based on type of the string used in the command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exist(\"x\")                         | Returns                              |\r\n|                                      |                                      |\r\n|                                      | 0 if there is no variable, operator, |\r\n|                                      | built-in function or script file     |\r\n|                                      | (x.lsf) in the current script path   |\r\n|                                      |                                      |\r\n|                                      | 1 if x is a variable, example: x=5;  |\r\n|                                      | ?exist(\u201cx\u201d);                         |\r\n|                                      |                                      |\r\n|                                      | 2 if x is an operator or built in    |\r\n|                                      | keyword, example: ?exist(\u201c\\*\u201d) or    |\r\n|                                      | ?exist(\u201cfor\u201d);                       |\r\n|                                      |                                      |\r\n|                                      | 3 if x is a script file in the       |\r\n|                                      | current script path, called \u201cx.lsf\u201d  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewproject(), fileexists()\r\n"}, "exit": {"link": "https://kb.lumerical.com/en/ref_scripts_exit.html", "text": "Exits the application.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exit()                             | Exits the application. Same as       |\r\n|                                      | exit(1);                             |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exit(option)                       | Exits the application. The option    |\r\n|                                      | can be                               |\r\n|                                      |                                      |\r\n|                                      | \u20221: Prompt user if a file needs      |\r\n|                                      | saving before exiting.               |\r\n|                                      |                                      |\r\n|                                      | \u20222: Force the application to exit    |\r\n|                                      | without prompting the user.          |\r\n|                                      |                                      |\r\n|                                      | The default option is 1.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewproject(), new()\r\n"}, "exp": {"link": "https://kb.lumerical.com/en/ref_scripts_exp.html", "text": "Calculates the natural exponential function. Input can be complex.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.exp(x)                       | The natural exponential of x.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlog()\r\n"}, "expand": {"link": "https://kb.lumerical.com/en/ref_scripts_expand.html", "text": "Returns the expansion coefficients between the fields recorded at two\r\narbitrary DFT monitors or saved in two d-cards. The coefficients are\r\ndefined according to:\r\n\r\nFor more detail on how to use this command, definitions on the\r\nparameters and how to interpret the results, please see Using Mode\r\nExpansion Monitors. Note that N is the power of the waveguide mode.\r\nconj(N) is equal to N if this is a real number. For the unconjugated\r\ncoefficients, see expand2.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.expand('monitor1','monitor\\_ref',x | outputs the expansion coefficients   |\r\n| ,y,z)                                | between the fields of two monitors   |\r\n|                                      | (or d-cards)                         |\r\n|                                      |                                      |\r\n|                                      | \u2022'monitor1': name of the monitor (or |\r\n|                                      | d-card) containing the fields E1 and |\r\n|                                      | H1 of which the expansion is         |\r\n|                                      | performed                            |\r\n|                                      |                                      |\r\n|                                      | \u2022'monitor\\_ref': name of the         |\r\n|                                      | reference monitor (or d-card)        |\r\n|                                      | containing E2 and H2                 |\r\n|                                      |                                      |\r\n|                                      | \u2022x,y,z: spatial displacement of the  |\r\n|                                      | fields from monitor1 with respect to |\r\n|                                      | those from monitor\\_ref              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetexpansion(), removeexpansion(), expand2()\r\n"}, "expand2": {"link": "https://kb.lumerical.com/en/ref_scripts_expand2.html", "text": "Returns the expansion coefficients in the unconjugated form between the\r\nfields recorded at two arbitrary DFT monitors or saved in two d-cards.\r\nThe coefficients in the unconjugated form are defined according to:\r\n\r\nFor more detail on how to use this command, definitions on the\r\nparameters and how to interpret the results, please see Using Mode\r\nExpansion Monitors.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.expand2('monitor1','monitor\\_ref', | outputs the expansion coefficients   |\r\n| x,y,z)                               | between the fields of two monitors   |\r\n|                                      | (or d-cards) in the unconjugated     |\r\n|                                      | form                                 |\r\n|                                      |                                      |\r\n|                                      | \u2022'monitor1': name of the monitor (or |\r\n|                                      | d-card) containing the fields E1 and |\r\n|                                      | H1 of which the expansion is         |\r\n|                                      | performed                            |\r\n|                                      |                                      |\r\n|                                      | \u2022'monitor\\_ref': name of the         |\r\n|                                      | reference monitor (or d-card)        |\r\n|                                      | containing E2 and H2                 |\r\n|                                      |                                      |\r\n|                                      | \u2022x,y,z: spatial displacement of the  |\r\n|                                      | fields from monitor1 with respect to |\r\n|                                      | those from monitor\\_ref              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetexpansion(), removeexpansion(), expand()\r\n"}, "exportcsvresults": {"link": "https://kb.lumerical.com/en/ref_scripts_exportcsvresults.html", "text": "This script command can export the results of a simulation to comma\r\nseparated value formatted files, which can be opened by Microsoft Excel.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exportcsvresults(\"filename\")       | exports the results of the entire    |\r\n|                                      | simulation to multiple .cvs files,   |\r\n|                                      | named filename\\_elementname.csv      |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exportcsvresults(\"filename\",       | exports the results of the specified |\r\n| \"elementname\")                       | element to a .cvs file, named        |\r\n|                                      | filename\\_elementname.csv            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| filename                | string                  | name of the .csv file   |\r\n+-------------------------+-------------------------+-------------------------+\r\n| elementname             | string                  | name of the element.    |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\n\r\n"}, "exportfigure": {"link": "https://kb.lumerical.com/en/ref_scripts_exportfigure.html", "text": "Exports the current figure to a JPG image. If the file extension is not\r\nspecified, \".jpg\" will be used. The image size will be the same as the\r\nfigure window size.\r\n\r\nIf a file is overwritten or if the export fails, a warning will be\r\ngenerated.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exportfigure(\"filename\")           | Exports the current figure to a JPG  |\r\n|                                      | image with the name \"filename\".      |\r\n|                                      |                                      |\r\n|                                      | The exported image will have the     |\r\n|                                      | same size as the current figure.     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exportfigure(\"filename\",xres,yres) | The exported image will have the     |\r\n|                                      | specified resolution, xres,yres, in  |\r\n|                                      | the x,y directions respectively.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nselectfigure(), image(), plot(), setplot(), closeall(), visualize()\r\n"}, "exporthtml": {"link": "https://kb.lumerical.com/en/ref_scripts_exporthtml.html", "text": "Generates an html file describing an element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exporthtml (element\\_name)         | Generates an html file describing an |\r\n|                                      | element. The file lists the element  |\r\n|                                      | type, symbol, and the list of        |\r\n|                                      | properties.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewproject()\r\n"}, "exportimage": {"link": "https://kb.lumerical.com/en/ref_scripts_exportimage.html", "text": "Exports an image of the current circuit schematic.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exportimage(filename)              | Exports an image of the current      |\r\n|                                      | circuit schematic. If the file has   |\r\n|                                      | \u2018png\u2019 or no extension, a PNG         |\r\n|                                      | (Portable Network Graphics) will be  |\r\n|                                      | created. If the file has \u2018svg\u2019       |\r\n|                                      | extension, a SVG (Scalable Vector    |\r\n|                                      | Graphics) file will be created.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "exportlib": {"link": "https://kb.lumerical.com/en/ref_scripts_exportlib.html", "text": "Exports the .lib file for a CML in the Custom folder.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exportlib(name, path, overwrite)   | Exports the .lib file for a CML in   |\r\n|                                      | the Custom folder.                   |\r\n|                                      |                                      |\r\n|                                      | name, the CML name in Custom         |\r\n|                                      |                                      |\r\n|                                      | path, where to save the exported     |\r\n|                                      | .lib file. Use the current working   |\r\n|                                      | directory if path is not provided.   |\r\n|                                      |                                      |\r\n|                                      | overwrite, boolean value to indicate |\r\n|                                      | whether or not to overwrite the file |\r\n|                                      | if it exists.                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npackagedesignkit(), installdesignkit(), importschematic(),\r\nexportschematic(), customlibrary()\r\n"}, "exportnetlist": {"link": "https://kb.lumerical.com/en/ref_scripts_exportnetlist.html", "text": "Export a netlist for the current circuit.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exportnetlist; o.exportnetlist     | Export a netlist for the current     |\r\n| (filename) o.exportnetlist           | circuit. \u2018filename\u2019 is the output    |\r\n| (element,filename,overwrite=true)    | netlist name, \u2018element\u2019 is the       |\r\n|                                      | compound element to be exported. If  |\r\n|                                      | \u2018overwrite\u2019 is true, any existing    |\r\n|                                      | netlist file with the same name as   |\r\n|                                      | \u2018filename\u2019 will be overwritten. If   |\r\n|                                      | \u2018element\u2019 is not provided, the       |\r\n|                                      | currently selected compound element  |\r\n|                                      | will be exported, otherwise the root |\r\n|                                      | element will be exported.            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n \r\n=\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\nimportnetlist()\r\n"}, "exportschematic": {"link": "https://kb.lumerical.com/en/ref_scripts_exportschematic.html", "text": "Exports the schematic contents of a design kit element to a .osch file.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exportschematic (name, filename)   | Export the schematic contents of a   |\r\n|                                      | design kit element to a .osch file.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nimportschematic(), customlibrary(), exportlib()\r\n"}, "exportsweep": {"link": "https://kb.lumerical.com/en/ref_scripts_exportsweep.html", "text": "Exports S-parameter results from an S-parameter sweep task to a .dat\r\nfile which can be loaded by the Optical N-Port S-parameter element in\r\nINTERCONNECT.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.exportsweep(\"sweep\\_name\",\"filenam | Exports S-parameter results from the |\r\n| e\")                                  | specified S-parameter sweep task to  |\r\n|                                      | a .dat file with specified file name |\r\n|                                      | in the current working directory.    |\r\n|                                      |                                      |\r\n|                                      | If the maximum passivity over the    |\r\n|                                      | frequency range is larger than 1.03  |\r\n|                                      | or the maximum reciprocity error     |\r\n|                                      | over the frequency range exceeds     |\r\n|                                      | 0.03, a warning message will appear  |\r\n|                                      | in the script prompt when you export |\r\n|                                      | the data.                            |\r\n|                                      |                                      |\r\n|                                      | If a file of the same name already   |\r\n|                                      | exists, the existing file will be    |\r\n|                                      | overwritten.                         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddsweep(), runsweep(), getsweepresult()\r\n"}, "extractstructure": {"link": "https://kb.lumerical.com/en/ref_scripts_extractstructure.html", "text": "Creates an a polygon (in 2D) or a planar solid (in 3D) using the\r\nfinite-element geometric data stored in an unstructured dataset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.extractstructure(D)                | Creates a polygon for 2D data and a  |\r\n|                                      | planar solid for 3D data. The        |\r\n|                                      | parameter D is the input             |\r\n|                                      | unstructured dataset.                |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.extractstructure(D,                | Same as the above command, but the   |\r\n| Rel\\_Coplanar\\_Tol)                  | relative tolerance to merge coplanar |\r\n|                                      | elements will be set to the value    |\r\n|                                      | specified.                           |\r\n+--------------------------------------+--------------------------------------+\r\n| o.extractstructure(D,                | Same as the above command, but uses  |\r\n| Rel\\_Coplanar\\_Tol,                  | Laplacian smoothing on the surface   |\r\n| Smoothing\\_Pass\\_Count)              | mesh. The number of iteration is     |\r\n|                                      | defined by the value specified.      |\r\n+--------------------------------------+--------------------------------------+\r\n| o.extractstructure(D,                | Same as the above command, but the   |\r\n| Rel\\_Coplanar\\_Tol,                  | allowed angular difference between   |\r\n| Smoothing\\_Pass\\_Count,              | triangles around a vertex where the  |\r\n| Smoothing\\_Angle\\_Coplanar\\_Tol)     | vertex can be moved is set to the    |\r\n|                                      | value specified.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.extractstructure(D,                | Same as the above command, but       |\r\n| Rel\\_Coplanar\\_Tol,                  | allows re-triangulation of the       |\r\n| Smoothing\\_Pass\\_Count,              | facets.                              |\r\n| Smoothing\\_Angle\\_Coplanar\\_Tol,     |                                      |\r\n| Allow\\_Tessalation)                  |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameters              | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| D                       | unstructured dataset    | Input data that is used |\r\n|                         |                         | to create the           |\r\n|                         |                         | structure.              |\r\n+-------------------------+-------------------------+-------------------------+\r\n| Rel\\_Coplanar\\_Tol      | number                  | (optional) Relative     |\r\n|                         |                         | tolerance to merge      |\r\n|                         |                         | coplanar elements. The  |\r\n|                         |                         | default value is 1e-6.  |\r\n+-------------------------+-------------------------+-------------------------+\r\n| Smoothing\\_Pass\\_Count  | number                  | (optional) In 3D only.  |\r\n|                         |                         | Enables Laplacian       |\r\n|                         |                         | smoothing on the        |\r\n|                         |                         | surface mesh before     |\r\n|                         |                         | surface extraction. The |\r\n|                         |                         | default value is 0 and  |\r\n|                         |                         | the maximum allowed     |\r\n|                         |                         | value is 20.            |\r\n+-------------------------+-------------------------+-------------------------+\r\n| Smoothing\\_Angle\\_Copla | number                  | (optional) Sets the     |\r\n| nar\\_Tol                |                         | allowed angular         |\r\n|                         |                         | difference between      |\r\n|                         |                         | triangles around a      |\r\n|                         |                         | vertex where the vertex |\r\n|                         |                         | can be moved. The       |\r\n|                         |                         | default value is 0.001. |\r\n+-------------------------+-------------------------+-------------------------+\r\n| Allow\\_Tessalation      | number                  | (optional) In 3D only.  |\r\n|                         |                         | Allows re-triangulation |\r\n|                         |                         | of the facets.          |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "eye": {"link": "https://kb.lumerical.com/en/ref_scripts_eye.html", "text": "Creates a 2D identity matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| I = o.eye()                          | Returns a 1x1 matrix, value 1.0.     |\r\n+--------------------------------------+--------------------------------------+\r\n| I = o.eye(n)                         | Returns nxn identity matrix.         |\r\n+--------------------------------------+--------------------------------------+\r\n| I = o.eye(n,m)                       | Returns nxm matrix with ones on main |\r\n|                                      | diagonal                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatrixdataset(), rectilineardataset(), matlab(), matrix()\r\n"}, "farfield2d": {"link": "https://kb.lumerical.com/en/ref_scripts_farfield2d.html", "text": "Projects a given power or field profile monitor to the far field to a 1\r\nmeter radius semi-circle. The electric field intensity \\|E\\|2 is\r\nreturned.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| E2 = o.farfield2d(\"mname\", f, n,     | Projects a given power or field      |\r\n| illumination, periods, index,        | profile monitor to the far field at  |\r\n| direction)                           | the specified frequency points.      |\r\n|                                      |                                      |\r\n|                                      | The result is an NxM matrix where    |\r\n|                                      | the first dimension is the           |\r\n|                                      | resolution of the far field          |\r\n|                                      | projection, and the second dimension |\r\n|                                      | is the number of frequency points    |\r\n|                                      | projected.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| mname          | required       |                | string         | Name of the    |\r\n|                |                |                |                | monitor        |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | optional       | 1              | vector         | Index of the   |\r\n|                |                |                |                | desired        |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point. f can   |\r\n|                |                |                |                | be a single    |\r\n|                |                |                |                | value, or a    |\r\n|                |                |                |                | vector of      |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | points.        |\r\n|                |                |                |                | Multithreaded  |\r\n|                |                |                |                | projection was |\r\n|                |                |                |                | introduced     |\r\n|                |                |                |                | since R2016b.  |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| n              | optional       | 2000           | number         | The number of  |\r\n|                |                |                |                | points in the  |\r\n|                |                |                |                | far field.     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| illumination   | optional       | 1              | number         | For periodic   |\r\n|                |                |                |                | structures     |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Gaussian       |\r\n|                |                |                |                | illumination:  |\r\n|                |                |                |                | 1              |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Plane wave     |\r\n|                |                |                |                | illumination:  |\r\n|                |                |                |                | 2              |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| periods        | optional       | 1              | number         | number of      |\r\n|                |                |                |                | periods to be  |\r\n|                |                |                |                | used           |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | value at       | number         | The index of   |\r\n|                |                | monitor center |                | the material   |\r\n|                |                |                |                | to use for the |\r\n|                |                |                |                | projection.    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| direction      | optional       | direction of   | number         | Direction:     |\r\n|                |                | max power flow |                | this can be +1 |\r\n|                |                |                |                | or -1.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nfarfield3d(), farfieldangle(), farfieldvector2d(), farfieldpolar2d(),\r\nfarfieldexact2d(), farfieldfilter(), farfieldexact(),\r\nfarfield2dintegrate()\r\n"}, "farfield2dintegrate": {"link": "https://kb.lumerical.com/en/ref_scripts_farfield2dintegrate.html", "text": "Calculates the integral of the far field projection over some range of\r\ntheta in 2D simulation. Angles are specified in degrees, but the\r\nintegral is done in radians.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfield2dintegrate(E2,      | Integrate 2D far field projection    |\r\n| theta, halfangle, theta0)            | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| E2             | required       |                | matrix         | E field data   |\r\n|                |                |                |                | from           |\r\n|                |                |                |                | farfield2d     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| theta          | required       |                | matrix         | Theta from     |\r\n|                |                |                |                | farfieldangle  |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| halfangle      | optional       | 90             | vector         | Half angle (in |\r\n|                |                |                |                | degrees) of    |\r\n|                |                |                |                | the            |\r\n|                |                |                |                | integration    |\r\n|                |                |                |                | region. Must   |\r\n|                |                |                |                | have same      |\r\n|                |                |                |                | length as      |\r\n|                |                |                |                | theta0 or      |\r\n|                |                |                |                | length 1. Half |\r\n|                |                |                |                | angle should   |\r\n|                |                |                |                | be between 0   |\r\n|                |                |                |                | to 90 degrees. |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| theta0         | optional       | 0              | vector         | Center angle   |\r\n|                |                |                |                | (in degrees)   |\r\n|                |                |                |                | theta of the   |\r\n|                |                |                |                | integration    |\r\n|                |                |                |                | region. Must   |\r\n|                |                |                |                | have same      |\r\n|                |                |                |                | length as      |\r\n|                |                |                |                | halfangle or   |\r\n|                |                |                |                | length 1.      |\r\n|                |                |                |                | Theta0 should  |\r\n|                |                |                |                | be between -90 |\r\n|                |                |                |                | to 90 degrees. |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nfarfield2d(), farfieldangle()\r\n"}, "farfield3d": {"link": "https://kb.lumerical.com/en/ref_scripts_farfield3d.html", "text": "Projects a given power or field profile monitor to the far field in a 3D\r\nsimulation. The electric field intensity \\|E\\|2 is returned.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfield3d(\"mname\",f, na,    | Projects a given power or field      |\r\n| nb, illumination, periodsa,          | profile monitor to the far field.    |\r\n| periodsb, index, direction)          |                                      |\r\n|                                      | This returns an NxM matrix if 1      |\r\n|                                      | frequency point is projected, or a   |\r\n|                                      | NxMxP matrix if more than 1          |\r\n|                                      | frequency point is projected, where  |\r\n|                                      | N and M correspond to the resolution |\r\n|                                      | of the projection (na, and nb), and  |\r\n|                                      | P corresponds to the number of       |\r\n|                                      | frequency points projected.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| mname          | required       |                | string         | Name of the    |\r\n|                |                |                |                | monitor        |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | optional       | 1              | vector         | Index of the   |\r\n|                |                |                |                | desired        |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point. This    |\r\n|                |                |                |                | can be a       |\r\n|                |                |                |                | single number  |\r\n|                |                |                |                | or a vector.   |\r\n|                |                |                |                | Multithreaded  |\r\n|                |                |                |                | projection to  |\r\n|                |                |                |                | allow multiple |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | points to be   |\r\n|                |                |                |                | projected      |\r\n|                |                |                |                | simultaneously |\r\n|                |                |                |                | was introduced |\r\n|                |                |                |                | in R2016b.     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| na             | optional       | 150            | number         | The number of  |\r\n|                |                |                |                | points in the  |\r\n|                |                |                |                | far field.     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| nb             | optional       | 150            | number         | The number of  |\r\n|                |                |                |                | points in the  |\r\n|                |                |                |                | far field.     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| illumination   | optional       | 1              | number         | For periodic   |\r\n|                |                |                |                | structures.    |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Gaussian       |\r\n|                |                |                |                | illumination:  |\r\n|                |                |                |                | 1              |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Plane wave     |\r\n|                |                |                |                | illumination:  |\r\n|                |                |                |                | 2              |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| periodsa       | optional       | 1              | number         | number of      |\r\n|                |                |                |                | periods to be  |\r\n|                |                |                |                | used for       |\r\n|                |                |                |                | periodic       |\r\n|                |                |                |                | illumination   |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| periodsb       | optional       | 1              | number         | number of      |\r\n|                |                |                |                | periods to be  |\r\n|                |                |                |                | used for       |\r\n|                |                |                |                | periodic       |\r\n|                |                |                |                | illumination   |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | value at       | number         | The index of   |\r\n|                |                | monitor center |                | the material   |\r\n|                |                |                |                | to use for the |\r\n|                |                |                |                | projection.    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| direction      | optional       | direction of   | number         | Direction:     |\r\n|                |                | max power flow |                | this can be +1 |\r\n|                |                |                |                | or -1.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nThe following table summarizes how to interpret the ux, uy coordinate\r\nvectors and periods input properties for various monitor orientations.\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Monitor            | Monitor surface    | 'na', 'ux',        | 'nb', 'uy',        |\r\n| orientation        | normal             | 'periods a'        | 'periods b'        |\r\n|                    |                    | correspond to      | correspond to      |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| XY plane           | Z                  | x axis             | y axis             |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| XZ plane           | Y                  | x axis             | z axis             |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| YZ plane           | X                  | y axis             | z axis             |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\nfarfield2d(), farfieldvector3d(), farfieldpolar3d(), farfieldux(),\r\nfarfielduy(), farfieldexact3d(), farfieldfilter(), farfield3dintegrate()\r\n"}, "farfield3dintegrate": {"link": "https://kb.lumerical.com/en/ref_scripts_farfield3dintegrate.html", "text": "Integrates the far field projection over a cone centered at theta0 and\r\nphi0, with a width specified by halfangle for 3D simulations. The far\r\nfield electric field is a function of the direction cosines (ux,uy), but\r\nfarfield3dintegrate automatically does the change of variables.\r\nSimilarly, angles are specified in degrees, but converted to radians\r\nbefore the integral is calculated. See the farfield3d documentation for\r\ninformation on interpreting ux, uy, na, nb for various monitor\r\norientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfield3dintegrate(E2, ux,  | Integrate 3D far field projection    |\r\n| uy, halfangle, theta0, phi0)         | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| E2             | required       |                | matrix         | E field data   |\r\n|                |                |                |                | from           |\r\n|                |                |                |                | farfield3d     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| ux             | required       |                | vector         | ux data from   |\r\n|                |                |                |                | farfieldux.    |\r\n|                |                |                |                | Note that the  |\r\n|                |                |                |                | result should  |\r\n|                |                |                |                | be a vector,   |\r\n|                |                |                |                | so it is       |\r\n|                |                |                |                | sufficient to  |\r\n|                |                |                |                | perform the    |\r\n|                |                |                |                | farfieldux     |\r\n|                |                |                |                | script command |\r\n|                |                |                |                | for only 1     |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| uy             | required       |                | vector         | uy data from   |\r\n|                |                |                |                | farfielduy.    |\r\n|                |                |                |                | Note that the  |\r\n|                |                |                |                | result should  |\r\n|                |                |                |                | be a vector,   |\r\n|                |                |                |                | so it is       |\r\n|                |                |                |                | sufficient to  |\r\n|                |                |                |                | perform the    |\r\n|                |                |                |                | farfieldux     |\r\n|                |                |                |                | script command |\r\n|                |                |                |                | for only 1     |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| halfangle      | optional       | 90             | vector         | Half angle of  |\r\n|                |                |                |                | the            |\r\n|                |                |                |                | integration    |\r\n|                |                |                |                | cone. unit in  |\r\n|                |                |                |                | degrees. must  |\r\n|                |                |                |                | have length L  |\r\n|                |                |                |                | or 1. Half     |\r\n|                |                |                |                | angle should   |\r\n|                |                |                |                | be between 0   |\r\n|                |                |                |                | to 90 degrees. |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| theta0         | optional       | 0              | vector         | Center angle   |\r\n|                |                |                |                | theta of the   |\r\n|                |                |                |                | integration    |\r\n|                |                |                |                | cone. unit in  |\r\n|                |                |                |                | degrees. must  |\r\n|                |                |                |                | have length L  |\r\n|                |                |                |                | or 1. Theta0   |\r\n|                |                |                |                | should be      |\r\n|                |                |                |                | between 0 to   |\r\n|                |                |                |                | 90 degrees.    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| phi0           | optional       | 0              | vector         | Center angle   |\r\n|                |                |                |                | phi of the     |\r\n|                |                |                |                | integration    |\r\n|                |                |                |                | cone. unit in  |\r\n|                |                |                |                | degrees. must  |\r\n|                |                |                |                | have length L  |\r\n|                |                |                |                | or 1. Phi0     |\r\n|                |                |                |                | should be      |\r\n|                |                |                |                | between 0 to   |\r\n|                |                |                |                | 360 degrees.   |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nfarfield3d(), farfieldux(), farfielduy(), farfieldspherical()\r\n"}, "farfieldangle": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldangle.html", "text": "Returns the vector of angles, in degrees, corresponding to the data from\r\nfarfield2d for a 2D simulation.Used for 2D simulations. This is required\r\nbecause the farfield2d does not use a set of linearly spaced angles for\r\nthe projection. It is often useful to re-interpolate the data onto a set\r\nof linearly spaced angles using the interp or spline functions.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| theta = o.farfieldangle( \"mname\", f, | Returns the matrix of angles         |\r\n| n, index)                            | corresponding to the data in         |\r\n|                                      | farfield2d                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| mname          | required       |                | string         | Name of the    |\r\n|                |                |                |                | monitor from   |\r\n|                |                |                |                | which far      |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | optional       | 1              | vector         | Index of the   |\r\n|                |                |                |                | desired        |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point. This    |\r\n|                |                |                |                | can be a       |\r\n|                |                |                |                | single number  |\r\n|                |                |                |                | or a vector.   |\r\n|                |                |                |                | If f is a      |\r\n|                |                |                |                | vector, the    |\r\n|                |                |                |                | second         |\r\n|                |                |                |                | dimension of   |\r\n|                |                |                |                | theta will     |\r\n|                |                |                |                | match the      |\r\n|                |                |                |                | length of the  |\r\n|                |                |                |                | vector of      |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | points.        |\r\n|                |                |                |                | Multithreaded  |\r\n|                |                |                |                | projection was |\r\n|                |                |                |                | introduced     |\r\n|                |                |                |                | since R2016b.  |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| n              | optional       | 2000           | number         | The number of  |\r\n|                |                |                |                | points in the  |\r\n|                |                |                |                | far field.     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | value at       | number         | The index of   |\r\n|                |                | monitor center |                | the material   |\r\n|                |                |                |                | to use for the |\r\n|                |                |                |                | projection.    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nfarfield2d(), farfieldvector2d(), farfieldpolar2d(), interp(), spline()\r\n"}, "farfieldexact": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldexact.html", "text": "Projects complete complex vector fields to specific locations. It is\r\nexpected to be correct down to distances on the order of one wavelength.\r\nThe projections from multiple monitors can be added to create a total\r\nfar field projection  - see Projections from a monitor box.\r\n\r\nfarfieldexact projects any surface fields to a series of points defined\r\nby vector lists. The x,y, z coordinates of each evaluation point are\r\ntaken element-by-element from the vector lists. i.e., the i-th point in\r\na 2D simulation would be at [x(i),y(i)].\r\n\r\n3D\r\n\r\nVectors lists x,y,z must have the same length L or be length 1. The data\r\nis returned in a matrix of dimension Lx3. The first index represents\r\npositions defined by one element from each of x,y, z. [x(i),y(i),z(i)];\r\nthe second index represents Ex, Ey, and Ez.\r\n\r\n2D\r\n\r\nVector lists x, y must have the same length L or be length 1. The data\r\nis returned in the form of a matrix that is of dimension Lx3. The first\r\nindex represents positions defined by one element from each of x,y.\r\n[x(i),y(i)]; The second index represents Ex, Ey, and Ez.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfieldexact(\"mname\", x, y, | 2D far field exact projection        |\r\n| f, index)                            |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfieldexact(\"mname\", x, y, | 3D far field exact projection        |\r\n| z, f, index)                         |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      | Default        | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| mname          | required       |                | string         | name of the    |\r\n|                |                |                |                | monitor from   |\r\n|                |                |                |                | which far      |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| x              | required       |                | vector         | x coordinates  |\r\n|                |                |                |                | of points      |\r\n|                |                |                |                | where far      |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | calculated.    |\r\n|                |                |                |                | must have      |\r\n|                |                |                |                | length L or 1. |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| y              | required       |                | vector         | y coordinates  |\r\n|                |                |                |                | of points      |\r\n|                |                |                |                | where far      |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | calculated.    |\r\n|                |                |                |                | must have      |\r\n|                |                |                |                | length L or 1. |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| z              | required       |                | vector         | z coordinates  |\r\n|                |                |                |                | of points      |\r\n|                |                |                |                | where far      |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | calculated.    |\r\n|                |                |                |                | must have      |\r\n|                |                |                |                | length L or 1. |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | optional       | 1              | vector         | Index of the   |\r\n|                |                |                |                | desired        |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point. This    |\r\n|                |                |                |                | can be a       |\r\n|                |                |                |                | single number  |\r\n|                |                |                |                | or a vector.   |\r\n|                |                |                |                | Multithreaded  |\r\n|                |                |                |                | projection was |\r\n|                |                |                |                | introduced     |\r\n|                |                |                |                | since R2016b.  |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | value at       | number         | The index of   |\r\n|                |                | monitor center |                | the material   |\r\n|                |                |                |                | to use for the |\r\n|                |                |                |                | projection.    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nfarfield2d(), farfield3d(), farfieldexact2d(), farfieldexact3d()\r\n"}, "farfieldexact2d": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldexact2d.html", "text": "This function projects complete complex vector fields to specific\r\nlocations. It is expected to be correct down to distances on the order\r\nof one wavelength. The projections from multiple monitors can be added\r\nto create a total far field projection - see Projections from a monitor\r\nbox.\r\n\r\nfarfieldexact2d projects any surface to the grid points defined by the\r\nvectors x, y. The data is returned in the form of a matrix that is of\r\ndimension NxMxPx3 where N is the length of the x vector, M is the length\r\nof the y vector, P is the number of frequency points, and the final\r\nindex represents Ex, Ey, and Ez. Note that N and M can be 1; when they\r\nare both 1, the function is the same as farfieldexact.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfieldexact2d( \"mname\", x, | Projects a given power or field      |\r\n| y, f, index)                         | profile monitor to the far field at  |\r\n|                                      | grid points specified by the vectors |\r\n|                                      | x,y.                                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| mname          | required       |                | string         | name of the    |\r\n|                |                |                |                | monitor from   |\r\n|                |                |                |                | which far      |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| x              | required       |                | vector         | x coordinates  |\r\n|                |                |                |                | of the grid    |\r\n|                |                |                |                | points where   |\r\n|                |                |                |                | far field is   |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| y              | required       |                | vector         | y coordinates  |\r\n|                |                |                |                | of the grid    |\r\n|                |                |                |                | points where   |\r\n|                |                |                |                | far field is   |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | optional       | 1              | vector         | Index of the   |\r\n|                |                |                |                | desired        |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point. This    |\r\n|                |                |                |                | can be a       |\r\n|                |                |                |                | single number  |\r\n|                |                |                |                | or a vector.   |\r\n|                |                |                |                | Multithreaded  |\r\n|                |                |                |                | projection was |\r\n|                |                |                |                | introduced     |\r\n|                |                |                |                | since R2016b.  |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | index at       | number         | The index of   |\r\n|                |                | monitor center |                | the material   |\r\n|                |                |                |                | to use for the |\r\n|                |                |                |                | projection.    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nfarfield2d(), farfieldexact3d(), farfieldexact()\r\n"}, "farfieldexact3d": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldexact3d.html", "text": "The three dimension form of farfieldexact2d. This function projects\r\ncomplete complex vector fields to specific locations. It is expected to\r\nbe correct down to distances on the order of one wavelength. The\r\nprojections from multiple monitors can be added to create a total far\r\nfield projection - see Projections from a monitor box.\r\n\r\nfarfieldexact3d projects any surface to the grid points defined by the\r\nvectors x,y and z. The data is returned in a matrix of dimension NxMxKx3\r\nif one frequency point is projected, and NxMxKx3xP if more than one\r\nfrequency point is projected where N is the length of the vector x, M\r\nthe length of the vector y, K is the length of the vector z, P is the\r\nnumber of frequency points, and the fourth index represents Ex, Ey, and\r\nEz. Note that N, M and K can be 1, and when they are all 1, the function\r\nis the same as farfieldexact.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfieldexact3d( \"mname\", x, | Projects a given power or field      |\r\n| y, z, f, index)                      | profile monitor to the far field at  |\r\n|                                      | grid points specified by the vectors |\r\n|                                      | x,y,z.                               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| mname          | required       |                | string         | name of the    |\r\n|                |                |                |                | monitor from   |\r\n|                |                |                |                | which far      |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| x              | required       |                | vector         | x coordinates  |\r\n|                |                |                |                | of the grid    |\r\n|                |                |                |                | points where   |\r\n|                |                |                |                | far field is   |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| y              | required       |                | vector         | y coordinates  |\r\n|                |                |                |                | of the grid    |\r\n|                |                |                |                | points where   |\r\n|                |                |                |                | far field is   |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| z              | required       |                | vector         | z coordinates  |\r\n|                |                |                |                | of the grid    |\r\n|                |                |                |                | points where   |\r\n|                |                |                |                | far field is   |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | optional       | 1              | vector         | Index of the   |\r\n|                |                |                |                | desired        |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point. This    |\r\n|                |                |                |                | can be a       |\r\n|                |                |                |                | single number  |\r\n|                |                |                |                | or a vector.   |\r\n|                |                |                |                | Multithreaded  |\r\n|                |                |                |                | projection was |\r\n|                |                |                |                | introduced     |\r\n|                |                |                |                | since R2016b.  |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | value at       | number         | The index of   |\r\n|                |                | monitor center |                | the material   |\r\n|                |                |                |                | to use for the |\r\n|                |                |                |                | projection.    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nfarfield3d(), farfieldexact2d(), farfieldexact()\r\n"}, "farfieldfilter": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldfilter.html", "text": "Sets or gets the filter width for far field filter which is used to\r\nremove ripples in the far field projection due to clipping of the near\r\nfields. It should be used when the near fields at the edge of the\r\nmonitor are small but not precisely zero.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n|                                      | The bumpy blue line of the figure    |\r\n|                                      | shows the near field electric field  |\r\n|                                      | that will be used for a far field    |\r\n|                                      | projection. In this case, the field  |\r\n|                                      | does not go to zero at the edge of   |\r\n|                                      | the monitor, which will lead to      |\r\n|                                      | ripples in the far field projection. |\r\n|                                      | The green line shows the spatial     |\r\n|                                      | filter that will be applied to the   |\r\n|                                      | fields, ensuring they go to zero.    |\r\n|                                      | The filter parameter defines the     |\r\n|                                      | width of the filter by the following |\r\n|                                      | formula: \u03b1=(a)/(a+b).                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfieldfilter()             | Get the current far field filter     |\r\n|                                      | setting.                             |\r\n+--------------------------------------+--------------------------------------+\r\n| o.farfieldfilter(\u03b1)                  | Set the current far field filter     |\r\n|                                      | setting. \u03b1=(a)/(a+b). The far field  |\r\n|                                      | filter has a single input parameter, |\r\n|                                      | which is a number between 0 and 1.   |\r\n|                                      | By default, it is 0, which turns the |\r\n|                                      | filter off. This filter is applied   |\r\n|                                      | to all far field projections.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: Periodic structures                                                |\r\n|                                                                          |\r\n| The far field filter option should not be used for periodic structures.  |\r\n| Set it to zero when using the 'assume periodic' option.                  |\r\n+--------------------------------------------------------------------------+\r\n\r\nSee Also\r\n\r\nfarfield2d(), farfield3d()\r\n"}, "farfieldpolar2d": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldpolar2d.html", "text": "Projects a given power or field profile monitor to the far field to a 1\r\nmeter radius semi-circle. This is similar to the farfield2d script\r\ncommand except the complex electric fields are returned, rather than\r\nfield intensity. The data is returned as matrix of NxP if one frequency\r\npoint is projected, or NxPx3 when multiple frequency points are\r\nprojected where N is the resolution of the far field projection, P is\r\nthe number frequency points projected, and the last index refers to Er,\r\nE\u03b8 and Ez, in cylindrical coordinates. For TM simulations, this function\r\ngives precisely the result of farfieldvector2d because the only non-zero\r\nfield component is Ez.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfieldpolar2d(             | Returns the polar complex electric   |\r\n| \"mname\",...)                         | fields. Same arguments as            |\r\n|                                      | farfield2d.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfarfield2d(), farfieldvector2d(), farfieldangle()\r\n"}, "farfieldpolar3d": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldpolar3d.html", "text": "The function farfieldpolar3d is similar to farfield3d, but it returns\r\nthe complex electric fields, rather than field intensity. The data is\r\nreturned as matrix of NxMx3 (if one frequency point is projected) or\r\nNxMxPx3 (if more than 1 frequency point is projected), where N and M are\r\nspatial indices, P is the number of frequency points, and the last index\r\nrefers to Er, E\u03b8 and E\u03c6, in spherical coordinates. The components Er, E\u03b8\r\nand E\u03c6 are the complex components of the electric field vector. See the\r\nfarfield3d documentation for information on interpreting ux, uy, na, nb\r\nfor various monitor orientations.\r\n\r\nNote: When viewing far fields from the GUI with the visualizer, three\r\nAttributes are available: E2, Ep, Es. E2 corresponds to \\|E\\|^2, Ep to\r\nEtheta, and Es to Ephi.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfieldpolar3d(             | Returns the spherical complex        |\r\n| \"monitorname\",...)                   | electric fields. Same arguments as   |\r\n|                                      | farfield3d.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfarfield3d(), farfieldvector3d()\r\n"}, "farfieldspherical": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldspherical.html", "text": "Interpolates far field data (3D simulations) from E(ux,uy) to spherical\r\ncoordinates E(theta,phi). The far field projections functions generally\r\nreturn the projection as a function of ux,uy (direction cosines).\r\nfarfieldspherical can be used to interpolate this data into the more\r\ncommon units of theta, phi. See the farfield3d documentation for\r\ninformation on interpreting ux, uy, na, nb for various monitor\r\norientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfieldspherical( E2, ux,   | Interpolate far field data to        |\r\n| uy, theta, phi)                      | spherical coordinates.               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| E2             | required       |                | matrix         | E field data   |\r\n|                |                |                |                | from           |\r\n|                |                |                |                | farfield3d     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| ux             | required       |                | vector         | ux data from   |\r\n|                |                |                |                | farfieldux.    |\r\n|                |                |                |                | Note that the  |\r\n|                |                |                |                | result should  |\r\n|                |                |                |                | be a vector,   |\r\n|                |                |                |                | so it is       |\r\n|                |                |                |                | sufficient to  |\r\n|                |                |                |                | perform the    |\r\n|                |                |                |                | farfieldux     |\r\n|                |                |                |                | script command |\r\n|                |                |                |                | for only 1     |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| uy             | required       |                | vector         | uy data from   |\r\n|                |                |                |                | farfielduy.    |\r\n|                |                |                |                | Note that the  |\r\n|                |                |                |                | result should  |\r\n|                |                |                |                | be a vector,   |\r\n|                |                |                |                | so it is       |\r\n|                |                |                |                | sufficient to  |\r\n|                |                |                |                | perform the    |\r\n|                |                |                |                | farfieldux     |\r\n|                |                |                |                | script command |\r\n|                |                |                |                | for only 1     |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| theta          | required       |                | vector         | theta vector,  |\r\n|                |                |                |                | in degrees.    |\r\n|                |                |                |                | Must have      |\r\n|                |                |                |                | length L or 1. |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| phi            | required       |                | vector         | phi vector, in |\r\n|                |                |                |                | degrees. Must  |\r\n|                |                |                |                | have length L  |\r\n|                |                |                |                | or 1.          |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nfarfield3d(), farfieldux(), farfielduy(), meshgridx(), meshgridy()\r\n"}, "farfieldux": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldux.html", "text": "Returns the matrix of ux corresponding to the far field data from\r\nfarfield3d for a 3D simulation. See the farfield3d documentation for\r\ninformation on interpreting ux, uy, na, nb for various monitor\r\norientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | See farfield3d help. Arguments are   |\r\n| o.farfieldux(\"mname\",f,na,nb,index)  | same as for farfield3d.              |\r\n|                                      |                                      |\r\n|                                      | Note that the result is an NxM       |\r\n|                                      | matrix where N is the spatial index  |\r\n|                                      | and M is the number of frequency     |\r\n|                                      | points.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfarfield3d(), farfielduy(), farfieldspherical(), farfieldexact()\r\n"}, "farfielduy": {"link": "https://kb.lumerical.com/en/ref_scripts_farfielduy.html", "text": "Returns the matrix of uy corresponding to the far field data from\r\nfarfield3d for a 3D simulation. See the farfield3d documentation for\r\ninformation on interpreting ux, uy, na, nb for various monitor\r\norientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | See farfield3d help. Arguments are   |\r\n| o.farfielduy(\"mname\",f,na,nb,index)  | same as for farfield3d.              |\r\n|                                      |                                      |\r\n|                                      | Note that the result is an NxM       |\r\n|                                      | matrix where N is the spatial index  |\r\n|                                      | and M is the number of frequency     |\r\n|                                      | points.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfarfield3d(), farfieldux(), farfieldspherical(), farfieldexact()\r\n"}, "farfieldvector2d": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldvector2d.html", "text": "Projects a given power or field profile monitor to the far field to a 1\r\nmeter radius semi-circle. This is similar to the farfield2d script\r\ncommand except the complex electric fields are returned, rather than\r\nfield intensity. The data is returned as matrix of NxP if one frequency\r\npoint is projected, or NxPx3 when multiple frequency points are\r\nprojected where N is the resolution of the far field projection, P is\r\nthe number frequency points projected, and the last index refers to Ex,\r\nEy and Ez which are the complex components of the electric field vector\r\nin Cartesian coordinates.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfieldvector2d(            | Returns the Cartesian complex        |\r\n| \"mname\",...)                         | electric fields. Same arguments as   |\r\n|                                      | farfield2d.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfarfield2d(), farfieldpolar2d(), farfieldangle()\r\n"}, "farfieldvector3d": {"link": "https://kb.lumerical.com/en/ref_scripts_farfieldvector3d.html", "text": "The function farfieldvector3d is similar to farfield3d, but it returns\r\nthe complex electric fields, rather than field intensity. The data is\r\nreturned as matrix of NxMx3 (if one frequency point is projected) or\r\nNxMxPx3 (if more than 1 frequency point is projected), where N and M are\r\nspatial indices, P is the number of frequency points, and the last index\r\nrefers to Ex, Ey and Ez. The components Ex, Ey and Ez are the complex\r\ncomponents of the electric field vector. See the farfield3d\r\ndocumentation for information on interpreting ux, uy, na, nb for various\r\nmonitor orientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.farfieldvector3d(            | Returns the cartesian complex        |\r\n| \"monitorname\",...)                   | electric fields. Same arguments as   |\r\n|                                      | farfield3d.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfarfield3d(), farfieldpolar3d()\r\n"}, "feval": {"link": "https://kb.lumerical.com/en/ref_scripts_feval.html", "text": "Evaluates a string as script file. This function is useful for running\r\nscript files that are not in your path and files with spaces in the\r\nname.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.feval(filename)                    | Execute string containing the name   |\r\n|                                      | of a script file.                    |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\neval(), str2num(), num2str(), lower(), upper(), toscript()\r\n"}, "fft": {"link": "https://kb.lumerical.com/en/ref_scripts_fft.html", "text": "Computes the 1D, 2D or 3D Fast Fourier Transform (FFT) of a matrix. In\r\nthe 1D case the transform is given by\r\n\r\nThe FFT, inverse FFT and all associated functions have an option (option\r\n1 below) that controls the format used to store the frequency domain\r\ndata. When working with spectral data it is not possible to switch\r\nbetween formats; there are no functions to convert between formats. This\r\nimplies that if you use option 1=n to produce a spectrum with fft, then\r\nyou must also use option 1=n if you want to pass that same spectral data\r\nto invfft. Similarly, if you use option 1=n for fft, then you also need\r\nto use option 1=n with fftw to get the proper frequency vector\r\ncorresponding to your spectrum. invfft and fftk work in the same way.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.fft(Ex)                      | Returns the fast Fourier transform   |\r\n|                                      | of Ex. Ex can be 1D, 2D or 3D.       |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.fft(Ex,option1,option2)      | option1                              |\r\n|                                      |                                      |\r\n|                                      | This option controls the format used |\r\n|                                      | to store the frequency domain data.  |\r\n|                                      | The options are:                     |\r\n|                                      |                                      |\r\n|                                      | \u20221 : the standard FFT (zero          |\r\n|                                      | frequency is at the first element of |\r\n|                                      | the matrix). This is the default     |\r\n|                                      | option.                              |\r\n|                                      |                                      |\r\n|                                      | \u20222 : zero frequency is the first     |\r\n|                                      | element, but only data up to and     |\r\n|                                      | including the Nyquist frequency is   |\r\n|                                      | stored. This option is only useful   |\r\n|                                      | for real valued, 1D time/spatial     |\r\n|                                      | signals.                             |\r\n|                                      |                                      |\r\n|                                      | \u20223 : the FFT is shifted so zero      |\r\n|                                      | frequency is the central element of  |\r\n|                                      | the spectrum (more precisely, this   |\r\n|                                      | means the zero frequency point is at |\r\n|                                      | element floor(N/2 + 1), where N is   |\r\n|                                      | the number of samples).              |\r\n|                                      |                                      |\r\n|                                      | option2                              |\r\n|                                      |                                      |\r\n|                                      | This option is either a 1, 2 or 3    |\r\n|                                      | element vector depending on whether  |\r\n|                                      | Ex is 1D, 2D or 3D. For each         |\r\n|                                      | dimension, specify a value of either |\r\n|                                      | 0, 1 or N to obtain the desired 0    |\r\n|                                      | padding options.                     |\r\n|                                      |                                      |\r\n|                                      | \u20220: no zero padding.                 |\r\n|                                      |                                      |\r\n|                                      | \u20221: zero padding up to the next      |\r\n|                                      | power of 2 longer than the length of |\r\n|                                      | Ex (default).                        |\r\n|                                      |                                      |\r\n|                                      | \u2022N: zero pad up to length N if N >   |\r\n|                                      | length(Ex), where length of Ex is    |\r\n|                                      | the length in a specific dimension.  |\r\n|                                      | If N <= length(Ex), it will zero pad |\r\n|                                      | up to the next power of 2 longer     |\r\n|                                      | than the length of Ex. For the       |\r\n|                                      | fastest results, N should be a power |\r\n|                                      | of 2 and can be entered, for         |\r\n|                                      | example, as 2^12.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: FFT Conventions                                                    |\r\n|                                                                          |\r\n| There are different, but equivalent conventions for defining Fourier     |\r\n| transforms. Lumerical defines the forward FFT using a positive sign in   |\r\n| the exponential term, and the inverse FFT using a negative sign in the   |\r\n| exponential term. However, some other packages (e.g. MATLAB) use the     |\r\n| opposite convention, with a negative sign in the exponential for the     |\r\n| forward FFT and a positive sign in the exponential for the inverse FFT.  |\r\n| To convert between the different FFT conventions, switch the invfft and  |\r\n| fft and rescale the results. For a signal y with N elements this can be  |\r\n| done as follows:                                                         |\r\n|                                                                          |\r\n| +--------------------------------------+-------------------------------- |\r\n| ------+                                                                  |\r\n| | Lumerical                            | MATLAB                          |\r\n|       |                                                                  |\r\n| +--------------------------------------+-------------------------------- |\r\n| ------+                                                                  |\r\n| | fft(y,1,0)                           | ifft(y)\\*N                      |\r\n|       |                                                                  |\r\n| |                                      |                                 |\r\n|       |                                                                  |\r\n| | invfft(y,1,0)                        | fft(y)/N                        |\r\n|       |                                                                  |\r\n| +--------------------------------------+-------------------------------- |\r\n| ------+                                                                  |\r\n+--------------------------------------------------------------------------+\r\n\r\nSee Also\r\n\r\ninvfft(), fftw(), fftk(), czt()\r\n"}, "fftk": {"link": "https://kb.lumerical.com/en/ref_scripts_fftk.html", "text": "Returns the spatial wavevector kx associated with the Fourier transform\r\nof a function of x.\r\n\r\n,\r\n\r\nwhere M=length(x).\r\n\r\nfftk and all related functions have an option (option 1 below) that\r\ncontrols the format used to store the frequency domain data. When\r\nworking with spectral data it is not possible to switch between formats;\r\nthere are no functions to convert between formats. This implies that if\r\nyou use option1=n to produce a spectrum with fft, then you must also use\r\noption1=n if you want to pass that same spectral data to invfft.\r\nSimilarly, if you use option1=n for fft, then you also need to use\r\noption1=n with fftw to get the proper frequency vector corresponding to\r\nyour spectrum. invfft and fftk work in the same way.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.fftk(x)                      | Returns the spatial wavevector kx    |\r\n|                                      | associated with a fourier transform  |\r\n|                                      | of a function of x..                 |\r\n+--------------------------------------+--------------------------------------+\r\n| o.fftk(x,option1,option2)            | option1                              |\r\n|                                      |                                      |\r\n|                                      | \u20221 : the standard FFT (zero          |\r\n|                                      | frequency is at the first element of |\r\n|                                      | the matrix). This is the default     |\r\n|                                      | option.                              |\r\n|                                      |                                      |\r\n|                                      | \u20222 : zero frequency is the first     |\r\n|                                      | element, but frequencies above the   |\r\n|                                      | Nyquist frequency are removed.       |\r\n|                                      |                                      |\r\n|                                      | \u20223 : the FFT is shifted so zero      |\r\n|                                      | frequency is the central element of  |\r\n|                                      | the spectrum (more precisely, this   |\r\n|                                      | means the zero frequency point is at |\r\n|                                      | element floor(N/2 + 1), where N is   |\r\n|                                      | the number of samples). Both         |\r\n|                                      | positive and negative frequencies    |\r\n|                                      | are seen                             |\r\n|                                      |                                      |\r\n|                                      | option2                              |\r\n|                                      |                                      |\r\n|                                      | \u20220: no zero padding.                 |\r\n|                                      |                                      |\r\n|                                      | \u20221: zero padding up to the next      |\r\n|                                      | power of 2 longer than the length of |\r\n|                                      | Ex (default).                        |\r\n|                                      |                                      |\r\n|                                      | \u2022N: zero pad up to length N if N >   |\r\n|                                      | length(t). If N <= length(t), it     |\r\n|                                      | will zero pad up to the next power   |\r\n|                                      | of 2 longer than the length of t.    |\r\n|                                      | For the fastest results, N should be |\r\n|                                      | a power of 2 and can be entered, for |\r\n|                                      | example, as 2^12.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfft(), fftw(), invfft()\r\n"}, "fftw": {"link": "https://kb.lumerical.com/en/ref_scripts_fftw.html", "text": "Returns the angular frequency vector corresponding to time vector t.\r\n\r\n,\r\n\r\nwhere M=length(t).\r\n\r\nfftw and all related functions have an option (option 1 below) that\r\ncontrols the format used to store the frequency domain data. When\r\nworking with spectral data it is not possible to switch between formats;\r\nthere are no functions to convert between formats. This implies that if\r\nyou use option1=n to produce a spectrum with fft, then you must also use\r\noption1=n if you want to pass that same spectral data to invfft.\r\nSimilarly, if you use option1=n for fft, then you also need to use\r\noption1=n with fftw to get the proper frequency vector corresponding to\r\nyour spectrum. invfft and fftk work in the same way.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.fftw(t)                      | Returns the angular frequency vector |\r\n|                                      | corresponding to time vector t.      |\r\n+--------------------------------------+--------------------------------------+\r\n| o.fftw(t,option1,option2)            | option1                              |\r\n|                                      |                                      |\r\n|                                      | \u20221 : the standard FFT (zero          |\r\n|                                      | frequency is at the first element of |\r\n|                                      | the matrix). This is the default     |\r\n|                                      | option.                              |\r\n|                                      |                                      |\r\n|                                      | \u20222 : zero frequency is the first     |\r\n|                                      | element, but frequencies above the   |\r\n|                                      | Nyquist frequency are removed.       |\r\n|                                      |                                      |\r\n|                                      | \u20223 : the FFT is shifted so zero      |\r\n|                                      | frequency is the central element of  |\r\n|                                      | the spectrum (more precisely, this   |\r\n|                                      | means the zero frequency point is at |\r\n|                                      | element floor(N/2 + 1), where N is   |\r\n|                                      | the number of samples). Both         |\r\n|                                      | positive and negative frequencies    |\r\n|                                      | are seen                             |\r\n|                                      |                                      |\r\n|                                      | option2                              |\r\n|                                      |                                      |\r\n|                                      | \u20220: no zero padding.                 |\r\n|                                      |                                      |\r\n|                                      | \u20221: zero padding up to the next      |\r\n|                                      | power of 2 longer than the length of |\r\n|                                      | Ex (default).                        |\r\n|                                      |                                      |\r\n|                                      | \u2022N: zero pad up to length N if N >   |\r\n|                                      | length(t). If N <= length(t), it     |\r\n|                                      | will zero pad up to the next power   |\r\n|                                      | of 2 longer than the length of t.    |\r\n|                                      | For the fastest results, N should be |\r\n|                                      | a power of 2 and can be entered, for |\r\n|                                      | example, as 2^12.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfft(), fftk(), invfft()\r\n"}, "filebasename": {"link": "https://kb.lumerical.com/en/ref_scripts_file_basename.html", "text": "Gets the file basename from a string.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.filebasename(                | Returns the file basename as a       |\r\n| \"location/filename.ext\" )            | string.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncurrentfilename(), getpath(), which(), pwd(), filedirectory(),\r\nfileextension()\r\n"}, "filedirectory": {"link": "https://kb.lumerical.com/en/ref_scripts_file_directory.html", "text": "Gets the file directory from a string.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.filedirectory(               | Returns the file directory as a      |\r\n| \"location/filename.ext\" )            | string.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncurrentfilename(), getpath(), which(), pwd(), fileextension(),\r\nfilebasename()\r\n"}, "fileexists": {"link": "https://kb.lumerical.com/en/ref_scripts_file_exists.html", "text": "Checks if a file exists. The file extension (ie, .fsp, .lms, etc) must\r\nbe specified. By default, the entire path will be searched.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.fileexists(\"filename\")       | Returns 1 if the file exists         |\r\n|                                      |                                      |\r\n|                                      | Returns 0 if the file does not       |\r\n|                                      | exist.                               |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Search for a file not in the path    |\r\n| o.fileexists(\"c:\\\\temp\\\\file.txt\")   |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetpath(), which(), pwd(), load(), loaddata(), write(), readdata(),\r\ncurrentfilename(), rm(), exist()\r\n"}, "fileexpand": {"link": "https://kb.lumerical.com/en/ref_scripts_fileexpand.html", "text": "Expands a file name by replacing any environmental variables.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.fileexpand(filename)               | Expands a file name by replacing any |\r\n|                                      | environmental variables (defined by  |\r\n|                                      | setsetting).                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetsetting()\r\n"}, "fileextension": {"link": "https://kb.lumerical.com/en/ref_scripts_file_extension.html", "text": "Gets the file extension from a string.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.fileextension( \"name.ext\")   | Returns the file extension as a      |\r\n|                                      | string.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncurrentfilename(), getpath(), which(), pwd(), filedirectory(),\r\nfilebasename()\r\n"}, "fileopendialog": {"link": "https://kb.lumerical.com/en/ref_scripts_fileopendialog.html", "text": "Calls the standard windows file open dialog.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.fileopendialog()             | Brings up the open file dialog box   |\r\n|                                      | and returns the path that the user   |\r\n|                                      | selects.                             |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.fileopendialog(\".ext\")       | Brings up the open file dialog box,  |\r\n|                                      | displaying only files with the       |\r\n|                                      | extension .ext. Returns the path of  |\r\n|                                      | the file that the user selects.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfilesavedialog()\r\n"}, "filesavedialog": {"link": "https://kb.lumerical.com/en/ref_scripts_filesavedialog.html", "text": "Calls the standard windows file save dialog.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.filesavedialog()             | Brings up the save file dialog box   |\r\n|                                      | and returns the path that the user   |\r\n|                                      | selects.                             |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.filesavedialog(\".ext\")       | Brings up the save file dialog box,  |\r\n|                                      | displaying only files with the       |\r\n|                                      | extension .ext. Returns the path of  |\r\n|                                      | the file that the user selects.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\nfileopendialog()\r\n"}, "find": {"link": "https://kb.lumerical.com/en/ref_scripts_find.html", "text": "Searchs for entries in a matrix that meet some condition. The indices of\r\nthose values are returned. For multi-dimensional matrices, the find\r\nfunction will still return a single index. This is useful when using the\r\noutput from find in a loop.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.find(x,5e-6)                 | Will return the index of x that      |\r\n|                                      | corresponds to the closest value to  |\r\n|                                      | 5e-6.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.find(x>5)                    | Will return the indices of all       |\r\n|                                      | values of x that are greater than 5. |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.find((x<7) & (x>=2))         | Will return the indices of all       |\r\n|                                      | values of x that are greater than or |\r\n|                                      | equal to 2, AND less than 7.         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npinch(), findpeaks(), integrate(), length(), size(), mod(),\r\nmeshgrid3dx(), meshgrid3dy(), meshgrid3dz()\r\n"}, "findmodes": {"link": "https://kb.lumerical.com/en/ref_scripts_findmodes.html", "text": "Calculates the modes supported by the structure using the current\r\ncalculation settings. This function is the script equivalent to the\r\n\"Calculate Modes\" button. Each mode will be saved as a D-CARD named\r\n\"modeX\", where X is the xth mode found. The D-CARD saves data such as\r\neffective index and mode profile.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| n=o.findmodes()                      | n will be equal to the number of     |\r\n|                                      | modes found.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetanalysis(), mesh(), selectmode(), frequencysweep(), coupling(),\r\noverlap(), bestoverlap(), propagate()\r\n"}, "findpeaks": {"link": "https://kb.lumerical.com/en/ref_scripts_findpeaks.html", "text": "Returns the position of peaks in a matrix. A peak (or local maximum) is\r\ndefined as a data point that is larger than its nearest neighbors.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.findpeaks(y)                 | Returns the position of the peak     |\r\n|                                      | with the largest value in y. The     |\r\n|                                      | length of y must be at least 2. If   |\r\n|                                      | no peak is found in the data, a      |\r\n|                                      | value of 1 is returned.              |\r\n+--------------------------------------+--------------------------------------+\r\n| o.findpeaks(y,n)                     | Returns a matrix containing the      |\r\n|                                      | positions of the largest n peaks     |\r\n|                                      | found in the data. The returned      |\r\n|                                      | values are ordered from largest to   |\r\n|                                      | smallest. The returned matrix is     |\r\n|                                      | always of dimension nX1. If less     |\r\n|                                      | than n peaks are found, the          |\r\n|                                      | remaining values of the returned     |\r\n|                                      | matrix are 1.                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfind()\r\n"}, "findproperty": {"link": "https://kb.lumerical.com/en/ref_scripts_findproperty.html", "text": "This command returns a cell containing all elements in the circuit that\r\nhave a certain property.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.findproperty (property, recursive) | Returns a cell containing all        |\r\n|                                      | elements in the circuit that have    |\r\n|                                      | property \u2018property\u2019. If recursive is |\r\n|                                      | true, it will return a flat list     |\r\n|                                      | (hierarchical) with all the elements |\r\n|                                      | in the current scope. The default    |\r\n|                                      | value for recursive is false.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfindpropertyvalue()\r\n"}, "findpropertyvalue": {"link": "https://kb.lumerical.com/en/ref_scripts_findpropertyvalue.html", "text": "This command returns a cell containing all elements in the circuit that\r\nhave a certain property with a certain value.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.findpropertyvalue (property,       | Returns a cell containing all        |\r\n| value, recursive)                    | elements in the circuit that have    |\r\n|                                      | property \u2018property\u2019 with value       |\r\n|                                      | \u2018value\u2019, if recursive is true, it    |\r\n|                                      | will return a flat list              |\r\n|                                      | (hierarchical) with all the elements |\r\n|                                      | in the current scope. The default    |\r\n|                                      | value for recursive is false.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfindproperty()\r\n"}, "findstring": {"link": "https://kb.lumerical.com/en/ref_scripts_findstring.html", "text": "Returns the position of a given substring in a string.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| pos = o.findstring(s,s1)             | Returns the position of the first    |\r\n|                                      | instance substring s1 in s. If s1 is |\r\n|                                      | not found in s, it returns -1.       |\r\n+--------------------------------------+--------------------------------------+\r\n| pos = o.findstring(s,s1,p0)          | Returns the position of the first    |\r\n|                                      | instance substring s1 in s, starting |\r\n|                                      | at position p0. If s1 is not found   |\r\n|                                      | in s, starting from p0, it returns   |\r\n|                                      | -1.                                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlength(), substring(), replace(), replacestring(), str2num(), num2str(),\r\nsplitstring(), lower(), upper(), toscript()\r\n"}, "finite": {"link": "https://kb.lumerical.com/en/ref_scripts_finite.html", "text": "Returns 1 (true) if a value is finite. Numbers such as NaN or #1.INF\r\nreturn 0 (false).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.finite(x)                    | Returns a matrix of the same size as |\r\n|                                      | x. The values are 1 for values of x  |\r\n|                                      | that are finite and 0 for values     |\r\n|                                      | that are NaN.                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlineintersect(), linecross()\r\n"}, "flip": {"link": "https://kb.lumerical.com/en/ref_scripts_flip.html", "text": "Flips (reverses the order of) a matrix along a given dimension.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| C = o.flip(A, dim)                   | Flips the matrix A along the         |\r\n|                                      | dimension dim.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsize(), length(), pinch(), transpose(), reshape(), permute()\r\n"}, "flipelement": {"link": "https://kb.lumerical.com/en/ref_scripts_flipelement.html", "text": "Flips element in the schematic editor.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.flipelement(\"element\")             | Flips element in the schematic       |\r\n|                                      | editor.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrotateelement()\r\n"}, "floor": {"link": "https://kb.lumerical.com/en/ref_scripts_floor.html", "text": "Rounds the input to the nearest integer less than or equal to itself.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.floor(X)                     | Returns the nearest integer less     |\r\n|                                      | than or equal to X.                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nceil(), mod()\r\n"}, "for": {"link": "https://kb.lumerical.com/en/ref_scripts_for.html", "text": "Starts a for loop to allow some operations to be repeated a number of\r\ntimes. A while loop can be implemented when using the three argument\r\nversion of a for loop.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.for(x=1:100) { print x; }          | Single argument for loop. The loop   |\r\n|                                      | will be sequentially executed for    |\r\n|                                      | each value of x.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.for(x=1; x<= 100; x=x+1) { print   | Three argument for loop.             |\r\n| x; }                                 |                                      |\r\n|                                      | x=1 at the start of the loop. The    |\r\n|                                      | loop continues while x <=100 and     |\r\n|                                      | sets x=x+1 at each pass.             |\r\n+--------------------------------------+--------------------------------------+\r\n| x=1; o.for(0; x<10; 0) {  print x;   | This is equivalent to a while loop   |\r\n|  x=x+1; }                            | that will execute while x<10.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nif()\r\n"}, "format": {"link": "https://kb.lumerical.com/en/ref_scripts_format.html", "text": "Toggles the script interpreter between 2 output precision states. The\r\ncommands print (?) and num2str() use this state to determine how many\r\ndigits of precision to output.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.format long()                      | Set script interpreter to 16 digits  |\r\n|                                      | of precision.                        |\r\n+--------------------------------------+--------------------------------------+\r\n| o.format short()                     | Set script interpreter to 6 digits   |\r\n|                                      | of precision (maximum).              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnum2str()\r\n"}, "framerate": {"link": "https://kb.lumerical.com/en/ref_scripts_framerate.html", "text": "Orbits the perspective view and returns the framerate. This can be\r\nuseful for estimating your graphics performance. If comparing the\r\nperformance of two computers, be sure to use exactly the same simulation\r\nfile.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| fr = o.framerate(num\\_frames, zoom)  | num\\_frames - Number of frames to    |\r\n|                                      | draw                                 |\r\n|                                      |                                      |\r\n|                                      | zoom - Zoom factor used in           |\r\n|                                      | perspective view                     |\r\n|                                      |                                      |\r\n|                                      | fr - number of frames / wall time    |\r\n|                                      | required to complete orbit.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetview(), getview(), orbit()\r\n"}, "frequencysweep": {"link": "https://kb.lumerical.com/en/ref_scripts_frequencysweep.html", "text": "Performs a frequency sweep using the current settings within the\r\nfrequency analysis tab. Produces a D-CARD called \"frequencysweep\" that\r\ncontains dispersion, effective index, and other data for as a function\r\nof frequency.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.frequencysweep()                   | Perform a frequency sweep with the   |\r\n|                                      | current settings.                    |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetanalysis(), mesh(), findmodes(), selectmode()\r\n"}, "gdsaddcircle": {"link": "https://kb.lumerical.com/en/ref_scripts_gdsaddcircle.html", "text": "This function adds an approximation of a circle to a GDSII file stream.\r\nGDSII files do not support circles, so this is just a convenient\r\nfunction to create a polygon representation of a circle. Polygons can\r\nonly be added in a GDSII cell, so this command can be called only if a\r\ncell has been created.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.gdsaddcircle(f, layer, x, y, r, n) | Adds an approximation of a circle on |\r\n|                                      | a layer with x-, y-coordinates,      |\r\n|                                      | radius and number of polygon sides.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| f                       | string                  | a file handle that was  |\r\n|                         |                         | previously opened with  |\r\n|                         |                         | gdsopen.                |\r\n+-------------------------+-------------------------+-------------------------+\r\n| layer                   | number                  | layer number for this   |\r\n|                         |                         | structure.              |\r\n+-------------------------+-------------------------+-------------------------+\r\n| x                       | number                  | x-coordinate of the     |\r\n|                         |                         | center position in      |\r\n|                         |                         | meters.                 |\r\n+-------------------------+-------------------------+-------------------------+\r\n| y                       | number                  | y-coordinate of the     |\r\n|                         |                         | center position in      |\r\n|                         |                         | meters.                 |\r\n+-------------------------+-------------------------+-------------------------+\r\n| r                       | number                  | radius of the circle in |\r\n|                         |                         | meters.                 |\r\n+-------------------------+-------------------------+-------------------------+\r\n| n                       | number                  | number of sides to use  |\r\n|                         |                         | in the polygon          |\r\n|                         |                         | approximation. It is 64 |\r\n|                         |                         | by default.             |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\ngdsopen(), gdsclose(), gdsbegincell(), gdsendcell(), gdsaddpoly(),\r\ngdsaddref(), gdsimport()\r\n"}, "gdsaddpoly": {"link": "https://kb.lumerical.com/en/ref_scripts_gdsaddpoly.html", "text": "This function adds a polygon element to a GDSII file stream. Polygons\r\nare also known as boundary elements in GDS terminology. This command can\r\nbe called only if a cell has been created.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.gdsaddpoly(f, layer, [vertices])   | Adds a polygon element on a layer    |\r\n|                                      | with vertices.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| f                       | string                  | a file handle that was  |\r\n|                         |                         | previously opened with  |\r\n|                         |                         | gdsopen.                |\r\n+-------------------------+-------------------------+-------------------------+\r\n| layer                   | number                  | layer number for this   |\r\n|                         |                         | structure.              |\r\n+-------------------------+-------------------------+-------------------------+\r\n| vertices                | matrix                  | vertices of the         |\r\n|                         |                         | polygon, in a Nx2       |\r\n|                         |                         | matrix where the first  |\r\n|                         |                         | column represents x and |\r\n|                         |                         | the second column       |\r\n|                         |                         | represents y, e.g.,     |\r\n|                         |                         | [x1,y1;                 |\r\n|                         |                         | x2,y2;...xn,yn]. The    |\r\n|                         |                         | values are in meters.   |\r\n|                         |                         | The first and last      |\r\n|                         |                         | values should not be    |\r\n|                         |                         | the same, the polygon   |\r\n|                         |                         | will be automatically   |\r\n|                         |                         | closed.                 |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\ngdsopen(), gdsclose(), gdsbegincell(), gdsendcell(), gdsaddcircle(),\r\ngdsaddref(), gdsimport()\r\n"}, "gdsaddrect": {"link": "https://kb.lumerical.com/en/ref_scripts_gdsaddrect.html", "text": "This function adds a rectangle element to a GDSII file stream. This is\r\njust a convenient function to create a polygon for the case of a\r\nrectangle. Other element type for rectangle (such as, box) is not\r\nsupported at this moment. Polygons can only be added in a GDSII cell, so\r\nthis command can be called only if a cell has been created.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.gdsaddrect(f, layer, x, y, width,  | Adds a rectangle element on a layer  |\r\n| height)                              | with x-, y-coordinates, width and    |\r\n|                                      | height.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| f                       | string                  | a file handle that was  |\r\n|                         |                         | previously opened with  |\r\n|                         |                         | gdsopen.                |\r\n+-------------------------+-------------------------+-------------------------+\r\n| layer                   | number                  | layer number for this   |\r\n|                         |                         | structure.              |\r\n+-------------------------+-------------------------+-------------------------+\r\n| x                       | number                  | x-coordinate of the     |\r\n|                         |                         | center position in      |\r\n|                         |                         | meters.                 |\r\n+-------------------------+-------------------------+-------------------------+\r\n| y                       | number                  | y-coordinate of the     |\r\n|                         |                         | center position in      |\r\n|                         |                         | meters.                 |\r\n+-------------------------+-------------------------+-------------------------+\r\n| width                   | number                  | width of the rectangle  |\r\n|                         |                         | in meters.              |\r\n+-------------------------+-------------------------+-------------------------+\r\n| height                  | number                  | height of the rectangle |\r\n|                         |                         | in meters.              |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\ngdsopen(), gdsclose(), gdsbegincell(), gdsendcell(), gdsaddpoly(),\r\ngdsaddref(), gdsimport()\r\n"}, "gdsaddref": {"link": "https://kb.lumerical.com/en/ref_scripts_gdsaddref.html", "text": "This function adds a reference to another cell to the current cell in\r\nthe GDSII file stream. This function replicates the referenced cell (has\r\nto be previously opened and finished) to the current cell, to create a\r\nnested hierarchy. The layer numbers of the replicated structures follow\r\nthe referenced cell. References can only be added in a GDSII cell, so\r\nthis command can be called only if a current cell has been created. In\r\naddition, the cell to be replicated has to exist before it is\r\nreferenced.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.gdsaddref(f, \"cellname\", dx, dy)   | Adds a reference to another cell     |\r\n|                                      | (\"cellname\") to the current cell,    |\r\n|                                      | with a specified move of dx and dy.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| f                       | string                  | a file handle that was  |\r\n|                         |                         | previously opened with  |\r\n|                         |                         | gdsopen.                |\r\n+-------------------------+-------------------------+-------------------------+\r\n| cellname                | string                  | name of the referenced  |\r\n|                         |                         | cell.                   |\r\n+-------------------------+-------------------------+-------------------------+\r\n| dx                      | number                  | x-movement of the       |\r\n|                         |                         | replicated cell in the  |\r\n|                         |                         | current cell.           |\r\n+-------------------------+-------------------------+-------------------------+\r\n| dy                      | number                  | y-movement of the       |\r\n|                         |                         | replicated cell in the  |\r\n|                         |                         | current cell.           |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\ngdsopen(), gdsclose(), gdsbegincell(), gdsendcell(), gdsaddpoly(),\r\ngdsaddcircle(), gdsaddrect(), gdsimport()\r\n"}, "gdsbegincell": {"link": "https://kb.lumerical.com/en/ref_scripts_gdsbegincell.html", "text": "This function creates a cell in a GDSII file. All GDS elements\r\n(polygons, boxes, references, array references, etc) must be placed\r\ninside a cell, so this function must be called before adding any\r\nelements. When finished adding elements, gdsendcell can be called to\r\nfinish the cell. Cells cannot be nested, so after calling gdsbegincell,\r\na new cell cannot be called again until the first called cell has been\r\nclosed. Although the GDSII file is a flat list of cells, cells can\r\nreference other cells, thus creating a nested hierarchy. See gdsaddref\r\nfor more details. A GDS \"cell\" exists as a \"structure group\" when\r\nimported to FDTD, see gdsimport for more details.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.gdsbegincell(f, \"cellname\")        | Creates a new cell in a GDSII file.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| f                       | string                  | a file handle that was  |\r\n|                         |                         | previously opened with  |\r\n|                         |                         | gdsopen.                |\r\n+-------------------------+-------------------------+-------------------------+\r\n| cellname                | string                  | name of the cell.       |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\ngdsopen(), gdsclose(), gdsendcell(), gdsaddpoly(), gdsaddref(),\r\ngdsimport(), cell()\r\n"}, "gdsclose": {"link": "https://kb.lumerical.com/en/ref_scripts_gdsclose.html", "text": "This function closes a GDSII file for writing. Before calling this\r\ncommand, a .gds file has to be previously opened, see gdsopen.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.gdsclose(\"filename\")               | closes a .gds file in the current    |\r\n|                                      | working directory.                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| filename                | string                  | name of the GDSII file  |\r\n|                         |                         | to export, may also     |\r\n|                         |                         | contain a file path.    |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\ngdsopen(), gdsbegincell(), gdsendcell(), gdsaddpoly(), gdsimport()\r\n"}, "gdsendcell": {"link": "https://kb.lumerical.com/en/ref_scripts_gdsendcell.html", "text": "This function finishes a cell in a GDSII file. This function ends the\r\ncurrent cell in the GDSII file stream. The command gdsbegincell has to\r\nbe called before closing a cell.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.gdsendcell(f)                      | Finishes the previously created cell |\r\n|                                      | in a GDSII file.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| f                       | string                  | a file handle that was  |\r\n|                         |                         | previously opened with  |\r\n|                         |                         | gdsopen.                |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\ngdsopen(), gdsclose(), gdsbegincell(), gdsaddpoly(), gdsimport()\r\n"}, "gdsimport": {"link": "https://kb.lumerical.com/en/ref_scripts_gdsimport.html", "text": "This command imports a cell from a .gds file into the layout\r\nenvironment. This is equivalent to performing a GDSII import through the\r\nFILE->IMPORT menu. See the Layout editor reference guide on GDSII import\r\nfor more information.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| n = o.gdsimport(\"filename\",          | Imports the specified layer from the |\r\n| \"cellname\", layer)                   | specified cell in the specified file |\r\n|                                      | into the current simulation          |\r\n|                                      | environment. The objects created     |\r\n|                                      | will have their material set to an   |\r\n|                                      | object defined dielectric. In 3D,    |\r\n|                                      | the 2D geometric data will be        |\r\n|                                      | extruded to default values in the Z  |\r\n|                                      | dimension. The optional returned     |\r\n|                                      | value, n, is the number of objects   |\r\n|                                      | that were imported from the gds      |\r\n|                                      | file.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| n = o.gdsimport(\"filename\",          | Same as the above command, but the   |\r\n| \"cellname\", layer, \"material\")       | material of the imported object will |\r\n|                                      | be set to the value specified.       |\r\n+--------------------------------------+--------------------------------------+\r\n| n = o.gdsimport(\"filename\",          | This form of the command is only     |\r\n| \"cellname\", layer, \"material\", zmin, | allowed in 3D layouts. The behavior  |\r\n| zmax)                                | is the same as the above command,    |\r\n|                                      | but the structures will be extruded  |\r\n|                                      | in the Z dimension to the specified  |\r\n|                                      | z min and z max values               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| filename                | string                  | name of the GDSII file  |\r\n|                         |                         | to import. It can       |\r\n|                         |                         | contain a complete path |\r\n|                         |                         | to file, or path        |\r\n|                         |                         | relative to the current |\r\n|                         |                         | working directory.      |\r\n+-------------------------+-------------------------+-------------------------+\r\n| cellname                | string                  | name of the cell to     |\r\n|                         |                         | import from the GDSII   |\r\n|                         |                         | file.                   |\r\n+-------------------------+-------------------------+-------------------------+\r\n| layer                   | number or string        | the layer number from   |\r\n|                         |                         | the GDSII file to       |\r\n|                         |                         | import. If only         |\r\n|                         |                         | elements matching a     |\r\n|                         |                         | certain data type are   |\r\n|                         |                         | desired, this can be    |\r\n|                         |                         | specified by using a    |\r\n|                         |                         | string of the form:     |\r\n|                         |                         |                         |\r\n|                         |                         | \"6:2\"                   |\r\n|                         |                         |                         |\r\n|                         |                         | where the desired layer |\r\n|                         |                         | is 6 and the desired    |\r\n|                         |                         | data type is 2.         |\r\n+-------------------------+-------------------------+-------------------------+\r\n| material                | string                  | a valid name of a       |\r\n|                         |                         | material in your        |\r\n|                         |                         | current layout          |\r\n|                         |                         | environment. Partial    |\r\n|                         |                         | names of materials can  |\r\n|                         |                         | be matched starting at  |\r\n|                         |                         | the beginning of the    |\r\n|                         |                         | string. For example,    |\r\n|                         |                         | \"Al (3\" would match \"Al |\r\n|                         |                         | (300nm)\".               |\r\n+-------------------------+-------------------------+-------------------------+\r\n| zmin                    | number                  | the minimum z value for |\r\n|                         |                         | extruding 2D GDSII data |\r\n|                         |                         | into 3D objects         |\r\n+-------------------------+-------------------------+-------------------------+\r\n| zmax                    | number                  | the maximum z value for |\r\n|                         |                         | extruding 2D GDSII data |\r\n|                         |                         | into 3D objects         |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\n \r\n-\r\n\r\nSee Also\r\n\r\nsetnamed(), fileexists(), gdsopen()\r\n"}, "gdsopen": {"link": "https://kb.lumerical.com/en/ref_scripts_gdsopen.html", "text": "This function creates a new .gds file and returns a file handle that can\r\nbe used with the other GdsWriter functions to write the file. The\r\ndefault database units are in 0.1nm and the user units are microns. The\r\nGDSII export function works as a group of commands, shown below as an\r\nexample. For more information, please see Userguide - GDSII - Import and\r\nexport.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| f = o.gdsopen(\"filename\",            | Opens a .gds file in the current     |\r\n| \"userUnit\", \"dataBaseUnit\")          | directory, specifies the size of     |\r\n|                                      | user units and size of the GDSII     |\r\n|                                      | file units. f is a file handle to    |\r\n|                                      | open the GDSII file.                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| filename                | string                  | name of the GDSII file  |\r\n|                         |                         | to export, may also     |\r\n|                         |                         | contain a file path.    |\r\n+-------------------------+-------------------------+-------------------------+\r\n| userUnit                | number                  | size of user units in   |\r\n|                         |                         | GDSII file units.       |\r\n+-------------------------+-------------------------+-------------------------+\r\n| databaseUnit            | number                  | size of the GDSII file  |\r\n|                         |                         | units in meters.        |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\n \r\n=\r\n\r\nSee Also\r\n\r\ngdsclose(), gdsbegincell(), gdsendcell(), gdsaddpoly(), gdsimport()\r\n"}, "get": {"link": "https://kb.lumerical.com/en/ref_scripts_get.html", "text": "Gets a property from selected objects. The property names for the get\r\ncommand are the same as the property names in the Edit dialogue box.\r\n For example, if you see a property called \"mesh accuracy\", then you can\r\nuse the command get(\"mesh accuracy\"); to get that property. It is\r\npossible to get numeric, string, drop down and checkbox properties.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.get()                        | Returns a list of the properties of  |\r\n|                                      | the selected object(s).              |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.get(\"property\")              | Gets the requested property value    |\r\n|                                      | from the currently selected object.  |\r\n|                                      | It cannot be used to get the         |\r\n|                                      | property value of a selected object  |\r\n|                                      | in a group.                          |\r\n|                                      |                                      |\r\n|                                      | If multiple objects are selected     |\r\n|                                      | get(\"property\") is the same as       |\r\n|                                      | get(\"property\",i), where i is the    |\r\n|                                      | number of the first selected objects |\r\n|                                      | with the requested property.         |\r\n|                                      |                                      |\r\n|                                      | Out can be a matrix or a string,     |\r\n|                                      | depending on the property requested. |\r\n+--------------------------------------+--------------------------------------+\r\n| o.get(\"property\",i)                  | Gets the property of the ith         |\r\n|                                      | selected object. Use this to act on  |\r\n|                                      | a series of objects. It cannot be    |\r\n|                                      | used to get the value of a selected  |\r\n|                                      | object in a group.                   |\r\n|                                      |                                      |\r\n|                                      | The objects are ordered by their     |\r\n|                                      | location in the object tree. The     |\r\n|                                      | uppermost selected object is given   |\r\n|                                      | the index 1, and the index numbers   |\r\n|                                      | increase as you go down the tree.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetnumber(), getnamed(), getnamednumber(), set(), haveproperty(),\r\nrunsetup()\r\n"}, "getactivesolver": {"link": "https://kb.lumerical.com/en/ref_scripts_getactivesolver.html", "text": "Gets the active solver. This could be the FDE, varFDTD, or EME solvers\r\nin MODE Solutions.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getactivesolver()            | List the active solver.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n  See Also\r\n\r\nsetactivesolver()\r\n"}, "getanalysis": {"link": "https://kb.lumerical.com/en/ref_scripts_getanalysis.html", "text": "Sets calculation parameters in MODE Solutions' FDE and DEVICE analysis\r\nwindow.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getanalysis()                | Lists all the parameters in the      |\r\n|                                      | analysis window.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getanalysis(\"property\")            | Returns the current value for the    |\r\n|                                      | particular property on the analysis  |\r\n|                                      | window                               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmesh(), findmodes(), frequencysweep(), analysis(), setanalysis()\r\n"}, "getattribute": {"link": "https://kb.lumerical.com/en/ref_scripts_getattribute.html", "text": "Gets an attribute from an existing dataset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getattribute(R)              | Returns the names of all the         |\r\n|                                      | attributes in the dataset R.         |\r\n+--------------------------------------+--------------------------------------+\r\n| Attribute = R.o.getattribute(\"a\")    | Retrieves the attribute a from the   |\r\n|                                      | existing dataset R. The result       |\r\n|                                      | \"Attribute\" is a matrix in one of    |\r\n|                                      | the forms below depending on the     |\r\n|                                      | type of atrribute:                   |\r\n|                                      |                                      |\r\n|                                      | vertex\\_scalar\\_attribute[npts;      |\r\n|                                      | npar\\_1; npar\\_2; ...1]              |\r\n|                                      |                                      |\r\n|                                      | vertex\\_vector\\_attribute[npts;      |\r\n|                                      | npar\\_1; npar\\_2; ...3]              |\r\n|                                      |                                      |\r\n|                                      | cell\\_scalar\\_attribute[ncells; 1]   |\r\n|                                      |                                      |\r\n|                                      | cell\\_vector\\_attribute[ncells; 3]   |\r\n|                                      |                                      |\r\n|                                      | \"npts\" is the number of vertices     |\r\n|                                      | which is equal tothe length of       |\r\n|                                      | geometric parameters 'x', 'y', 'z'   |\r\n|                                      |                                      |\r\n|                                      | \"ncells\" is the number of elements   |\r\n|                                      | equal to number of rows of geometry  |\r\n|                                      | parameter 'elements'                 |\r\n+--------------------------------------+--------------------------------------+\r\n| Attribute = getparameter(R,\"a\")      | Retrieves the attribute a from the   |\r\n|                                      | existing dataset R. The result       |\r\n|                                      | \"Attribute\" is a matrix in one of    |\r\n|                                      | the forms below depending on the     |\r\n|                                      | type of atrribute:                   |\r\n|                                      |                                      |\r\n|                                      | vertex\\_scalar\\_attribute[npts;      |\r\n|                                      | npar\\_1; npar\\_2; ...1]              |\r\n|                                      |                                      |\r\n|                                      | vertex\\_vector\\_attribute[npts;      |\r\n|                                      | npar\\_1; npar\\_2; ...3]              |\r\n|                                      |                                      |\r\n|                                      | cell\\_scalar\\_attribute[ncells; 1]   |\r\n|                                      |                                      |\r\n|                                      | cell\\_vector\\_attribute[ncells; 3]   |\r\n|                                      |                                      |\r\n|                                      | \"npts\" is the number of vertices     |\r\n|                                      | which is equal tothe length of       |\r\n|                                      | geometric parameters 'x', 'y', 'z'   |\r\n|                                      |                                      |\r\n|                                      | \"ncells\" is the number of elements   |\r\n|                                      | equal to number of rows of geometry  |\r\n|                                      | parameter 'elements'                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatrixdataset(), rectilineardataset(), getresult(), getparameter(),\r\nvisualize()\r\n"}, "getcelllist": {"link": "https://kb.lumerical.com/en/ref_scripts_getcellist.html", "text": "Returns the list of cells associated with the gds file that has been\r\nloaded into a layer builder object. There needs to be a layer builder\r\nobject selected, with a gds file loaded.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getcelllist()                      | Returns the list of cells associated |\r\n|                                      | with the loaded gds file.            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddlayerbuilder(), getlayerlist(), setlayer(), loadgdsfile(),\r\naddlayer(), getlayerlist(), setlayer()\r\n"}, "getcommands": {"link": "https://kb.lumerical.com/en/ref_scripts_getcommands.html", "text": "Returns the list of available script commands in the current script\r\nworkspace.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getcommands()                | Returns a list of available script   |\r\n|                                      | commands                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "getcompositionfraction": {"link": "https://kb.lumerical.com/en/ref_scripts_getcompositionfraction.html", "text": "This command is used to set the composition fraction of two materials in\r\nan alloy.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getcompositionfraction(name,       | Get the composition fraction of two  |\r\n| property)                            | materials in an alloy. Property can  |\r\n|                                      | be fixed, linear x, linear y, linear |\r\n|                                      | z, or custom.                        |\r\n|                                      |                                      |\r\n|                                      | This command only works if the       |\r\n|                                      | material of the specified structure  |\r\n|                                      | is an alloy.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetcompositionfraction()\r\n"}, "getdata": {"link": "https://kb.lumerical.com/en/ref_scripts_getdata.html", "text": "Get raw data from a simulation object. In most cases, it is more\r\nconvenient to get a complete dataset with getresult, rather than getting\r\nindividual data elements with getdata.\r\n\r\nRemember to run the simulation before using getdata.\r\n\r\nFor FDTD and MODE,\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getdata()                    | Returns names of all objects with    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getdata(\"monitor\")           | Returns list of of data within the   |\r\n|                                      | simulation object.                   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getdata( \"monitor\",          | Gets data from a monitor. For        |\r\n| \"dataname\")                          | example, you can use                 |\r\n|                                      |                                      |\r\n|                                      | \u2022Ex = getdata(\"monitor1\",\"Ex\");      |\r\n|                                      |                                      |\r\n|                                      | to get the Ex field data from        |\r\n|                                      | monitor1.                            |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getdata( \"monitor\",          | The optional argument, option, can   |\r\n| \"dataname\", option)                  | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n|                                      |                                      |\r\n|                                      | For Propagator simulations in MODE   |\r\n|                                      | Solutions, this options also allow   |\r\n|                                      | users to choose whether to expand    |\r\n|                                      | the data to the correct size for     |\r\n|                                      | dimensions where the field component |\r\n|                                      | is zero. Option 1 will return a      |\r\n|                                      | singleton value of 0 for the field   |\r\n|                                      | component in that dimension, and     |\r\n|                                      | option 2 will return a matrix        |\r\n|                                      | (composed of zeros) that matches the |\r\n|                                      | size of the other field components.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nFor DEVICE,\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getdata()                    | Returns names of all objects with    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getdata(\"monitor\")           | Returns list of of results within    |\r\n|                                      | the simulation object.               |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getdata( \"monitor\",          | Returns list of of data within the   |\r\n| \"result\")                            | simulation object result.            |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getdata( \"monitor\",          | Gets the simulation data.            |\r\n| \"result\", \"dataname\")                |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetresult(), havedata(), getelectric(), getmagnetic(), nonorm(),\r\ncwnorm(), getsweepdata(), getsweepresult()\r\n"}, "getdgtdindex": {"link": "https://kb.lumerical.com/en/ref_scripts_getdgtdindex.html", "text": "Returns the complex refractive index of a material in the Materials\r\nGroup with material fit that will be used in a DGTD simulation.\r\n\r\nMany materials (such as sampled materials) have properties that depend\r\non frequency. Using getdgtdindex, you can specify frequency range, and\r\nthe fitting routine will find a best fit of the material data over that\r\nrange. The refractive index evaluated at the specified frequencies is\r\nthen returned.\r\n\r\nNote that the fit result depends on the fit parameters, Max coefficients\r\nand Tolerance set for the material, thus getdgtdindex result depends on\r\nthose parameters as well. Tips for setting these parameters can be found\r\nat Modifying the material fits.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getdgtdindex(                | Returns the complex index of the     |\r\n| \"materialname\", f, fmin, fmax)       | material with the given name. The    |\r\n|                                      | index is returned for the specified  |\r\n|                                      | frequency f. Similar to getindex,    |\r\n|                                      | but you also specify fmin and fmax,  |\r\n|                                      | the span of frequency of the DGTD    |\r\n|                                      | simulation. All frequency units are  |\r\n|                                      | in Hz.                               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nadddgtdsolver()\r\n"}, "geteigensolver": {"link": "https://kb.lumerical.com/en/ref_scripts_geteigensolver.html", "text": "Mode sources and mode expansion monitors in FDTD Solutions and MODE\r\nSolutions, and ports in FDTD Solutions have embedded eigensolvers. This\r\nscript command makes it possible to get the properties of that\r\neigensolver without using the GUI.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.geteigensolver()             | Returns a list of the properties of  |\r\n|                                      | the embedded eigensolver             |\r\n+--------------------------------------+--------------------------------------+\r\n| o.geteigensolver(\"property\")         | This will get the eigensolver        |\r\n|                                      | properties of the currently selected |\r\n|                                      | objects. The returned value may be a |\r\n|                                      | number or a string, depending on the |\r\n|                                      | property.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddmode(), addmodeexpansion(), addport(), clearsourcedata(),\r\nclearmodedata(), clearportmodedata(), getresult(), seteigensolver(),\r\ngeteigensolver(), updatemodes(), updatesourcemode(), updateportmodes()\r\n"}, "getelectric": {"link": "https://kb.lumerical.com/en/ref_scripts_getelectric.html", "text": "Returns the sum of the amplitude squares for all electric field\r\ncomponents, i.e. it returns \\|Ex\\|2+\\|Ey\\|2+\\|Ez\\|2.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getelectric( \"monitorname\")  | Returns \\|Ex\\|2+\\|Ey\\|2+\\|Ez\\|2 from |\r\n|                                      | the monitor.                         |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getelectric( \"monitorname\",        | The optional argument, option, can   |\r\n| option)                              | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetdata(), getmagnetic(), cwnorm(), nonorm()\r\n"}, "getemeanalysis": {"link": "https://kb.lumerical.com/en/ref_scripts_getemeanalysis.html", "text": "Gets calculation parameters in MODE Solutions' EME analysis window.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getemeanalysis()             | Lists all the parameters in the      |\r\n|                                      | analysis window.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getemeanalysis(\"property\")         | Gets the value of the calculation    |\r\n|                                      | parameter named \"property\" in EME    |\r\n|                                      | solver analysis window.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetemeanalysis()\r\n"}, "getemesweep": {"link": "https://kb.lumerical.com/en/ref_scripts_getemesweep.html", "text": "Gets the user s-matrix result from a propagation sweep or a mode\r\nconvergence sweep.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getemesweep(\"S\")                   | Gets the user s-matrix result from   |\r\n|                                      | an EME propagation sweep named \"S\".  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getemesweep(\"S\\_mode\\_convergence\\ | Gets the user s-matrix result from   |\r\n| _sweep\")                             | an EME mode convergence sweep named  |\r\n|                                      | \"S\\_mode\\_convergence\\_sweep\".       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetemeanalysis(), emesweep()\r\n"}, "getfdtdindex": {"link": "https://kb.lumerical.com/en/ref_scripts_getfdtdindex.html", "text": "Returns the complex refractive index of a material in the database with\r\nmaterial fit that will be used in a simulation in FDTD Solutions.\r\n\r\nMany materials (such as Sampled materials) have properties that depend\r\non frequency. Using getfdtdindex, you can specify frequency range, and\r\nthe fitting routine will find a best fit of the material data over that\r\nrange. The refractive index evaluated at the specified frequencies is\r\nthen returned.\r\n\r\nNote that the fit result depends on the fit parameters, Max coefficients\r\nand Tolerance set for the material, thus getfdtdindex result depends on\r\nthose parameters as well. Tips for setting these parameters can be found\r\nat Modifying the material fits.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getfdtdindex(                | Returns the complex index of the     |\r\n| \"materialname\", f, fmin, fmax)       | material with the given name. The    |\r\n|                                      | index is returned for the specified  |\r\n|                                      | frequency f. Similar to getindex,    |\r\n|                                      | but you also specify fmin and fmax,  |\r\n|                                      | the span of frequency of the FDTD    |\r\n|                                      | simulation. All frequency units are  |\r\n|                                      | in Hz.                               |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getfdtdindex(\"materialname\",       | Optional argument component can be   |\r\n| f,fmin, fmax, component)             | 1, 2 or 3 to specify the x, y or z   |\r\n|                                      | component for anisotropic materials. |\r\n|                                      | The default is 1.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetindex(), getmodeindex(), addmaterial(), setmaterial(),\r\ngetnumericalpermittivity()\r\n"}, "getfdtdsurfaceconductivity": {"link": "https://kb.lumerical.com/en/ref_scripts_getfdtdsurfaceconductivity.html", "text": "For materials which use a surface conductivity material model (such as\r\nGraphene), this function returns the surface conductivity of the\r\nmaterial in the database as it will be used in an actual simulation. For\r\na list of materials which use the surface conductivity model, see\r\nMaterial conductivity models.\r\n\r\nThe conductivity evaluated at the specified frequencies is returned.\r\nNote that the fit result depends on the fit parameters, Max coefficients\r\nand Tolerance set for the material, thus getfdtdsurfaceconductivity\r\nresult depends on those parameters as well.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getfdtdsurfaceconductivity(  | Returns the surface conductivity (in |\r\n| \"materialname\", f, fmin, fmax)       | units of S) of the material with the |\r\n|                                      | given name. The surface conductivity |\r\n|                                      | is returned for the specified        |\r\n|                                      | frequency f. Similar to              |\r\n|                                      | getsurfaceconductivity, but you also |\r\n|                                      | specify fmin and fmax, the span of   |\r\n|                                      | frequency range of the simulation.   |\r\n|                                      | All frequency units are in Hz.       |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getfdtdsurfaceconductivity(\"materi | Optional argument component can be   |\r\n| alname\",                             | 1, 2 or 3 to specify the x, y or z   |\r\n| f,fmin, fmax, component)             | component for anisotropic materials. |\r\n|                                      | The default is 1.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddmaterial(), setmaterial(), getsurfaceconductivity()\r\n"}, "getfield": {"link": "https://kb.lumerical.com/en/ref_scripts_getfield.html", "text": "The script command returns the value of a field from structure input.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| value= o.getfield(input, field)      | Returns the value of a \u2018field\u2019 from  |\r\n|                                      | structure \u2018input\u2019.                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\nisfield(), setfield()\r\n"}, "getglobalmonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_getglobalmonitor.html", "text": "Sets global monitor properties. This command will return an error in\r\nanalysis mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getglobalmonitor()           | Returns a list of the global monitor |\r\n|                                      | properties                           |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getglobalmonitor(\"property\") | Returns the value of the requested   |\r\n|                                      | property.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nget(), setglobalmonitor(), setglobalsource(), getglobalsource()\r\n"}, "getglobalsource": {"link": "https://kb.lumerical.com/en/ref_scripts_getglobalsource.html", "text": "Sets global monitor properties. This command will return an error in\r\nanalysis mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getglobalsource()                  | Returns a list of the global source  |\r\n|                                      | properties                           |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getglobalsource(\"property\")        | Returns the value of the requested   |\r\n|                                      | property.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nget(), setglobalmonitor(), getglobalmonitor(), setglobalsource()\r\n"}, "getindex": {"link": "https://kb.lumerical.com/en/ref_scripts_getindex.html", "text": "Returns the complex refractive index of a material in the material\r\ndatabase. The refractive index at the specified frequency is linearly\r\ninterpolated from the neighboring frequencies where the data is\r\navailable.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getindex(\"materialname\", f)  | Returns the complex index of the     |\r\n|                                      | material with the given name. The    |\r\n|                                      | index is returned for the specified  |\r\n|                                      | frequency f. Frequency f is in Hz.   |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getindex(\"materialname\", f,        | Optional argument component can be   |\r\n| component)                           | 1, 2 or 3 to specify the x, y or z   |\r\n|                                      | component for anisotropic materials. |\r\n|                                      | The default is 1.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetfdtdindex(), getmodeindex(), addmaterial(), setmaterial(),\r\ngetsurfaceconductivity()\r\n"}, "getlayerlist": {"link": "https://kb.lumerical.com/en/ref_scripts_getlayerlist.html", "text": "Returns the list of layers associated with the loaded gds file. There\r\nneeds to be a layer builder object selected, with a gds file loaded.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getlayerlist()                     | Returns the list of layers           |\r\n|                                      | associated with the loaded gds file. |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddlayerbuilder(), getlayerlist(), setlayer(), loadgdsfile(),\r\naddlayer(), getcelllist(), setlayer()\r\n"}, "getmagnetic": {"link": "https://kb.lumerical.com/en/ref_scripts_getmagnetic.html", "text": "Returns the sum of the amplitude squares for all magnetic field\r\ncomponents, i.e. it returns \\|Hx\\|2+\\|Hy\\|2+\\|Hz\\|2.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getmagnetic( \"monitorname\")  | Returns \\|Hx\\|2+\\|Hy\\|2+\\|Hz\\|2 from |\r\n|                                      | the monitor.                         |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getmagnetic( \"monitorname\",        | The optional argument, option, can   |\r\n| option)                              | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetdata(), getelectric(), cwnorm(), nonorm()\r\n"}, "getmaterial": {"link": "https://kb.lumerical.com/en/ref_scripts_getmaterial.html", "text": "Returns properties of a material in the material database.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getmaterial( \"materialname\") | Displays the property names of the   |\r\n|                                      | specified material that can be       |\r\n|                                      | modified.                            |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getmaterial( \"materialname\", | Returns the property named           |\r\n| \"propertyname\")                      | \"propertyname\" of the material with  |\r\n|                                      | the name \"materialname\". The         |\r\n|                                      | returned variable is either a matrix |\r\n|                                      | or a string, depending on the        |\r\n|                                      | property in the query.               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\naddmaterial(), setmaterial(), getindex(), getfdtdindex()\r\n"}, "getmeshcontours": {"link": "https://kb.lumerical.com/en/ref_scripts_getmeshcontours.html", "text": "Gets information about the contours between different domains in an\r\nunstructured (finite-element) dataset.  The dataset must contain the\r\n\"ID\" attribute (a unique identified for each domain in the\r\nfinite-element mesh generated by DEVICE).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| A = o.getmeshcontours(dataset)       | Returns information about the        |\r\n|                                      | contours between different domains   |\r\n|                                      | of the unstructured dataset named    |\r\n|                                      | \"dataset\".  The output is provided   |\r\n|                                      | as a cell array.  Each entry is a    |\r\n|                                      | struct with three fields:            |\r\n|                                      |                                      |\r\n|                                      | ID:  An integer ID that is unique    |\r\n|                                      | for that contour.                    |\r\n|                                      |                                      |\r\n|                                      | adjacent:  Two integers representing |\r\n|                                      | the IDs of the adjacent domains.     |\r\n|                                      |                                      |\r\n|                                      | elements:  For 2D, Nx2 array and for |\r\n|                                      | 3D, Nx3 array of integers that are   |\r\n|                                      | the indexes to the vertices for each |\r\n|                                      | face on the boundary.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nunstructureddataset(), mesh(), getresult()\r\n"}, "getmodeindex": {"link": "https://kb.lumerical.com/en/ref_scripts_getmodeindex.html", "text": "This function returns the material index of a material in the database\r\nas it will be used in an actual MODE simulation.\r\n\r\nMany materials (such as Sampled Materials) have properties that depend\r\non frequency. Using getmodeindex, you can obtain the refractive index as\r\na function of the specified frequency, f, as it will be used in MODE\r\ncalculations.\r\n\r\nNote that the fit result depends on the fit parameters, Max coefficients\r\nand Tolerance set for the material, thus getfdtdindex result depends on\r\nthose parameters as well. Tips for setting these parameters can be found\r\nat Modifying the material fits.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getmodeindex(                | Returns the complex index of the     |\r\n| \"materialname\", f)                   | material with the given name. The    |\r\n|                                      | index is returned for the specified  |\r\n|                                      | frequency f. This result is          |\r\n|                                      | identical to getindex unless the     |\r\n|                                      | optional arguments fitsampled and    |\r\n|                                      | fitanalytic are used. All frequency  |\r\n|                                      | units are in Hz.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getmodeindex(\"materialname\",       | Optional argument component can be   |\r\n| f,component)                         | 1, 2 or 3 to specify the x, y or z   |\r\n|                                      | component for anisotropic materials. |\r\n|                                      | The default is 1.                    |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getmodeindex(\"materialname\",       | Optional arguments to specify if     |\r\n| f,component, fitsampled,             | Sampled Materials or Analytic        |\r\n| fitanalytic, fmin, fmax)             | Materials should be fitted using     |\r\n|                                      | Lumerical's multi-coefficient model  |\r\n|                                      | (MCM), which is commonly used in     |\r\n|                                      | FDTD simulations. If either of these |\r\n|                                      | options are set to 1 (true) then you |\r\n|                                      | must supply a minimum and maximum    |\r\n|                                      | frequency for fitting. The MCM is    |\r\n|                                      | typically used in MODE Solutions for |\r\n|                                      |                                      |\r\n|                                      | \u2022Sampled Materials when calculating  |\r\n|                                      | waveguide dispersion, and for        |\r\n|                                      |                                      |\r\n|                                      | \u2022Analytic Materials only for the     |\r\n|                                      | purpose of using precisely the same  |\r\n|                                      | materials in both FDTD and MODE      |\r\n|                                      | simulations.                         |\r\n|                                      |                                      |\r\n|                                      | The default values are 0 (false) for |\r\n|                                      | fitsampled and fitanalytic.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetindex(), getfdtdindex(), addmaterial(), setmaterial()\r\n"}, "getmonitorframe": {"link": "https://kb.lumerical.com/en/ref_scripts_getmonitorframe.html", "text": "Reads the available frames from an analyzer input port.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| signalIn =                           | For a scripted element, this command |\r\n| o.getmonitorframe(port,start,count)  | reads the available frames from an   |\r\n|                                      | analyzer input port. Analyzer input  |\r\n|                                      | ports store the signal frames in an  |\r\n|                                      | internal buffer. This function       |\r\n|                                      | allows for accessing these frames    |\r\n|                                      | from a starting point \u2018start\u2019 with   |\r\n|                                      | length defined by \u2018count\u2019. Different |\r\n|                                      | from \u2018popportrame\u2019 where header and  |\r\n|                                      | data contains one structure each,    |\r\n|                                      | the data member returned from this   |\r\n|                                      | function is cell containing multiple |\r\n|                                      | data values.                         |\r\n|                                      |                                      |\r\n|                                      | Refer to \u2018popportframe\u2019 for the list |\r\n|                                      | of supported frame types and         |\r\n|                                      | examples.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npopportdata(), pushportdata(), cloneportdata(), portdatasize(),\r\npopportframe(), pushportframe(), getmonitorwaveform()\r\n"}, "getmonitorwaveform": {"link": "https://kb.lumerical.com/en/ref_scripts_getmonitorwaveform.html", "text": "Returns a structure containing a waveform from an analyzer input port.\r\nThis command is specific for building analyzers.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| signalIn =                           | For a scripted element, this command |\r\n| o.getmonitorwaveform(port,domain=\u201dti | returns a structure containing a     |\r\n| me\u201d)                                 | waveform from an analyzer input      |\r\n|                                      | port. Results can be provided in     |\r\n|                                      | \u201ctime\u201d or \u201cfrequency\u2019 domains. This  |\r\n|                                      | command is specific for building     |\r\n|                                      | analyzers.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nImplementation Details\r\n\r\nDigital signal waveform:\r\n\r\nThe waveform contains the signal bitrate and two vectors: the time and\r\namplitude values.\r\n\r\n#digital signal waveform\r\n\r\nbitrate\r\n\r\ntime=matrix;\r\n\r\nvalue=matrix; \r\n\r\nElectrical signal frame:\r\n\r\nThe waveform contains the signal value and its bandwidth. Frequency or\r\ntime domain values are available.\r\n\r\n#electrical signal frame\r\n\r\nbandwidth=struct\r\n\r\nbandwidth.frequency\r\n\r\nbandwidth.sample\\_rate\r\n\r\nbandwidth.time\\_window\r\n\r\nvalue=struct\r\n\r\nvalue.amplitude = matrix\r\n\r\nvalue.frequency = matrix\r\n\r\nOptical signal frame:\r\n\r\nThe waveform contains the signal channel. The signal channel is a cell\r\nwhich contains the bandwidth, value and mode structs.\r\n\r\n#optical signal frame\r\n\r\nsignal=cell\r\n\r\nsignal.channel=cell\r\n\r\nsignal.channel.bandwidth=struct\r\n\r\nsignal.channel.bandwidth.frequency\r\n\r\nsignal.channel.bandwidth.sample\\_rate\r\n\r\nsignal.channel.bandwidth.time\\_window\r\n\r\nsignal.channel.value=struct\r\n\r\nsignal.channel.value.amplitude\r\n\r\nsignal.channel.value.frequency\r\n\r\nsignal.channel.mode=struct\r\n\r\nsignal.channel.mode.label\r\n\r\nsignal.channel.mode.orthogonal\\_identifier\r\n\r\nsignal.channel.mode.uid\r\n\r\nSee Also\r\n\r\npopportdata(), pushportdata(), cloneportdata(), portdatasize(),\r\npopportframe(), pushportframe(), getmonitorframe()\r\n"}, "getname": {"link": "https://kb.lumerical.com/en/ref_scripts_getname.html", "text": "The script command getname is used to get the name of a datset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getname(a)                   | Returns the name of the dataset of   |\r\n|                                      | the variable a.                      |\r\n+--------------------------------------+--------------------------------------+\r\n| print a.o.getname()                  | Returns the name of the dataset of   |\r\n|                                      | the variable a.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetname()\r\n"}, "getnamed": {"link": "https://kb.lumerical.com/en/ref_scripts_getnamed.html", "text": "Gets a property from objects with a given name.\r\n\r\nIf multiple objects are selected, and the values are different, the\r\nsmallest value is returned. To be certain of the results, be sure that\r\nonly one object is selected, or use the form of getnamed that allows a\r\nspecific object to be selected.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getnamed(\"name\")             | Returns a list of the properties of  |\r\n|                                      | the objects called name.             |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getnamed(\"name\", \"property\") | The same as get, but acts on objects |\r\n|                                      | with a specific name, instead of     |\r\n|                                      | selected objects.                    |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.getnamed(\"name\", \"property\",   | Gets the property of the ith named   |\r\n| i)                                   | object. Use this to act on a series  |\r\n|                                      | of objects.                          |\r\n|                                      |                                      |\r\n|                                      | The objects are ordered by their     |\r\n|                                      | location in the object tree. The     |\r\n|                                      | uppermost selected object is given   |\r\n|                                      | the index 1, and the index numbers   |\r\n|                                      | increase as you go down the tree.    |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getnamed(\"groupname::name\",  | The same as get, but acts on objects |\r\n| \"property\")                          | named \"name\" located in the group    |\r\n|                                      | \"groupname\", instead of selected     |\r\n|                                      | objects.                             |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getnamed(\"groupname::name\",  | Gets the property of the ith object  |\r\n| \"property\")                          | named \"name\" located in the group    |\r\n|                                      | \"groupname\". Use this to act on a    |\r\n|                                      | series of objects.                   |\r\n|                                      |                                      |\r\n|                                      | The objects are ordered by their     |\r\n|                                      | location in the object tree. The     |\r\n|                                      | uppermost selected object is given   |\r\n|                                      | the index 1, and the index numbers   |\r\n|                                      | increase as you go down the tree.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nget(), getnumber(), getnamednumber(), set(), setnamed()\r\n"}, "getnamednumber": {"link": "https://kb.lumerical.com/en/ref_scripts_getnamednumber.html", "text": "Gets the number of objects with a given name.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getnamednumber( \"name\")      | The same as getnumber, but acts on   |\r\n|                                      | objects with a specific name,        |\r\n|                                      | instead of selected objects.         |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getnamednumber(              | The same as getnumber, but acts on   |\r\n| \"groupname::name\")                   | all objects named \"name\" in the      |\r\n|                                      | group \"groupname\", instead of        |\r\n|                                      | selected objects.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nget(), getnamed(), getnumber(), set(), setnamed()\r\n"}, "getnumber": {"link": "https://kb.lumerical.com/en/ref_scripts_getnumber.html", "text": "Gets the number of objects that are selected.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getnumber()                  | Returns the number of objects that   |\r\n|                                      | are selected;                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nget(), getnamed(), getnamednumber(), set()\r\n"}, "getnumericalpermittivity": {"link": "https://kb.lumerical.com/en/ref_scripts_getnumericalpermittivity.html", "text": "This advanced function returns the permittivity of a material in the\r\ndatabase as it will be used in an actual FDTD simulation, including the\r\neffects of a finite time step, dt. In FDTD, the relationship between the\r\ndisplacement field, D, and the electric field, E, is given by\r\n\r\nIn the limit where dt tends to zero, we have\r\n\r\nwhere n(\u03c9) is the refractive index returned by the script function\r\ngetfdtdindex, or shown in the Materials Explorer. If you set dt to zero\r\nwhen calling this function, it will return exactly the same result as\r\nthe square of getfdtdindex.\r\n\r\nThe name of the function is a reminder that it returns the numerical\r\npermittivity, i.e., the ratio of D and E, which is different from the\r\nrefractive index, i.e. the ratio of the speed of light in a vacuum to\r\nthe phase velocity of light in the medium. To understand the\r\nrelationship between them, we must consider the full, numerical\r\ndispersion relation between \u03c9 and k, which is given by\r\n\r\n         \r\n\r\nIn the limit where dt, dx, dy and dz tend to zero, it is easy to show\r\nthat we have the expected result\r\n\r\nThe spatial FDTD mesh and time step are generally chosen to obtain a\r\ndesired level of simulation accuracy, essentially by ensuring that the\r\narguments of the sine functions are sufficiently small that sin(x)~x and\r\nthat the simulation is stable. For some materials, it may be desired to\r\nfurther reduce the value of the time step, dt, without modifying the\r\nspatial FDTD mesh, in order to obtain a higher level of accuracy for\r\n\u03b5r(\u03c9,dt). This script function makes it possible to calculate, in\r\nadvance, the value of dt required to obtain the desired accuracy for the\r\npermittivity.\r\n\r\nThe results from getnumericalpermittivity will be different if the\r\nBroadband Fixed Angle Source Technique (BFAST) is used. Since the script\r\nfunction does not require a calculation being performed beforehand, the\r\nuser needs to specify if the computation uses BFAST or not. See the\r\nBFAST page for more details about this technique.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getnumericalpermittivity (   | Returns the complex permittivity of  |\r\n| \"materialname\", f, fmin, fmax, dt)   | the material with the given name.    |\r\n|                                      | The permittivity is returned for the |\r\n|                                      | specified frequency f. This is       |\r\n|                                      | similar to getfdtdindex except for   |\r\n|                                      | the additional parameter dt. All     |\r\n|                                      | frequency units are in Hz.           |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getnumericalpermittivity(\"material | Optional argument component can be   |\r\n| name\",                               | 1, 2 or 3 to specify the x, y or z   |\r\n| f,fmin, fmax, dt, component)         | component for anisotropic materials. |\r\n|                                      | The default is 1.                    |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getnumericalpermittivity(\"material | Optional argument use\\_bfast can be  |\r\n| name\",                               | 0 or 1. It indicates whether the     |\r\n| f,fmin, fmax, dt, component,         | simulation is performed using the    |\r\n| use\\_bfast)                          | Broadband Fixed Angle Source         |\r\n|                                      | Technique (BFAST) or not. The        |\r\n|                                      | default is 0.                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetindex(), addmaterial(), setmaterial(), getfdtdindex()\r\n"}, "getparameter": {"link": "https://kb.lumerical.com/en/ref_scripts_getparameter.html", "text": "Gets a parameter from an existing dataset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getparameter(R)              | Returns the names of all the         |\r\n|                                      | parameters in the dataset R.         |\r\n+--------------------------------------+--------------------------------------+\r\n| Parameter = R.o.getparameter(\"p\")    | Retrieves the parameter p from the   |\r\n|                                      | existing dataset R. The result       |\r\n|                                      | \"Parameter\" is a scalar matrix.      |\r\n|                                      |                                      |\r\n|                                      | See Dataset introduction for details |\r\n|                                      | about dimensions of attribute data.  |\r\n+--------------------------------------+--------------------------------------+\r\n| Parameter = o.getparameter(R,\"p\")    | Retrieves the parameter p from the   |\r\n|                                      | existing dataset R. The result       |\r\n|                                      | \"Parameter\" is a scalar matrix.      |\r\n|                                      |                                      |\r\n|                                      | See Dataset introduction for details |\r\n|                                      | about dimensions of attribute data.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatrixdataset(), rectilineardataset(), getresult(), getattribute(),\r\nvisualize()\r\n"}, "getpath": {"link": "https://kb.lumerical.com/en/ref_scripts_getpath.html", "text": "Gets the current path. By default, the current working directory and the\r\nscript sub-directory of the installation (eg. C:\\\\Program\r\nFiles\\\\Lumerical\\\\FDTD\\\\scripts) are in the path.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getpath()                    | Returns the current path as a        |\r\n|                                      | string.                              |\r\n|                                      |                                      |\r\n|                                      | Use ?getpath; to print it to the     |\r\n|                                      | screen.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddpath(), clearpath(), which(), pwd()\r\n"}, "getperiodicity": {"link": "https://kb.lumerical.com/en/ref_scripts_getperiodicity.html", "text": "Returns the periodicity vector(s) associated with the active periodic\r\nboundary conditions in the specified solver.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getperiodicity(\"solvername\") | Returns the periodicity vector(s) of |\r\n|                                      | the system based on the active       |\r\n|                                      | periodic boundary conditions in the  |\r\n|                                      | named solver. The output is a [3XN]  |\r\n|                                      | matrix where N is the number of      |\r\n|                                      | dimensions that have active periodic |\r\n|                                      | boundary conditions (typically one   |\r\n|                                      | or two).                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| solvername     | required       |                | string         | Name of the    |\r\n|                |                |                |                | solver from    |\r\n|                |                |                |                | which to       |\r\n|                |                |                |                | extract the    |\r\n|                |                |                |                | periodicity    |\r\n|                |                |                |                | vector(s).     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\ngetsourcedirection(), gratingorders(), gratingprojection()\r\n"}, "getports": {"link": "https://kb.lumerical.com/en/ref_scripts_getports.html", "text": "Returns a list of ports available in an element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getports(\"name\")             | Gets a list of available ports.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| name                    | string                  | name of the element.    |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "getposition": {"link": "https://kb.lumerical.com/en/ref_scripts_getposition.html", "text": "Gets the current horizontal or vertical position of an element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.getposition(\"element\",\u201dx\u201d)     | Returns the current horizontal       |\r\n|                                      | position of an element.              |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.getposition(\"element\",\u201dy\u201d)     | Returns the current vertical         |\r\n|                                      | position of an element.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetposition(), getrectangle()\r\n"}, "getrectangle": {"link": "https://kb.lumerical.com/en/ref_scripts_getrectangle.html", "text": "Gets the width or height of an element rectangle.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.getrectangle (\"element\",\u201dw\u201d)   | Returns the width of an element      |\r\n|                                      | rectangle.                           |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.getrectangle (\"element\",\u201dh\u201d)   | Returns the height of an element     |\r\n|                                      | rectangle.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetrectangle(), getposition()\r\n"}, "getremotedata": {"link": "https://kb.lumerical.com/en/ref_scripts_getremotedata.html", "text": "An interoperability command that will get a variable from the server\r\nworkspace into the client workspace via an active session\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| y=o.getremotedata(s,'x')             | Creates variable y in the local      |\r\n|                                      | client workspace that has value of x |\r\n|                                      | in the server workspace via an       |\r\n|                                      | active session s                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nopensession(), closesession(), putremotedata(), evalremote()\r\n"}, "getresult": {"link": "https://kb.lumerical.com/en/ref_scripts_getresult.html", "text": "Get results from simulation objects. Results will be returned as\r\ndatasets.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getresult(\"monitor\\_name\")   | Returns the names of all the results |\r\n|                                      | for the monitor. All the dataset and |\r\n|                                      | scalar matrix results will be        |\r\n|                                      | returned in this case.               |\r\n+--------------------------------------+--------------------------------------+\r\n| R = o.getresult(\"monitor\\_name\",\"T\") | Returns the result T from the        |\r\n|                                      | monitor. T is a dataset.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nhaveresult(), visualize(), getdata(), rectilineardataset(),\r\nmatrixdataset(), getattribute(), addattribute(), splitstring()\r\n"}, "getresultdata": {"link": "https://kb.lumerical.com/en/ref_scripts_getresult2.html", "text": "Gets results from an analyzer. This differs from the \"getresult\"\r\nfunction in that the results are returned as matrices, not Datasets.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getresultdata()              | Returns the names of all elements in |\r\n|                                      | the current simulation that contain  |\r\n|                                      | results.                             |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getresultdata(\"analyzer\")    | Returns all available results for    |\r\n|                                      | \"analyzer\".                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getresultdata(\"analyzer\",    | Returns the result \"result\" for      |\r\n| \"result\")                            | \"analyzer\".                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetresult(), getresult()\r\n"}, "getsetting": {"link": "https://kb.lumerical.com/en/ref_scripts_getsetting.html", "text": "Returns the value of a user defined setting. This command can be used\r\nwith setsetting.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getsetting(\"name\")                 | Gets the value of a user defined     |\r\n|                                      | setting.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| name                    | string                  | name of the setting.    |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\nsetsetting()\r\n"}, "getsolver": {"link": "https://kb.lumerical.com/en/ref_scripts_getsolver.html", "text": "Returns the solver that is currently active.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: 'getsolver' is deprecated, use 'getactivesolver' instead           |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getsolver()                  | Returns the solver that is currently |\r\n|                                      | active.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetactivesolver()\r\n"}, "getsourceangle": {"link": "https://kb.lumerical.com/en/ref_scripts_getsourceangle.html", "text": "Returns the source angle theta as a function of frequency. Broadband\r\nsources inject fields that have a constant in-plane wavevector at all\r\nfrequencies. This implies injection angle must change as a function of\r\nfrequency. The in-plane wavevector is chosen such that the incidence\r\nangle at the center frequency of the simulation (fSIM) will match the\r\nsource angle theta (thetaSIM) specified in the source properties. Higher\r\nfrequencies will be injected at smaller angles, while lower frequencies\r\nwill be injected at larger angles. This 'theta vs wavelength' plot in\r\nthe beam source edit window shows the same function.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| theta = o.getsourceangle(            | Returns the source angle theta       |\r\n| \"sourcename\", f)                     | (degrees) as a function of           |\r\n|                                      | frequency. f is a vector of          |\r\n|                                      | frequencies (Hz).                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcepower()\r\n"}, "getsourcedirection": {"link": "https://kb.lumerical.com/en/ref_scripts_getsourcedirection.html", "text": "Returns a unit vector in the direction of the wave vector (or k-vector)\r\nof the specified source. The unit vector has three elements\r\ncorresponding to the X,Y and Z directions.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Returns a [3x1] matrix with a unit   |\r\n| o.getsourcedirection(\"sourcename\")   | vector in the direction of the       |\r\n|                                      | specified source wave vector.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| sourcename     | required       |                | string         | Name of the    |\r\n|                |                |                |                | source.        |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\ngetperiodicity(), gratingorders(), gratingprojection()\r\n"}, "getsurfaceconductivity": {"link": "https://kb.lumerical.com/en/ref_scripts_getsurfaceconductivity.html", "text": "For materials which use a surface conductivity material model (such as\r\nGraphene), this function returns the complex index of any material that\r\nis in the material database. The surface conductivity at the specified\r\nfrequency is interpolated from the neighboring frequencies where the\r\nconductivity data is available. For a list of materials which use the\r\nsurface conductivity model, see Material conductivity models.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getsurfaceconductivity(      | Returns the surface conductivity (in |\r\n| \"materialname\", f)                   | units of S) of the material with the |\r\n|                                      | given name. The surface conductivity |\r\n|                                      | is returned for the specified        |\r\n|                                      | frequency f where f is in units of   |\r\n|                                      | Hz.                                  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getsurfaceconductivity(            | Optional argument component can be   |\r\n| \"materialname\", f, component)        | 1, 2 or 3 to specify the x, y or z   |\r\n|                                      | component for anisotropic materials. |\r\n|                                      | The default is 1.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddmaterial(), setmaterial(), getfdtdsurfaceconductivity()\r\n"}, "getsweep": {"link": "https://kb.lumerical.com/en/ref_scripts_getsweep.html", "text": "Gets a property from a parameter sweep/optimization/Monte\r\nCarlo/S-parameter sweep item.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.getsweep(\"name\", \"property\\_name\") | Gets a property from a parameter     |\r\n|                                      | sweep/optimization/Monte             |\r\n|                                      | Carlo/S-parameter sweep item.        |\r\n|                                      |                                      |\r\n|                                      | \"name\" is the absolute name of an    |\r\n|                                      | analysis item.                       |\r\n|                                      |                                      |\r\n|                                      | \"property\\_name\" is the property     |\r\n|                                      | showed in the edit window.           |\r\n|                                      |                                      |\r\n|                                      | Returns the value of the property.   |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getsweep(\"name\")             | Lists the properties that are        |\r\n|                                      | available from the analysis item.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndeletesweep(), copysweep(), pastesweep(), addsweep(), insertsweep(),\r\nsetsweep(), addsweepparameter(), addsweepresult(),\r\nremovesweepparameter(), removesweepresult()\r\n"}, "getsweepdata": {"link": "https://kb.lumerical.com/en/ref_scripts_getsweepdata.html", "text": "Gets raw data from a parameter sweep/optimization/Monte Carlo analysis.\r\nIn most cases, it is more convenient to get a complete dataset with\r\ngetsweepresult, rather than getting individual data elements with\r\ngetsweepdata.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getsweepdata()               | Returns names of all sweep,          |\r\n|                                      | optimization, and Monte Carlo        |\r\n|                                      | analysis objects.                    |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getsweepdata(\"sweep\\_name\")  | Returns all the names of the         |\r\n|                                      | available data which is stored in    |\r\n|                                      | the sweep, optimization, or Monte    |\r\n|                                      | Carlo analysis object.               |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getsweepdata(\"sweep\\_name\",  | Returns parameter sweep,             |\r\n| \"data\")                              | optimization, or Monte Carlo         |\r\n|                                      | analysis data.                       |\r\n|                                      |                                      |\r\n|                                      | The following data can be obtained   |\r\n|                                      | from an optimization:                |\r\n|                                      |                                      |\r\n|                                      | \u2022fomTrend - Figure of merit as a     |\r\n|                                      | function of generation               |\r\n|                                      |                                      |\r\n|                                      | \u2022fomHistory - Figure of merit        |\r\n|                                      | history (for each generation there   |\r\n|                                      | will be generation size number)      |\r\n|                                      |                                      |\r\n|                                      | \u2022bestFom - Best figure of merit      |\r\n|                                      | obtained during sweep                |\r\n|                                      |                                      |\r\n|                                      | \u2022bestParameter - Parameter which     |\r\n|                                      | corresponds to bestFom               |\r\n|                                      |                                      |\r\n|                                      | \u2022paramHistory - Parameter history    |\r\n|                                      |                                      |\r\n|                                      | For a parameter sweep and Monte      |\r\n|                                      | Carlo analysis, this command returns |\r\n|                                      | both parameters and results.         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetdata(), runsweep(), havesweepdata(), savedata(), getsweepresult(),\r\nsavesweep(), loadsweep()\r\n"}, "getsweepresult": {"link": "https://kb.lumerical.com/en/ref_scripts_getsweepresult.html", "text": "Gets the parameter parameter sweep/optimization/Monte Carlo/S-parameter\r\nsweep results in the form of a dataset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.getsweepresult()             | Returns names of all sweep,          |\r\n|                                      | optimization, Monte Carlo, and       |\r\n|                                      | S-parameter sweep objects with       |\r\n|                                      | available results.                   |\r\n+--------------------------------------+--------------------------------------+\r\n| print                                | Returns names of the available       |\r\n| o.getsweepresult(\"sweep\\_name\")      | results from the specified sweep,    |\r\n|                                      | optimization,Monte Carlo, or         |\r\n|                                      | S-parameter sweep task.              |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Returns the specified result dataset |\r\n| o.getsweepresult(\"sweep\\_name\",      | from the specified parameter sweep,  |\r\n| \"result\")                            | optimization, Monte Carlo, or        |\r\n|                                      | S-parameter sweep task.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrunsweep(), havesweepresult(), getresult(), savedata(), getsweepdata(),\r\nsavesweep(), loadsweep()\r\n"}, "getvalue": {"link": "https://kb.lumerical.com/en/ref_scripts_getvalue.html", "text": "Gets an internal value for an element's internal \u2018s parameters\u2019.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| value=o.getvalue(\"element\",          | Gets an internal value for an        |\r\n| \"parameter\")                         | element's internal \u2018parameter\u2019.      |\r\n| value=o.getvalue(\"element\",          | Different from \u2018set\u2019 or \u2018getnamed\u2019,  |\r\n| \"parameter\", \"type\")                 | \u2018getvalue\u2019 can have direct access to |\r\n|                                      | internal element parameters. \u2018type\u2019  |\r\n|                                      | allows for variations for a given    |\r\n|                                      | \u2018parameter\u2019.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetvalue()\r\n"}, "getview": {"link": "https://kb.lumerical.com/en/ref_scripts_getview.html", "text": "This command allows the viewing properties of the Layout Editor to be\r\nretrieved.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| outstring = o.getview()              | Returns a list of the view           |\r\n|                                      | properties that can be set. The      |\r\n|                                      | command                              |\r\n|                                      |                                      |\r\n|                                      | ?getview;                            |\r\n|                                      |                                      |\r\n|                                      | will return                          |\r\n|                                      |                                      |\r\n|                                      | extent, zoom, theta, phi             |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.getview(\"property\")          | Returns the current value of any of  |\r\n|                                      | the view properties. For example,    |\r\n|                                      |                                      |\r\n|                                      | zoom\\_level = getview(\"zoom\");       |\r\n|                                      |                                      |\r\n|                                      | will return the current zoom setting |\r\n|                                      | of the perspective view relative to  |\r\n|                                      | the default level.                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetview(), orbit(), redraw()\r\n"}, "global": {"link": "https://kb.lumerical.com/en/ref_scripts_global.html", "text": "The script command returns the value of a global variable specified.\r\nGlobal variables are root element properties.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.global (name)                | Returns the value of a global        |\r\n|                                      | variable.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "grating": {"link": "https://kb.lumerical.com/en/ref_scripts_grating.html", "text": "Returns the fraction of transmitted power to each physical grating\r\norders for a given simulation. Results are normalized such that the sum\r\nof all the orders is equal to 1. To convert these values into fractions\r\nof the source power, multiply by the the transmission script function.\r\n\r\n3D simulations: Data is returned in a NxMxP matrix where N,M are the\r\nnumber of grating orders, and P is the number of frequency points.\r\n\r\n2D simulations: Data is returned in a NxP matrix where N is the number\r\nof grating orders, and P is the number of frequency points.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.grating(\"monitorname\",f,     | Returns the strength of all physical |\r\n| index, direction )                   | grating orders from monitorname.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| monitorname    | required       |                | string         | name of the    |\r\n|                |                |                |                | monitor from   |\r\n|                |                |                |                | which far      |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | optional       | 1              | vector         | Index of the   |\r\n|                |                |                |                | desired        |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point. This    |\r\n|                |                |                |                | can be a       |\r\n|                |                |                |                | single number  |\r\n|                |                |                |                | or a vector.   |\r\n|                |                |                |                |  Multithreaded |\r\n|                |                |                |                | projection to  |\r\n|                |                |                |                | allow multiple |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | points to be   |\r\n|                |                |                |                | calculated     |\r\n|                |                |                |                | simultaneously |\r\n|                |                |                |                | was introduced |\r\n|                |                |                |                | in R2016b.     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | value at       | number         | The index of   |\r\n|                |                | monitor center |                | the material   |\r\n|                |                |                |                | to use for the |\r\n|                |                |                |                | projection.    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| direction      | optional       | direction of   | number         | Direction:     |\r\n|                |                | max power flow |                | this can be +1 |\r\n|                |                |                |                | or -1.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nThe following table summarizes how to interpret the coordinate vector\r\nproperties for various monitor orientations.\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Monitor            | Monitor surface    | 'N', 'ux',         | 'M', 'uy',         |\r\n| orientation        | normal             | 'gratingn',        | 'gratingm',        |\r\n|                    |                    | 'gratingperiod1',  | 'gratingperiod2',  |\r\n|                    |                    | 'gratingu1',       | 'gratingu2',       |\r\n|                    |                    | 'gratingbloch1',   | 'gratingbloch2'    |\r\n|                    |                    | correspond to      | correspond to      |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| XY plane           | Z                  | x axis             | y axis             |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| XZ plane           | Y                  | x axis             | z axis             |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| YZ plane           | X                  | y axis             | z axis             |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\ngratingn(), gratingperiod1(), gratingbloch1(), gratingu1(),\r\ngratingangle(), gratingpolar(), gratingvector()\r\n"}, "gratingangle": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingangle.html", "text": "Returns the angle vector corresponding to the values returned by\r\ngrating, in degrees, for 2D simulations. For 3D simulations, use\r\ngratingu1 and gratingu2.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingangle( \"monitorname\", | Same arguments as grating function.  |\r\n| ...)                                 |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingu1(), gratingu2()\r\n"}, "gratingbloch1": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingbloch1.html", "text": "Returns the bloch vector (kin\\_1 and kin\\_2) used in the grating\r\ncalculation. This corresponds to the bloch vector setting in the\r\nsimulation region. gratingbloch1 gives the bloch vector for the first\r\ndimension (2D and 3D). gratingbloch2 gives the bloch vector for the 2nd\r\ndimension (3D only). See the grating function documentation for\r\ninformation on interpreting N, M, ux, uy for various monitor\r\norientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingbloch1(               | Same arguments as grating function.  |\r\n| \"monitorname\", ...)                  |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingbloch2()\r\n"}, "gratingbloch2": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingbloch2.html", "text": "Returns the bloch vector (kin\\_1 and kin\\_2) used in the grating\r\ncalculation. This corresponds to the bloch vector setting in the\r\nsimulation region. gratingbloch1 gives the bloch vector for the first\r\ndimension (2D and 3D). gratingbloch2 gives the bloch vector for the 2nd\r\ndimension (3D only). See the grating function documentation for\r\ninformation on interpreting N, M, ux, uy for various monitor\r\norientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingbloch2(               | Same arguments as grating function.  |\r\n| \"monitorname\", ...)                  |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingbloch1()\r\n"}, "gratingm": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingm.html", "text": "Returns a vector of the grating order numbers (i.e. zeroeth order, first\r\norder) corresponding to the data from the grating function. gratingn\r\ngives the order numbers for the first dimension of the data (2D and 3D).\r\ngratingm gives the order numbers for the 2nd dimension (3D only). See\r\nthe grating function documentation for information on interpreting N, M,\r\nux, uy for various monitor orientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingm( \"monitorname\",...) | Same arguments as grating function.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingn()\r\n"}, "gratingn": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingn.html", "text": "Returns a vector of the grating order numbers (i.e. zeroeth order, first\r\norder) corresponding to the data from the grating function. gratingn\r\ngives the order numbers for the first dimension of the data (2D and 3D).\r\ngratingm gives the order numbers for the 2nd dimension (3D only). See\r\nthe grating function documentation for information on interpreting N, M,\r\nux, uy for various monitor orientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingn( \"monitorname\",...) | Same arguments as grating function.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingm()\r\n"}, "gratingordercount": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingordercount.html", "text": "Returns the total number of supported grating numbers.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingordercount(           | Returns the total number of          |\r\n| \"monitorname\", f, index, direction)  | supported grating orders. Same       |\r\n|                                      | arguments as grating script command. |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingn(), gratingm()\r\n"}, "gratingorders": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingorders.html", "text": "Returns a matrix data set with the propagating grating orders, a unit\r\nvector in the direction of the wave vector (or k-vector) of each order,\r\nand the grating angles. The grating orders are the same as those used by\r\nthe gratingprojection command to perform a projection.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingorders(period,        | Returns a matrix data set with the   |\r\n| source, frequency, index)            | propagating grating orders (integers |\r\n|                                      | n and m), a unit vector in the       |\r\n|                                      | direction of the k-vector of each    |\r\n|                                      | order (call them u(n,m)) and their   |\r\n|                                      | corresponding angles (theta and      |\r\n|                                      | phi). The parameters of the data set |\r\n|                                      | are n,m and frequency. Indexes n and |\r\n|                                      | m correspond to the first and second |\r\n|                                      | periodicity directions specified by  |\r\n|                                      | the input periodicity vectors. The   |\r\n|                                      | attributes of the data set are the   |\r\n|                                      | unit vectors u(n,m) and their        |\r\n|                                      | corresponding angles (theta and      |\r\n|                                      | phi). The grating angles are defined |\r\n|                                      | with respect to the normal incidence |\r\n|                                      | direction of the source (call it the |\r\n|                                      | n-axis). The first angle (theta) is  |\r\n|                                      | an elevation from the n-axis and the |\r\n|                                      | and the second angle (phi) is a      |\r\n|                                      | rotation around the n-axis starting  |\r\n|                                      | from the first periodicity vector.   |\r\n|                                      | Angle phi is only returned when two  |\r\n|                                      | periodicity vectors are specified.   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| period         | required       |                | vector         | [3x1] or [3x2] |\r\n|                |                |                |                | matrix with    |\r\n|                |                |                |                | the            |\r\n|                |                |                |                | periodicity    |\r\n|                |                |                |                | vectors. These |\r\n|                |                |                |                | are typically  |\r\n|                |                |                |                | retrieved      |\r\n|                |                |                |                | using the      |\r\n|                |                |                |                | getperiodicity |\r\n|                |                |                |                | command.       |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| source         | required       |                | vector         | [3x1] vector   |\r\n|                |                |                |                | with the       |\r\n|                |                |                |                | normalized     |\r\n|                |                |                |                | source         |\r\n|                |                |                |                | k-vector. This |\r\n|                |                |                |                | is typically   |\r\n|                |                |                |                | retrieved      |\r\n|                |                |                |                | using the      |\r\n|                |                |                |                | getsourcedirec |\r\n|                |                |                |                | tion           |\r\n|                |                |                |                | command.       |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| frequency      | required       |                | vector         | Vector of      |\r\n|                |                |                |                | frequencies    |\r\n|                |                |                |                | (in Hz).       |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | 1.0            | number or      | Refractive     |\r\n|                |                |                | vector         | index of the   |\r\n|                |                |                |                | background     |\r\n|                |                |                |                | medium         |\r\n|                |                |                |                | (typically the |\r\n|                |                |                |                | substrate or   |\r\n|                |                |                |                | superstrate).  |\r\n|                |                |                |                | It can be a    |\r\n|                |                |                |                | scalar or a    |\r\n|                |                |                |                | vector of the  |\r\n|                |                |                |                | same size as   |\r\n|                |                |                |                | the frequency  |\r\n|                |                |                |                | vector.        |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\ngetperiodicity(), getsourcedirection(), gratingprojection()\r\n"}, "gratingperiod1": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingperiod1.html", "text": "Returns the grating period (i.e. the simulation span) used in the\r\ngrating calculations. gratingperiod1 gives the grating period for the\r\nfirst dimension (2D and 3D). gratingperiod2 gives the period of the 2nd\r\ndimension (3D only). See the grating function documentation for\r\ninformation on interpreting N, M, ux, uy for various monitor\r\norientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingperiod1(              | Same arguments as grating function.  |\r\n| \"monitorname\", ...)                  |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingperiod2()\r\n"}, "gratingperiod2": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingperiod2.html", "text": "Returns the grating period (i.e. the simulation span) used in the\r\ngrating calculations. gratingperiod1 gives the grating period for the\r\nfirst dimension (2D and 3D). gratingperiod2 gives the period of the 2nd\r\ndimension (3D only). See the grating function documentation for\r\ninformation on interpreting N, M, ux, uy for various monitor\r\norientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingperiod2(              | Same arguments as grating function.  |\r\n| \"monitorname\", ...)                  |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingperiod1()\r\n"}, "gratingpolar": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingpolar.html", "text": "Returns the relative strength of all physical grating orders where\r\nvector field information is returned in spherical coordinates. This is\r\nuseful when studying the polarization effects. The data is normalized\r\nsuch that the sum of \\|Er\\|^2+\\|Etheta\\|^2+ \\|Ephi\\|^2 over all grating\r\norders equals 1. See the grating function documentation for information\r\non interpreting N, M, ux, uy for various monitor orientations.\r\n\r\n3D simulations: Data is returned in a NxMxPx3 matrix where N,M are the\r\nnumber of grating orders. P is the number of frequency points. The third\r\ndimension is Er, Etheta, Ephi.\r\n\r\n2D simulations: Data is returned in a NxPx3 matrix where N is the number\r\nof grating orders. P is the number of frequency points. The second\r\ndimension is Er, Etheta, Ephi.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingpolar( \"mname\", f,    | Returns the strength of all physical |\r\n| index, direction)                    | grating orders from the monitor.     |\r\n|                                      | Output is in spherical coordinates.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| mname          | required       |                | string         | name of the    |\r\n|                |                |                |                | monitor from   |\r\n|                |                |                |                | which far      |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | optional       | 1              | vector         | Index of the   |\r\n|                |                |                |                | desired        |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point. This    |\r\n|                |                |                |                | acan be a      |\r\n|                |                |                |                | single number  |\r\n|                |                |                |                | of a vector.   |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | value at       | number         | The index of   |\r\n|                |                | monitor center |                | the material   |\r\n|                |                |                |                | to use for the |\r\n|                |                |                |                | projection.    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| direction      | optional       | direction of   | number         | Direction:     |\r\n|                |                | max power flow |                | this can be +1 |\r\n|                |                |                |                | or -1.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingn(), gratingperiod1(), gratingbloch1(), gratingu1(),\r\ngratingangle(), gratingvector()\r\n"}, "gratingprojection": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingprojection.html", "text": "Takes the near fields from a frequency domain monitor together with the\r\nperiodicity vectors of the system, the source wave vector and the\r\nbackground refractive index and performs a far field projection to\r\ndetermine the relative power in each propagating grating order.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingprojection(nearfield, | Returns a matrix data set with all   |\r\n| period, source, index)               | the projection results. The          |\r\n|                                      | parameters of the data set are the   |\r\n|                                      | grating orders (integers n and m)    |\r\n|                                      | and frequency. Indexes n and m       |\r\n|                                      | correspond to the first and second   |\r\n|                                      | periodicity directions specified by  |\r\n|                                      | the input periodicity vectors. The   |\r\n|                                      | attributes of the data set are the   |\r\n|                                      | same as those returned by the        |\r\n|                                      | gratingorders command with the       |\r\n|                                      | addition of the relative power into  |\r\n|                                      | each propagating grating order       |\r\n|                                      | (called projection). The projection  |\r\n|                                      | result is normalized so that its sum |\r\n|                                      | over all grating orders is always    |\r\n|                                      | equal to one. The frequency          |\r\n|                                      | parameter is the same as that of the |\r\n|                                      | input field data.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| nearfield      | required       |                | unstructured   | Field data     |\r\n|                |                |                | data set       | from a         |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | domain         |\r\n|                |                |                |                | monitor.       |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| period         | required       |                | vector         | Periodicity    |\r\n|                |                |                |                | vector(s) as   |\r\n|                |                |                |                | returned by    |\r\n|                |                |                |                | the            |\r\n|                |                |                |                | getperiodicity |\r\n|                |                |                |                | command.       |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| source         | required       |                | vector         | Source unit    |\r\n|                |                |                |                | wave vector as |\r\n|                |                |                |                | returned by    |\r\n|                |                |                |                | the            |\r\n|                |                |                |                | getsourcedirec |\r\n|                |                |                |                | tion           |\r\n|                |                |                |                | command.       |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | 1.0            | number or      | Refractive     |\r\n|                |                |                | vector         | index of the   |\r\n|                |                |                |                | background     |\r\n|                |                |                |                | medium         |\r\n|                |                |                |                | (typically the |\r\n|                |                |                |                | substrate or   |\r\n|                |                |                |                | superstrate).  |\r\n|                |                |                |                | It can be a    |\r\n|                |                |                |                | scalar or a    |\r\n|                |                |                |                | vector of the  |\r\n|                |                |                |                | same size as   |\r\n|                |                |                |                | the frequency  |\r\n|                |                |                |                | vector.        |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\ngetperiodicity(), getsourcedirection(), gratingorders()\r\n"}, "gratingu1": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingu1.html", "text": "Returns the grating order direction unit vectors (u1 and u2)\r\ncorresponding to the data from the grating function from 3D simulation.\r\nFor 2D simulations, use the gratingangle function. See the grating\r\nfunction documentation for information on interpreting N, M, ux, uy for\r\nvarious monitor orientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingu1( \"monitorname\",    | Same arguments as grating function.  |\r\n| ...)                                 |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingu2(), gratingangle()\r\n"}, "gratingu2": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingu2.html", "text": "Returns the grating order direction unit vectors (u1 and u2)\r\ncorresponding to the data from the grating function from 3D simulation.\r\nFor 2D simulations, use the gratingangle function. See the grating\r\nfunction documentation for information on interpreting N, M, ux, uy for\r\nvarious monitor orientations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingu2( \"monitorname\",    | Same arguments as grating function.  |\r\n| ...)                                 |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingu1(), gratingangle()\r\n"}, "gratingvector": {"link": "https://kb.lumerical.com/en/ref_scripts_gratingvector.html", "text": "Returns the relative strength of all physical grating orders where\r\nvector field information is returned in Cartesian coordinates. This is\r\nuseful when studying the polarization effects. The data is normalized\r\nsuch that the sum of \\|Ex\\|^2+\\|Ey\\|^2+ \\|Ez\\|^2 over all grating orders\r\nequals 1. See the grating function documentation for information on\r\ninterpreting N, M, ux, uy for various monitor orientations.\r\n\r\n3D simulations: Data is returned in a NxMxPx3 matrix where N,M are the\r\nnumber of grating orders. P is the number of frequency points. The third\r\ndimension is Ex, Ey, Ez.\r\n\r\n2D simulations: Data is returned in a NxPx3 matrix where N is the number\r\nof grating orders. P is the number of frequency points. The second\r\ndimension is Ex, Ey, Ez.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.gratingvector( \"mname\", f,   | Returns the strength of all physical |\r\n| index, direction)                    | grating orders from monitorname.     |\r\n|                                      | Output is in Cartesian coordinates.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| mname          | required       |                | string         | name of the    |\r\n|                |                |                |                | monitor from   |\r\n|                |                |                |                | which far      |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | calculated     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | optional       | 1              | vector         | Index of the   |\r\n|                |                |                |                | desired        |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | point. This    |\r\n|                |                |                |                | can be a       |\r\n|                |                |                |                | single number  |\r\n|                |                |                |                | or a vector.   |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| index          | optional       | value at       | number         | The index of   |\r\n|                |                | monitor center |                | the material   |\r\n|                |                |                |                | to use for the |\r\n|                |                |                |                | projection.    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| direction      | optional       | direction of   | number         | Direction:     |\r\n|                |                | max power flow |                | this can be +1 |\r\n|                |                |                |                | or -1.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\ngrating(), gratingn(), gratingperiod1(), gratingbloch1(), gratingu1(),\r\ngratingangle(), gratingpolar()\r\n"}, "groupscope": {"link": "https://kb.lumerical.com/en/ref_scripts_groupscope.html", "text": "Changes the group scope. Script commands that add or modify simulation\r\nobject use the groupscope property to know where to act within the\r\nobject tree. For example, if you want to delete everything within a\r\nparticular group, set the groupscope to that group (i.e.\r\n::model::my\\_group). If you want to delete all objects in the\r\nsimulation, set the group scope the root level (i.e. ::model).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.groupscope()                 | returns the current group scope      |\r\n+--------------------------------------+--------------------------------------+\r\n| o.groupscope(\"group\\_name\")          | changes the group scope              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndelete(), selectall(), select()\r\n"}, "h5info": {"link": "https://kb.lumerical.com/en/ref_scripts_h5info.html", "text": "Returns information about the structure of an HDF5 file.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| info = o.h5info(\"filename\")          | Returns a struct \"info\" that         |\r\n|                                      | contains information about the       |\r\n|                                      | structure of the HDF5 file named     |\r\n|                                      | \"filename.\"                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| filename                | string                  | name of the HDF5 file.  |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\nh5read(), h5readattr()\r\n"}, "h5read": {"link": "https://kb.lumerical.com/en/ref_scripts_h5read.html", "text": "Reads data from an HDF5 file. The command supports a large number of\r\ndataset types such as integer, float, double, string, compound, etc.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| data = o.h5read(\"filename\",          | Reads data in the dataset named      |\r\n| \"dataset\\_name\")                     | \"dataset\\_name\" within the HDF5 file |\r\n|                                      | named \"filename.\"                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| filename                | string                  | name of the HDF5 file.  |\r\n+-------------------------+-------------------------+-------------------------+\r\n| datasetname             | string                  | name (path) of the      |\r\n|                         |                         | dataset to be read.     |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\nh5info(), h5readattr()\r\n"}, "h5readattr": {"link": "https://kb.lumerical.com/en/ref_scripts_h5readattr.html", "text": "Reads attributes from an HDF5 file.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| attr = o.h5readattr(\"filename\",      | Reads the attribute named            |\r\n| \"attr\\_path\", \"attr\\_name\")          | \"attr\\_name\" at the location         |\r\n|                                      | \"attr\\_path\" within the HDF5 file    |\r\n|                                      | named \"filename.\"                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| filename                | string                  | name of the HDF5 file.  |\r\n+-------------------------+-------------------------+-------------------------+\r\n| attr\\_path              | string                  | name (path) of the      |\r\n|                         |                         | dataset or group to     |\r\n|                         |                         | which the attribute     |\r\n|                         |                         | belongs to.             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| attr\\_name              | string                  | name of the attribute   |\r\n|                         |                         | to be read.             |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\nh5info(), h5read()\r\n"}, "havedata": {"link": "https://kb.lumerical.com/en/ref_scripts_havedata.html", "text": "Used to see a simulation object (such as a monitor) has any data. This\r\ncommand is very similar to haveresult, but is intended to be used with\r\nthe getdata command, rather than getresult.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.havedata()                         | Returns 1 if any simulation objects  |\r\n|                                      | have raw data, and 0 if none have    |\r\n|                                      | any raw data.                        |\r\n+--------------------------------------+--------------------------------------+\r\n| o.havedata(\"name\")                   | Returns 1 if \"name\" has raw data,    |\r\n|                                      | and 0 if it does not have any raw    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.havedata(\"name\",\"data\")            | Returns 1 if \"name\" has the raw data |\r\n|                                      | named \"data\", and 0 if it does not   |\r\n|                                      | have that data.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetdata(), haveresult(), getresult(), copydcard(), cleardcard(),\r\nworkspace(), havesweepdata()\r\n"}, "haveproperty": {"link": "https://kb.lumerical.com/en/ref_scripts_haveproperty.html", "text": "Returns the number of selected objects with a particular property.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.haveproperty(\"property\")     | Returns the number of selected       |\r\n|                                      | objects with the specified property. |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nget(), set()\r\n"}, "haveresult": {"link": "https://kb.lumerical.com/en/ref_scripts_haveresult.html", "text": "Used to see a simulation object (such as a monitor) has any results.\r\n\r\nNote: This command is very similar to havedata, but is intended to be\r\nused with the getresult command, rather than getdata.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.haveresult()                       | Returns 1 if any simulation objects  |\r\n|                                      | currently have any results.          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.haveresult(\"name\")                 | Returns 1 if \"name\" has any results, |\r\n|                                      | and 0 if it does not.                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.haveresult(\"name\",\"data\")          | Returns 1 if the \"name\" has a result |\r\n|                                      | named \"data\", and 0 if it does not.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetresult(), havedata(), getdata(), copydcard(), cleardcard(),\r\nworkspace(), havesweepdata()\r\n"}, "havesweepdata": {"link": "https://kb.lumerical.com/en/ref_scripts_havesweepdata.html", "text": "Checks whether a parameter sweep/optimization/Monte Carlo analysis has\r\ndata. Similar to the script command havedata.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.havesweepdata()              | Returns 1 if any sweeps,             |\r\n|                                      | optimizations or Monte Carlo         |\r\n|                                      | analysis have data. Returns 0 if     |\r\n|                                      | data is not available.               |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.havesweepdata(\"name\")        | Returns 1 if the specified sweep,    |\r\n|                                      | optimization or Monte Carlo analysis |\r\n|                                      | has data.                            |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.havesweepdata(\"name\",\"data\") | Returns 1 if the specified sweep,    |\r\n|                                      | optimization or Monte Carlo analysis |\r\n|                                      | named \"name\" has the specified data  |\r\n|                                      | \"data\".                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrunsweep(), getsweepdata(), getdata(), havedata()\r\n"}, "havesweepresult": {"link": "https://kb.lumerical.com/en/ref_scripts_havesweepresult.html", "text": "Checks whether a parameter parameter sweep/optimization/Monte\r\nCarlo/S-parameter sweep has results. Similar to haveresult.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.havesweepresult()            | Returns 1 if any sweeps or           |\r\n|                                      | optimizations, Monte Carlo analysis, |\r\n|                                      | or S-parameter sweeps have results.  |\r\n|                                      | Returns 0 if data is not available.  |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.havesweepresult(\"name\")      | Returns 1 if the specified sweep,    |\r\n|                                      | optimization, Monte Carlo, or        |\r\n|                                      | S-parameter sweep has results.       |\r\n+--------------------------------------+--------------------------------------+\r\n| print                                | Returns 1 if the sweep,              |\r\n| o.havesweepresult(\"name\",\"data\")     | optimization, Monte Carlo, or        |\r\n|                                      | S-parameter sweep named \"name\" has   |\r\n|                                      | the specified result \"data\".         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrunsweep(), getsweepresult(), getresult(), haveresult()\r\n"}, "help": {"link": "https://kb.lumerical.com/en/ref_scripts_help.html", "text": "Opens the Lumerical Knowledge Base using the default web browser.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.help(argument=\u201d\u201d)                  | Opens the Lumerical knowledge base   |\r\n|                                      | using the default web browser. If no |\r\n|                                      | arguments are provided the web       |\r\n|                                      | browser will open the page with the  |\r\n|                                      | alphabetical list of all script      |\r\n|                                      | commands, otherwise it will run a    |\r\n|                                      | search using the \u2018argument\u2019          |\r\n|                                      | parameter and open the page with the |\r\n|                                      | search results for the \u2018argument\u2019    |\r\n|                                      | parameter.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "hide": {"link": "https://kb.lumerical.com/en/ref_scripts_hide.html", "text": "Hides the graphical user interface, can be used with the show command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.hide()                             | hides the GUI.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nshow()\r\n"}, "hidecategory": {"link": "https://kb.lumerical.com/en/ref_scripts_hidecategory.html", "text": "Hides all properties of a given \u2018category' of a given \u2018element\u2019.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.hidecategory(element,category, | Hides all properties of a given      |\r\n| hide)                                | \u2018category' of a given \u2018element\u2019. The |\r\n|                                      | argument 'hide' is a boolean value.  |\r\n|                                      | If \u2018hide\u2019 is true the category is    |\r\n|                                      | invisible, if 'hide' is false the    |\r\n|                                      | category is visible. The default     |\r\n|                                      | value of \u2018hide\u2019 is true.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nhideproperty(), annotateproperty(), ispropertyactive()\r\n"}, "hideproperty": {"link": "https://kb.lumerical.com/en/ref_scripts_hideproperty.html", "text": "Hides the \u2018property\u2019 of a given \u2018element\u2019.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.hideproperty                   | Hides the \u2018property\u2019 of a given      |\r\n| (element,property,hide)              | \u2018element\u2019. The argument 'hide' is a  |\r\n|                                      | boolean value. If \u2018hide\u2019 is true the |\r\n|                                      | property is invisible, if 'hide' is  |\r\n|                                      | false the property is visible. The   |\r\n|                                      | default value of \u2018hide' is true.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nhidecategory(), annotateproperty(), ispropertyactive()\r\n"}, "histc": {"link": "https://kb.lumerical.com/en/ref_scripts_histc.html", "text": "Creates a histogram plot.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.histc(y)                     | Creates a histogram plot of y.       |\r\n|                                      |                                      |\r\n|                                      | Returns the figure number.           |\r\n+--------------------------------------+--------------------------------------+\r\n| o.histc(y,n)                         | Creates a histogram plot of y, using |\r\n|                                      | n bins.                              |\r\n|                                      |                                      |\r\n|                                      | Returns the figure number.           |\r\n+--------------------------------------+--------------------------------------+\r\n| o.histc (y,n, \"x label\", \"y label\",  | Creates a histogram plot of y, using |\r\n| \"title\")                             | n bins, with axis labels and a       |\r\n|                                      | title.                               |\r\n|                                      |                                      |\r\n|                                      | Returns the figure number.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nhistogram(), legend(), plot(), closeall(), visualize()\r\n"}, "histogram": {"link": "https://kb.lumerical.com/en/ref_scripts_histogram.html", "text": "Create a matrix containing the histogram count of a yield analysis\r\nresult.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.histogram(y)                 | Returns a matrix containing the      |\r\n|                                      | histogram count of y.                |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.histogram(y,n)               | Returns a matrix containing the      |\r\n|                                      | histogram count of y, using n bins.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nhistc()\r\n"}, "historyoff": {"link": "https://kb.lumerical.com/en/ref_scripts_historyoff.html", "text": "Disables taking snapshots (history) of the current schematic for undo\r\nredo functionality.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.historyoff()                       | Disables taking snapshots (history)  |\r\n|                                      | of the current schematic for undo    |\r\n|                                      | redo functionality, when running     |\r\n|                                      | co-simulation this will increase     |\r\n|                                      | simulation performance.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nundo(), redo(), historyon()\r\n"}, "historyon": {"link": "https://kb.lumerical.com/en/ref_scripts_historyon.html", "text": "Enables taking snapshots (history) for the current schematic for undo\r\nredo functionality.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.historyon()                        | Enables taking snapshots (history)   |\r\n|                                      | for the current schematic for undo   |\r\n|                                      | redo functionality.                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nundo(), redo(), historyoff()\r\n"}, "holdoff": {"link": "https://kb.lumerical.com/en/ref_scripts_holdoff.html", "text": "Switches off the holdon mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.holdoff()                          | Switches off the mode to hold        |\r\n|                                      | multiple mathematical functions on   |\r\n|                                      | the same figure.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplot(), holdon()\r\n"}, "holdon": {"link": "https://kb.lumerical.com/en/ref_scripts_holdon.html", "text": "Holds multiple functions on a single plot. Note that, only the labeling\r\nand plot options of the first plot are taken into account; a warning is\r\nreported in this case. The command setplot can be used instead.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.holdon()                           | Switches on the mode to hold         |\r\n|                                      | multiple mathematical functions on   |\r\n|                                      | the same figure.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplot(), plotxy(), legend(), setplot(), log(), log10(), holdoff()\r\n"}, "icht": {"link": "https://kb.lumerical.com/en/ref_scripts_icht.html", "text": "Takes the Chebyshev interpolation coefficients and returns the\r\ncorresponding function samples.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.icht(coeff,option)             | Returns function samples from        |\r\n|                                      | Chebyshev interpolation coefficients |\r\n|                                      | coeff.                               |\r\n|                                      |                                      |\r\n|                                      | Option:                              |\r\n|                                      |                                      |\r\n|                                      | If option=1 is selected, the vector  |\r\n|                                      | x will not include the endpoints     |\r\n|                                      |                                      |\r\n|                                      | If option=2 is selected, the vector  |\r\n|                                      | x will include the endpoints         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndcht(), chpts(), chebin()\r\n"}, "if": {"link": "https://kb.lumerical.com/en/ref_scripts_if.html", "text": "Starts an if statement. The scripting language supports if statements in\r\nthe following forms:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.if(x < 5) { y = x^2; }             | Simple if statement on one line.     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.if(x < 5) { y = x^2; }             | Multi-line if statement              |\r\n+--------------------------------------+--------------------------------------+\r\n| o.if(x < 5) { y = x^2; } else { y =  | If else statement.                   |\r\n| x^3; }                               |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n| o.if(x < 5) { o.if(x > 0) {y = x^2;} | Nested if statement with else.       |\r\n| } else { y = x^3; }                  |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n| o.if(x < 5) { y = x^2; } else o.if ( | Chained if else if statement.        |\r\n| x > 10 ) { y = 2\\*x; }               |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfor(), almostequal()\r\n"}, "imag": {"link": "https://kb.lumerical.com/en/ref_scripts_imag.html", "text": "Returns the imaginary part of a number or matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.imag(x)                      | Returns the imaginary part of x.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nreal(), conj()\r\n"}, "image": {"link": "https://kb.lumerical.com/en/ref_scripts_image.html", "text": "Creates 2D image plots.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.image(x,y,z)                 | Creates a 2D image plot of the data  |\r\n|                                      | in z. If x is of dimension N x 1 and |\r\n|                                      | y is of dimension M x 1, then z must |\r\n|                                      | be of dimension N x M. The figure    |\r\n|                                      | number is returned.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.image(x,y,z, \"x label\", \"y label\", | Creates a 2D image plot with axis    |\r\n| \"title\")                             | labels and a title. The figure       |\r\n|                                      | number is returned.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.image(x,y,z, \"x label\", \"y label\", | Creates a 2D image plot with axis    |\r\n| \"title\", \"options\")                  | labels and options, options can be   |\r\n|                                      |                                      |\r\n|                                      | \u2022logplot                             |\r\n|                                      |                                      |\r\n|                                      | \u2022polar                               |\r\n|                                      |                                      |\r\n|                                      | \u2022red2blue                            |\r\n|                                      |                                      |\r\n|                                      | \u2022any comma separated list of the     |\r\n|                                      | above                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplot(), closeall(), setplot(), exportfigure(), visualize(),\r\npolarimage(), vectorplot()\r\n"}, "importbinary": {"link": "https://kb.lumerical.com/en/ref_scripts_importbinary.html", "text": "Import binary data (1s and 0s) over an entire volume from a file. The\r\nobject will be present wherever the binary data is 1 and not when it is\r\n0. This command only applies to import primitives. The function returns\r\n1 if the data is successfully imported. Example script files showing how\r\nto use these functions can be found in the Online Help. See the User\r\nGuide, Structures section.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Import binary data from filename in  |\r\n| o.importbinary(filename,file\\_units, | three dimensional simulations. All   |\r\n| x0,y0,z0,reverse\\_index\\_order)      | arguments after the filename are     |\r\n|                                      | optional.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          | Default value      | Type               | Description        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| filename           | required           | string             | name of the file   |\r\n|                    |                    |                    | with binary data   |\r\n|                    |                    |                    | to import. May     |\r\n|                    |                    |                    | contain complete   |\r\n|                    |                    |                    | path to file, or   |\r\n|                    |                    |                    | path relative to   |\r\n|                    |                    |                    | current working    |\r\n|                    |                    |                    | directory          |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| file\\_units        | \"m\"                | string             | The optional       |\r\n|                    |                    |                    | string argument    |\r\n|                    |                    |                    | file\\_units can be |\r\n|                    |                    |                    | \"m\", \"cm, \"mm\",    |\r\n|                    |                    |                    | \"microns\" or \"nm\"  |\r\n|                    |                    |                    | to specify the     |\r\n|                    |                    |                    | units in the file. |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| x0                 | 0                  | number             | The optional       |\r\n|                    |                    |                    | arguments x0, y0   |\r\n|                    |                    |                    | and z0 specify the |\r\n|                    |                    |                    | data origin in the |\r\n|                    |                    |                    | global coordinates |\r\n|                    |                    |                    | of the Graphical   |\r\n|                    |                    |                    | Layout Editor. For |\r\n|                    |                    |                    | example, if you    |\r\n|                    |                    |                    | defined your       |\r\n|                    |                    |                    | volume with        |\r\n|                    |                    |                    | respect to a       |\r\n|                    |                    |                    | particular point   |\r\n|                    |                    |                    | in space, for      |\r\n|                    |                    |                    | example (0,0,-5)   |\r\n|                    |                    |                    | microns, then you  |\r\n|                    |                    |                    | should set z0 to   |\r\n|                    |                    |                    | -5 microns.        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| y0                 | 0                  | number             |                    |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| z0                 | 0                  | number             |                    |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| reverse\\_index\\_or | 0                  | number             | The optional       |\r\n| der                |                    |                    | argument           |\r\n|                    |                    |                    | reverse\\_index\\_or |\r\n|                    |                    |                    | der                |\r\n|                    |                    |                    | can be set to 1 to |\r\n|                    |                    |                    | reverse how the    |\r\n|                    |                    |                    | indices are        |\r\n|                    |                    |                    | interpreted in the |\r\n|                    |                    |                    | file. It is best   |\r\n|                    |                    |                    | to verify the      |\r\n|                    |                    |                    | correct setting    |\r\n|                    |                    |                    | with a graphical   |\r\n|                    |                    |                    | import before      |\r\n|                    |                    |                    | using the script   |\r\n|                    |                    |                    | command.           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\nimportbinary2()\r\n"}, "importbinaryobfuscated": {"link": "https://kb.lumerical.com/en/ref_scripts_importbinaryobfuscated.html", "text": "This command is identical to importbinary but makes it possible to\r\nimport data from a file that has been obfuscated. For details on how to\r\nobfuscate the data files, please see the Online Help in the User Guide,\r\nStructures section.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Import binary data from filename in  |\r\n| o.importbinaryobfuscated(key,filenam | three dimensional simulations. All   |\r\n| e,file\\_units,x0,y0,z0,reverse\\_inde | arguments after the filename are     |\r\n| x\\_order)                            | optional.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          | Default value      | Type               | Description        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| key                | required           | string             | The key that is    |\r\n|                    |                    |                    | used to decrypt    |\r\n|                    |                    |                    | the obfuscated     |\r\n|                    |                    |                    | file.              |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| filename           | required           | string             | name of the file   |\r\n|                    |                    |                    | with binary data   |\r\n|                    |                    |                    | to import. May     |\r\n|                    |                    |                    | contain complete   |\r\n|                    |                    |                    | path to file, or   |\r\n|                    |                    |                    | path relative to   |\r\n|                    |                    |                    | current working    |\r\n|                    |                    |                    | directory          |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| file\\_units        | \"m\"                | string             | The optional       |\r\n|                    |                    |                    | string argument    |\r\n|                    |                    |                    | file\\_units can be |\r\n|                    |                    |                    | \"m\", \"cm, \"mm\",    |\r\n|                    |                    |                    | \"microns\" or \"nm\"  |\r\n|                    |                    |                    | to specify the     |\r\n|                    |                    |                    | units in the file. |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| x0                 | 0                  | number             | The optional       |\r\n|                    |                    |                    | arguments x0, y0   |\r\n|                    |                    |                    | and z0 specify the |\r\n|                    |                    |                    | data origin in the |\r\n|                    |                    |                    | global coordinates |\r\n|                    |                    |                    | of the Graphical   |\r\n|                    |                    |                    | Layout Editor. For |\r\n|                    |                    |                    | example, if you    |\r\n|                    |                    |                    | defined your       |\r\n|                    |                    |                    | volume with        |\r\n|                    |                    |                    | respect to a       |\r\n|                    |                    |                    | particular point   |\r\n|                    |                    |                    | in space, for      |\r\n|                    |                    |                    | example (0,0,-5)   |\r\n|                    |                    |                    | microns, then you  |\r\n|                    |                    |                    | should set z0 to   |\r\n|                    |                    |                    | -5 microns.        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| y0                 | 0                  | number             |                    |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| z0                 | 0                  | number             |                    |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| reverse\\_index\\_or | 0                  | number             | The optional       |\r\n| der                |                    |                    | argument           |\r\n|                    |                    |                    | reverse\\_index\\_or |\r\n|                    |                    |                    | der                |\r\n|                    |                    |                    | can be set to 1 to |\r\n|                    |                    |                    | reverse how the    |\r\n|                    |                    |                    | indices are        |\r\n|                    |                    |                    | interpreted in the |\r\n|                    |                    |                    | file. It is best   |\r\n|                    |                    |                    | to verify the      |\r\n|                    |                    |                    | correct setting    |\r\n|                    |                    |                    | with a graphical   |\r\n|                    |                    |                    | import before      |\r\n|                    |                    |                    | using the script   |\r\n|                    |                    |                    | command.           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\nimportbinary()\r\n"}, "importbinary2": {"link": "https://kb.lumerical.com/en/ref_scripts_importbinary2.html", "text": "Import binary data (1s and 0s) over an entire volume from script\r\nvariables. The object will be present wherever the binary data is 1 and\r\nnot when it is 0. This command only applies to import primitives. The\r\nfunction returns 1 if the data is successfully imported. Example script\r\nfiles showing how to use these functions can be found in the Online\r\nHelp. See the User Guide, Structures section.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.importbinary2(binary,x,y,z)  | Import binary data from script       |\r\n|                                      | variables in three dimensional       |\r\n|                                      | simulations. All arguments are       |\r\n|                                      | required.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          | Default value      | Type               | Description        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| binary             | required           | matrix             | The binary data    |\r\n|                    |                    |                    | This should be an  |\r\n|                    |                    |                    | NxMxP matrix in    |\r\n|                    |                    |                    | three dimensions   |\r\n|                    |                    |                    | and an NxM matrix  |\r\n|                    |                    |                    | in two dimensions. |\r\n|                    |                    |                    | It should have     |\r\n|                    |                    |                    | only values of 0   |\r\n|                    |                    |                    | or 1. If other     |\r\n|                    |                    |                    | values are         |\r\n|                    |                    |                    | present, all       |\r\n|                    |                    |                    | non-zero values    |\r\n|                    |                    |                    | will be            |\r\n|                    |                    |                    | interpreted as 1.  |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| x                  | required           | matrix             | If n is an NxMxP   |\r\n|                    |                    |                    | matrix, then x     |\r\n|                    |                    |                    | should have        |\r\n|                    |                    |                    | dimension Nx1. For |\r\n|                    |                    |                    | two dimensional    |\r\n|                    |                    |                    | simulation, if n   |\r\n|                    |                    |                    | is an NxM matrix   |\r\n|                    |                    |                    | then x should have |\r\n|                    |                    |                    | dimension Nx1.     |\r\n|                    |                    |                    | Values of x must   |\r\n|                    |                    |                    | be uniformly       |\r\n|                    |                    |                    | spaced.            |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| y                  | required           | matrix             | If n is an NxMxP   |\r\n|                    |                    |                    | matrix, then y     |\r\n|                    |                    |                    | should have        |\r\n|                    |                    |                    | dimension Mx1. For |\r\n|                    |                    |                    | two dimensional    |\r\n|                    |                    |                    | simulation, if n   |\r\n|                    |                    |                    | is an NxM matrix   |\r\n|                    |                    |                    | then y should have |\r\n|                    |                    |                    | dimension Mx1.     |\r\n|                    |                    |                    | Values of y must   |\r\n|                    |                    |                    | be uniformly       |\r\n|                    |                    |                    | spaced.            |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| z                  | 1                  | number             | If n is an NxMxP   |\r\n|                    |                    |                    | matrix, then z     |\r\n|                    |                    |                    | should have        |\r\n|                    |                    |                    | dimension Px1.     |\r\n|                    |                    |                    | Values of z must   |\r\n|                    |                    |                    | be uniformly       |\r\n|                    |                    |                    | spaced.            |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\nimportbinary()\r\n"}, "importcsvlc": {"link": "https://kb.lumerical.com/en/ref_scripts_importcsvlc.html", "text": "This command adds a LC grid attribute or analysis group containing a\r\nliquid crystal structure and LC grid attribute with data imported from a\r\nspecified csv (comma separated value) file without using the GUI import\r\nwizard. The arguments allow you to make the same choices that are\r\navailable in the GUI. For more information about the GUI import wizard,\r\nsee Import object - Liquid crystal from CSV.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.importcsvlc(filename)              | Import the csv file from the         |\r\n|                                      | specified filename. All arguments    |\r\n|                                      | after the filename are optional.     |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.importcsvlc(filename,option) | Import the csv file but specify if   |\r\n|                                      | it should be imported as a single    |\r\n|                                      | grid attribute or added to an        |\r\n|                                      | analysis group LC structure.         |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Import the csv file and specify if   |\r\n| o.importcsvlc(filename,option,export | it was originally exported from the  |\r\n| ed\\_from\\_xz\\_plane)                 | x-z plane. This option only applies  |\r\n|                                      | to 2D datasets but is critical to    |\r\n|                                      | get the orientation of the LC        |\r\n|                                      | structure correct when it is         |\r\n|                                      | imported into FDTD Solutions in the  |\r\n|                                      | x-y plane.                           |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Import the csv file with additional  |\r\n| o.importcsvlc(filename,option,export | axis rotations.                      |\r\n| ed\\_from\\_xz\\_plane,rotations)       |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          | Default value      | Type               | Description        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| filename           | required           | string             | The name of the    |\r\n|                    |                    |                    | csv file to        |\r\n|                    |                    |                    | import. May        |\r\n|                    |                    |                    | contain complete   |\r\n|                    |                    |                    | path to file, or   |\r\n|                    |                    |                    | path relative to   |\r\n|                    |                    |                    | current working    |\r\n|                    |                    |                    | directory          |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| option             | true               | boolean            | When set to 1      |\r\n|                    |                    |                    | (true) the import  |\r\n|                    |                    |                    | will create an     |\r\n|                    |                    |                    | analysis group     |\r\n|                    |                    |                    | structure with the |\r\n|                    |                    |                    | grid attribute and |\r\n|                    |                    |                    | a rectangle, the   |\r\n|                    |                    |                    | same as when using |\r\n|                    |                    |                    | the graphical      |\r\n|                    |                    |                    | import. When set   |\r\n|                    |                    |                    | to 0 (false) it    |\r\n|                    |                    |                    | will import only   |\r\n|                    |                    |                    | the grid           |\r\n|                    |                    |                    | attribute. This    |\r\n|                    |                    |                    | argument is        |\r\n|                    |                    |                    | optional           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| exported\\_from\\_xz | true               | boolean            | Applies to 2D      |\r\n| \\_plane            |                    |                    | datasets only.     |\r\n|                    |                    |                    | This indicates     |\r\n|                    |                    |                    | that the data was  |\r\n|                    |                    |                    | originally         |\r\n|                    |                    |                    | exported from the  |\r\n|                    |                    |                    | x-z plane and this |\r\n|                    |                    |                    | should be          |\r\n|                    |                    |                    | accounted for when |\r\n|                    |                    |                    | it is imported     |\r\n|                    |                    |                    | into the x-y       |\r\n|                    |                    |                    | plane.             |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| rotations          | [0,0,0]            | matrix             | The optional       |\r\n|                    |                    |                    | argument allows    |\r\n|                    |                    |                    | you to specify 3   |\r\n|                    |                    |                    | rotations around   |\r\n|                    |                    |                    | the x, y and z     |\r\n|                    |                    |                    | axes respectively  |\r\n|                    |                    |                    | that are used      |\r\n|                    |                    |                    | exactly the same   |\r\n|                    |                    |                    | way as the         |\r\n|                    |                    |                    | graphical import   |\r\n|                    |                    |                    | wizard. The matrix |\r\n|                    |                    |                    | must have 3        |\r\n|                    |                    |                    | elements and each  |\r\n|                    |                    |                    | value will be      |\r\n|                    |                    |                    | rounded to the     |\r\n|                    |                    |                    | nearest 90         |\r\n|                    |                    |                    | degrees.           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\naddgridattribute(), cleardataset(), importdataset()\r\n"}, "importdataset": {"link": "https://kb.lumerical.com/en/ref_scripts_importdataset.html", "text": "This command can be used to import a rectilinear or unstructured dataset\r\ninto a simulation object.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.importdataset(\"filename\")          | Imports the dataset the specified    |\r\n|                                      | Matlab file from the current working |\r\n|                                      | directory. The object to load data   |\r\n|                                      | into must be selected.               |\r\n+--------------------------------------+--------------------------------------+\r\n| o.importdataset(charge)              | Imports the data from the specified  |\r\n|                                      | dataset in the script workspace.     |\r\n|                                      | Dataset can be loaded from a Matlab  |\r\n|                                      | file to the script workspace using   |\r\n|                                      | the matlabload command. The object   |\r\n|                                      | to load data into must be selected.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nThere are several cases where this command can be used\r\n\r\n1. Import data into a grid attribute (data could be from charge monitor\r\nor temperature monitor in DEVICE).\r\n\r\n2. Import doping data into a selected 'import doping' object.\r\n\r\n3. Import optical generation data into a selected 'import generation'\r\nobject.\r\n\r\n4. Import field data to an import source (FDTD Solutions).\r\n\r\n5. Import field data to a port object (FDTD Solutions and MODE\r\nSolutions).\r\n\r\nThe command can be used in two ways. The dataset can be saved inside a\r\nmatlab (.mat) file which can be called to load the data or, the command\r\ncan directly call the dataset from the script workspace to load it into\r\nthe simulation object. In both cases, the dataset need to have the\r\nfollowing properties:\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Data           | Simulation     | Dataset type   | Name for       | Name for       |\r\n|                | object         |                | variables      | variables      |\r\n|                |                |                | defining       | defining       |\r\n|                |                |                | coordinate     | actual data    |\r\n|                |                |                | data           |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Liquid crystal | 'lc            | Rectilinear    | x, y, z        | u              |\r\n| orientation (3 | orientation'   |                |                |                |\r\n| element unit   | grid attribute |                |                |                |\r\n| vector)        |                |                |                |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Rotation       | 'permittivity  | Rectilinear    | x, y, z        | theta, phi,    |\r\n| angles in      | rotation' grid |                |                | psi            |\r\n| radians        | attribute      |                |                |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Unitary        | 'matrix        | Rectilinear    | x, y, z        | U              |\r\n| transform      | transform'     |                |                |                |\r\n| matrix (3x3    | grid attribute |                |                |                |\r\n| tensor)        |                |                |                |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Charge density | 'np density'   | Unstructured   | x, y, z, C     | n, p           |\r\n|                | grid attribute |                |                |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Doping profile | 'Import        | Unstructured   | x, y, z, C     | N              |\r\n|                | doping' object | or rectangular | (unstructured) |                |\r\n|                |                |                | ;              |                |\r\n|                |                |                | x, y, z        |                |\r\n|                |                |                | (rectangular)  |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Optical        | Import         | Rectangular    | x, y, z        | G              |\r\n| generation     | generation'    |                |                |                |\r\n| rate           | object         |                |                |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Temperature in | 'temperature'  | Unstructured   | x, y, z,       | N              |\r\n| Kelvin         | grid attribute |                | elements       |                |\r\n|                |                |                |                |                |\r\n|                |                |                | (see Dataset   |                |\r\n|                |                |                | builder for    |                |\r\n|                |                |                | more           |                |\r\n|                |                |                | information)   |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| E and H field  | Import source  | Rectilinear    | x, y, z, f     | E (required),  |\r\n| data           | in FDTD        |                | (optional)     | H (optional)   |\r\n|                | Solutions      |                |                |                |\r\n|                |                |                | (see Sources - |                |\r\n|                |                |                | Import for     |                |\r\n|                |                |                | more           |                |\r\n|                |                |                | information)   |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| E and H field  | Port in FDTD   | Rectilinear    | x,y,z          | E, H           |\r\n| data           | Solutions or   |                |                |                |\r\n|                | MODE Solutions |                | (see Importing |                |\r\n|                | EME solver     |                | arbitrary      |                |\r\n|                | (note that     |                | source fields  |                |\r\n|                | only 1 mode    |                | for more       |                |\r\n|                | can be         |                | information)   |                |\r\n|                | imported at a  |                |                |                |\r\n|                | time for each  |                |                |                |\r\n|                | port)          |                |                |                |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\ncleardataset(), matlabload(), addgridattribute(), unstructureddataset()\r\n"}, "importnetlist": {"link": "https://kb.lumerical.com/en/ref_scripts_importnetlist.html", "text": "This script command can import an optical SPICE netlist.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.importnetlist(\"compound name\",     | imports an optical SPICE netlist.    |\r\n| \"filename\")                          | The \"compound name\" is optional, if  |\r\n|                                      | not specified, the Root Element      |\r\n|                                      | level circuit configuration will be  |\r\n|                                      | imported; if specified, the          |\r\n|                                      | sub-circuit will be imported to this |\r\n|                                      | specified compound.                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          |                    | Type               | Description        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| compound name      | optional           | string             | name of the        |\r\n|                    |                    |                    | compound           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| filename           | required           | string             | name of the        |\r\n|                    |                    |                    | netlist.           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\nexportnetlist()\r\n"}, "importnk": {"link": "https://kb.lumerical.com/en/ref_scripts_importnk.html", "text": "Imports the refractive index (n and k) over an entire volume or surface\r\nfrom a file. This command only applies to import primitives. The\r\nfunction returns 1 if the data is successfully imported. It is possible\r\nto import anisotropic nk data.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Import n (and k) data from filename  |\r\n| o.importnk(filename,file\\_units,     | in three dimensional (or two         |\r\n| x0,y0,z0,reverse\\_index\\_order)      | dimensional) simulations. All        |\r\n|                                      | arguments after the filename are     |\r\n|                                      | optional.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          | Default value      | Type               | Description        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| filename           | required           | string             | name of the file   |\r\n|                    |                    |                    | with n (and k)     |\r\n|                    |                    |                    | data to import.    |\r\n|                    |                    |                    | May contain        |\r\n|                    |                    |                    | complete path to   |\r\n|                    |                    |                    | file, or path      |\r\n|                    |                    |                    | relative to        |\r\n|                    |                    |                    | current working    |\r\n|                    |                    |                    | directory          |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| file\\_units        | \"m\"                | string             | The optional       |\r\n|                    |                    |                    | string argument    |\r\n|                    |                    |                    | file\\_units can be |\r\n|                    |                    |                    | \"m\", \"cm, \"mm\",    |\r\n|                    |                    |                    | \"microns\" or \"nm\"  |\r\n|                    |                    |                    | to specify the     |\r\n|                    |                    |                    | units in the file. |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| x0                 | 0                  | number             | The optional       |\r\n|                    |                    |                    | arguments x0, y0   |\r\n|                    |                    |                    | and z0 specify the |\r\n|                    |                    |                    | data origin in the |\r\n|                    |                    |                    | global coordinates |\r\n|                    |                    |                    | of the Graphical   |\r\n|                    |                    |                    | Layout Editor. For |\r\n|                    |                    |                    | example, you can   |\r\n|                    |                    |                    | define your volume |\r\n|                    |                    |                    | with respect to a  |\r\n|                    |                    |                    | particular point   |\r\n|                    |                    |                    | in space, for      |\r\n|                    |                    |                    | example (0,0,-5)   |\r\n|                    |                    |                    | microns.           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| y0                 | 0                  | number             |                    |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| z0                 | 0                  | number             |                    |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| reverse\\_index\\_or | 0                  | number             | The optional       |\r\n| der                |                    |                    | argument           |\r\n|                    |                    |                    | reverse\\_index\\_or |\r\n|                    |                    |                    | der                |\r\n|                    |                    |                    | can be set to 1 to |\r\n|                    |                    |                    | reverse how the    |\r\n|                    |                    |                    | indices are        |\r\n|                    |                    |                    | interpreted in the |\r\n|                    |                    |                    | file. It is best   |\r\n|                    |                    |                    | to verify the      |\r\n|                    |                    |                    | correct setting    |\r\n|                    |                    |                    | with a graphical   |\r\n|                    |                    |                    | import before      |\r\n|                    |                    |                    | using the script   |\r\n|                    |                    |                    | command.           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\nimportnk2()\r\n"}, "importnkobfuscated": {"link": "https://kb.lumerical.com/en/ref_scripts_importnkobfuscated.html", "text": "This command is identical to importnk but makes it possible to import\r\ndata from a file that has been obfuscated. For details on how to\r\nobfuscate the data files, please see the Online Help in the User Guide,\r\nStructures section.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Import n (and k) data from filename  |\r\n| o.importnkobfuscated(key,filename,fi | in three dimensional simulations.    |\r\n| le\\_units,x0,y0,z0,reverse\\_index\\_o | All arguments after the filename are |\r\n| rder)                                | optional.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          | Default value      | Type               | Description        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| key                | required           | string             | The key that is    |\r\n|                    |                    |                    | used to decrypt    |\r\n|                    |                    |                    | the obfuscated     |\r\n|                    |                    |                    | file.              |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| filename           | required           | string             | name of the file   |\r\n|                    |                    |                    | with n (and k)     |\r\n|                    |                    |                    | data to import.    |\r\n|                    |                    |                    | May contain        |\r\n|                    |                    |                    | complete path to   |\r\n|                    |                    |                    | file, or path      |\r\n|                    |                    |                    | relative to        |\r\n|                    |                    |                    | current working    |\r\n|                    |                    |                    | directory          |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| file\\_units        | \"m\"                | string             | The optional       |\r\n|                    |                    |                    | string argument    |\r\n|                    |                    |                    | file\\_units can be |\r\n|                    |                    |                    | \"m\", \"cm, \"mm\",    |\r\n|                    |                    |                    | \"microns\" or \"nm\"  |\r\n|                    |                    |                    | to specify the     |\r\n|                    |                    |                    | units in the file. |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| x0                 | 0                  | number             | The optional       |\r\n|                    |                    |                    | arguments x0, y0   |\r\n|                    |                    |                    | and z0 specify the |\r\n|                    |                    |                    | data origin in the |\r\n|                    |                    |                    | global coordinates |\r\n|                    |                    |                    | of the Graphical   |\r\n|                    |                    |                    | Layout Editor. For |\r\n|                    |                    |                    | example, if you    |\r\n|                    |                    |                    | defined your       |\r\n|                    |                    |                    | volume with        |\r\n|                    |                    |                    | respect to a       |\r\n|                    |                    |                    | particular point   |\r\n|                    |                    |                    | in space, for      |\r\n|                    |                    |                    | example (0,0,-5)   |\r\n|                    |                    |                    | microns, then you  |\r\n|                    |                    |                    | should set z0 to   |\r\n|                    |                    |                    | -5 microns.        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| y0                 | 0                  | number             |                    |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| z0                 | 0                  | number             |                    |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| reverse\\_index\\_or | 0                  | number             | The optional       |\r\n| der                |                    |                    | argument           |\r\n|                    |                    |                    | reverse\\_index\\_or |\r\n|                    |                    |                    | der                |\r\n|                    |                    |                    | can be set to 1 to |\r\n|                    |                    |                    | reverse how the    |\r\n|                    |                    |                    | indices are        |\r\n|                    |                    |                    | interpreted in the |\r\n|                    |                    |                    | file. It is best   |\r\n|                    |                    |                    | to verify the      |\r\n|                    |                    |                    | correct setting    |\r\n|                    |                    |                    | with a graphical   |\r\n|                    |                    |                    | import before      |\r\n|                    |                    |                    | using the script   |\r\n|                    |                    |                    | command.           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\nimportnk(), importbinaryobfuscated()\r\n"}, "importnk2": {"link": "https://kb.lumerical.com/en/ref_scripts_importnk2.html", "text": "Imports the refractive index (n and k) over an entire volume or surface\r\nfrom script variables. This command only applies to import primitives.\r\nThe function returns 1 if the data is successfully imported. It is\r\npossible to import anisotropic nk data.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.importnk2(n,x,y,z)           | Import n (and k) data from script    |\r\n|                                      | variables in three dimensional       |\r\n|                                      | simulations, n can be complex. All   |\r\n|                                      | arguments are required. n must be of |\r\n|                                      | dimension NxMxP or NxMxPx3 with N >= |\r\n|                                      | 2, M >= 2 and P >= 2.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          | Default value      | Type               | Description        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| n                  | required           | matrix             | The refractive     |\r\n|                    |                    |                    | index. If it is    |\r\n|                    |                    |                    | complex-valued,    |\r\n|                    |                    |                    | then the imaginary |\r\n|                    |                    |                    | part is            |\r\n|                    |                    |                    | interpreted as k.  |\r\n|                    |                    |                    | For isotropic      |\r\n|                    |                    |                    | material, this     |\r\n|                    |                    |                    | should be an NxMxP |\r\n|                    |                    |                    | matrix in three    |\r\n|                    |                    |                    | dimensions and an  |\r\n|                    |                    |                    | NxMx2 matrix in    |\r\n|                    |                    |                    | two dimensions.    |\r\n|                    |                    |                    | For anisotropic    |\r\n|                    |                    |                    | material, this     |\r\n|                    |                    |                    | should be an       |\r\n|                    |                    |                    | NxMxPx3 matrix in  |\r\n|                    |                    |                    | three dimensions   |\r\n|                    |                    |                    | and an NxMx2x3     |\r\n|                    |                    |                    | matrix in two      |\r\n|                    |                    |                    | dimensions.        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| x                  | required           | matrix             | If n is an NxMxP   |\r\n|                    |                    |                    | matrix, then x     |\r\n|                    |                    |                    | should have        |\r\n|                    |                    |                    | dimension Nx1. For |\r\n|                    |                    |                    | two dimensional    |\r\n|                    |                    |                    | simulation, if n   |\r\n|                    |                    |                    | is an NxMx2 matrix |\r\n|                    |                    |                    | then x should have |\r\n|                    |                    |                    | dimension Nx1.     |\r\n|                    |                    |                    | Values of x must   |\r\n|                    |                    |                    | be uniformly       |\r\n|                    |                    |                    | spaced.            |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| y                  | required           | matrix             | If n is an NxMxP   |\r\n|                    |                    |                    | matrix, then y     |\r\n|                    |                    |                    | should have        |\r\n|                    |                    |                    | dimension Mx1. For |\r\n|                    |                    |                    | two dimensional    |\r\n|                    |                    |                    | simulation, if n   |\r\n|                    |                    |                    | is an NxMx2 matrix |\r\n|                    |                    |                    | then y should have |\r\n|                    |                    |                    | dimension Mx1.     |\r\n|                    |                    |                    | Values of y must   |\r\n|                    |                    |                    | be uniformly       |\r\n|                    |                    |                    | spaced.            |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| z                  | required           | matrix             | If n is an NxMxP   |\r\n|                    |                    |                    | matrix, then z     |\r\n|                    |                    |                    | should have        |\r\n|                    |                    |                    | dimension Px1. For |\r\n|                    |                    |                    | two dimensional    |\r\n|                    |                    |                    | simulation, if n   |\r\n|                    |                    |                    | is an NxMx2 matrix |\r\n|                    |                    |                    | then z should have |\r\n|                    |                    |                    | dimension 2x1.     |\r\n|                    |                    |                    | Values of z must   |\r\n|                    |                    |                    | be uniformly       |\r\n|                    |                    |                    | spaced.            |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\nimportnk()\r\n"}, "importschematic": {"link": "https://kb.lumerical.com/en/ref_scripts_importschematic.html", "text": "Imports the schematic contents from a file into an existing design kit\r\nelement.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.importschematic (name, filename)   | Imports the schematic contents from  |\r\n|                                      | a file into an existing design kit   |\r\n|                                      | element.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nexportschematic(), customlibrary(), exportlib()\r\n"}, "importsurface": {"link": "https://kb.lumerical.com/en/ref_scripts_importsurface.html", "text": "Imports surface data. This command only applies to import primitives.\r\nThe function returns 1 if the data is successfully imported. Example\r\nscript files showing how to use these functions can be found in the\r\nOnline Help. See the User Guide, Structures section.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Import a surface from the file in    |\r\n| o.importsurface(filename,upper\\_surf | the string filename in a three       |\r\n| ace,file\\_units,x0,y0,z0,invertXY)   | dimensional simulation. All          |\r\n|                                      | arguments after filename are         |\r\n|                                      | optional.                            |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Import a surface from the file in    |\r\n| o.importsurface(filename,upper\\_surf | the string filename in a two         |\r\n| ace,file\\_units,x0,y0,invertXY)      | dimensional simulation. All          |\r\n|                                      | arguments after filename are         |\r\n|                                      | optional.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          | Default value      | Type               | Description        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| filename           | required           | string             | name of the file   |\r\n|                    |                    |                    | with surface data  |\r\n|                    |                    |                    | to import. May     |\r\n|                    |                    |                    | contain complete   |\r\n|                    |                    |                    | path to file, or   |\r\n|                    |                    |                    | path relative to   |\r\n|                    |                    |                    | current working    |\r\n|                    |                    |                    | directory          |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| upper\\_surface     | 1                  | number             | This optional      |\r\n|                    |                    |                    | argument should be |\r\n|                    |                    |                    | 1 to import the    |\r\n|                    |                    |                    | upper surface and  |\r\n|                    |                    |                    | 0 to import the    |\r\n|                    |                    |                    | lower surface.     |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| file\\_units        | \"m\"                | string             | The optional       |\r\n|                    |                    |                    | string argument    |\r\n|                    |                    |                    | file\\_units can be |\r\n|                    |                    |                    | \"m\", \"cm, \"mm\",    |\r\n|                    |                    |                    | \"microns\" or \"nm\"  |\r\n|                    |                    |                    | to specify the     |\r\n|                    |                    |                    | units in the file. |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| x0                 | 0                  | number             | The optional       |\r\n|                    |                    |                    | arguments x0, y0   |\r\n|                    |                    |                    | and z0 specify the |\r\n|                    |                    |                    | data origin in the |\r\n|                    |                    |                    | global coordinates |\r\n|                    |                    |                    | of the Graphical   |\r\n|                    |                    |                    | Layout Editor. For |\r\n|                    |                    |                    | example, if you    |\r\n|                    |                    |                    | are importing a    |\r\n|                    |                    |                    | surface defined by |\r\n|                    |                    |                    | an AFM that is on  |\r\n|                    |                    |                    | a slab of Si that  |\r\n|                    |                    |                    | ranges from 0 to 2 |\r\n|                    |                    |                    | microns, you       |\r\n|                    |                    |                    | should set z0 to 2 |\r\n|                    |                    |                    | microns.           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| y0                 | 0                  | number             |                    |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| z0                 | 0                  | number             |                    |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| invertXY           | 0                  | number             | The optional       |\r\n|                    |                    |                    | argument invertXY  |\r\n|                    |                    |                    | can be used to     |\r\n|                    |                    |                    | reverse how the x  |\r\n|                    |                    |                    | and y axes are     |\r\n|                    |                    |                    | read from the      |\r\n|                    |                    |                    | file.              |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\nimportsurface2()\r\n"}, "importsurface2": {"link": "https://kb.lumerical.com/en/ref_scripts_importsurface2.html", "text": "Imports surface data from script variables. This command only applies to\r\nimport primitives. The function returns 1 if the data is successfully\r\nimported. Example script files showing how to use these functions can be\r\nfound in the Online Help. See the User Guide, Structures section.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Import a surface from the variables  |\r\n| o.importsurface2(Z,x,y,upper\\_surfac | Z, x and y in three dimensional      |\r\n| e)                                   | simulations. The upper\\_surface      |\r\n|                                      | argument is optional.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          | Default value      | Type               | Description        |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Z                  | required           | matrix             | The two            |\r\n|                    |                    |                    | dimensional matrix |\r\n|                    |                    |                    | that defines the   |\r\n|                    |                    |                    | surface.           |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| x                  | required           | matrix             | If Z is an NxM     |\r\n|                    |                    |                    | matrix, then x     |\r\n|                    |                    |                    | should have        |\r\n|                    |                    |                    | dimension Nx1. For |\r\n|                    |                    |                    | two dimensional    |\r\n|                    |                    |                    | simulation, if Y   |\r\n|                    |                    |                    | is an Nx1 matrix   |\r\n|                    |                    |                    | then x should have |\r\n|                    |                    |                    | dimension Nx1.     |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| y                  | required           | matrix             | If Z is an NxM     |\r\n|                    |                    |                    | matrix, then y     |\r\n|                    |                    |                    | should have        |\r\n|                    |                    |                    | dimension Mx1.     |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| upper\\_surface     | 1                  | number             | This optional      |\r\n|                    |                    |                    | argument should be |\r\n|                    |                    |                    | 1 to import the    |\r\n|                    |                    |                    | upper surface and  |\r\n|                    |                    |                    | 0 to import the    |\r\n|                    |                    |                    | lower surface.     |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Y                  | required           | matrix             | This argument      |\r\n|                    |                    |                    | should be an Nx1   |\r\n|                    |                    |                    | matrix that        |\r\n|                    |                    |                    | defines the        |\r\n|                    |                    |                    | surface for two    |\r\n|                    |                    |                    | dimensional        |\r\n|                    |                    |                    | simulations.       |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\nimportsurface()\r\n"}, "inpoly": {"link": "https://kb.lumerical.com/en/ref_scripts_inpoly.html", "text": "Determines if a point is inside or outside a polygon. The function is\r\nvectorized so it can be used to create a mesh of a polygon.\r\n\r\nThe polygon vertices are contained in a single matrix of dimension Nx2\r\n(or 2xN), where N >= 3 is the number of vertices. The dimension 2\r\ncorresponds to the x,y positions. For example, a square of side length 1\r\ncan be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.inpoly(V,x,y)                | Returns a matrix of the same         |\r\n|                                      | dimension of x with 1 if the         |\r\n|                                      | corresponding point is inside the    |\r\n|                                      | polygon and 0 otherwise. The         |\r\n|                                      | matrices x and y must have the same  |\r\n|                                      | length, or one of them can be a      |\r\n|                                      | singleton.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npolyarea(), centroid(), polyintersect(), polygrow(), polyand(),\r\npolyor(), polydiff(), polyxor(), meshgridx(), meshgridy()\r\n"}, "insert": {"link": "https://kb.lumerical.com/en/ref_scripts_insert.html", "text": "Inserts an object into an existing cell in a lookup table.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out{1}.association = o.insert(       | Inserts an object into an existing   |\r\n| out{1}.association, association,     | cell.                                |\r\n| cell number )                        |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlookupopen(), lookupread(), lookupwrite(), lookupclose(),\r\nlookupreadtable(), lookupreadvalue(), lookupreadnportsparameter(),\r\nlookupappend()\r\n"}, "insertsweep": {"link": "https://kb.lumerical.com/en/ref_scripts_insertsweep.html", "text": "Inserts a sweep/optimization/Monte Carlo item as a parent to an existing\r\nanalysis item. The existing item becomes a child of the newly inserted\r\nsweep.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.insertsweep(\"name\")                | Inserts a sweep/optimization/Monte   |\r\n|                                      | Carlo item as a child to a parent    |\r\n|                                      | analysis item.                       |\r\n|                                      |                                      |\r\n|                                      | \"name\" is the absolute name of the   |\r\n|                                      | existing analysis item.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndeletesweep(), copysweep(), pastesweep(), addsweep(), getsweep(),\r\nsetsweep(), addsweepparameter(), addsweepresult(),\r\nremovesweepparameter(), removesweepresult()\r\n"}, "installdesignkit": {"link": "https://kb.lumerical.com/en/ref_scripts_installdesignkit.html", "text": "Installs a design kit file to the Design Kits folder.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.installdesignkit(filename, path,   | Installs a design kit file named     |\r\n| overwrite)                           | \u2018filename.cml\u2019 and directs its       |\r\n|                                      | contents to a user defined \u2018path\u2019.   |\r\n|                                      | The design kit will be available in  |\r\n|                                      | the element library \u2018Design kits\u2019    |\r\n|                                      | folder. If \u2018overwrite\u2019 is true, it   |\r\n|                                      | will overwrite an existing design    |\r\n|                                      | kit with the same name, if           |\r\n|                                      | \u2018overwrite\u2019 is false, it will ask    |\r\n|                                      | the user for confirmation before     |\r\n|                                      | overwriting.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npackagedesignkit(), importschematic(), exportschematic(),\r\ncustomlibrary(), exportlib()\r\n"}, "integrate": {"link": "https://kb.lumerical.com/en/ref_scripts_integrate.html", "text": "Returns the integral over the specified dimension of a matrix.\r\n\r\nIntegrals over singleton dimensions will return zero (i.e. the area\r\nunder a single point is zero). See integrate2 for an alternate behavior.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.integrate(A, n, x1)          | Integrates A over the nth dimension  |\r\n|                                      | in the matrix.                       |\r\n|                                      |                                      |\r\n|                                      | x1 is the corresponding position     |\r\n|                                      | vector for that dimension.           |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.integrate(A, d, x1, x2, ...) | Calculates the integral of A over    |\r\n|                                      | the specified list of dimension(s)   |\r\n|                                      | d.                                   |\r\n|                                      |                                      |\r\n|                                      | d is a vector containing the         |\r\n|                                      | dimensions over which to integrate.  |\r\n|                                      |                                      |\r\n|                                      | xi are the position vectors          |\r\n|                                      | corresponding to the dimensions of A |\r\n|                                      | over which the integration is        |\r\n|                                      | occurring.                           |\r\n|                                      |                                      |\r\n|                                      | For example                          |\r\n|                                      |                                      |\r\n|                                      | \u2022power = integrate(A,1:2,x,y) will   |\r\n|                                      | integrate A over an x-y surface.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nintegrate2(), max(), min(), interp(), find(), pinch(), round(),\r\ngetdata(), sum(), length()\r\n"}, "integrate2": {"link": "https://kb.lumerical.com/en/ref_scripts_integrate2.html", "text": "Very similar to the standard integrate function, except that singleton\r\ndimensions are ignored.\r\n\r\nAs described in the integrate function description, integrating over\r\ndimensions with a single value (singleton dimensions) returns zero\r\nbecause the area under a single point is zero. In some cases,\r\nparticularly when you are not sure which dimensions are singleton, this\r\nbehavior can cause difficulties. The integrate2 function automatically\r\nignores all dimensions with a size of one, which avoids the problem of a\r\nzero valued integrals due to singleton dimensions.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.integrate2(A, 1, x1)         | Integrates A over the first          |\r\n|                                      | dimension in the matrix.             |\r\n|                                      |                                      |\r\n|                                      | x1 is the corresponding position     |\r\n|                                      | vector.                              |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.integrate2(A, d, x1, x2,     | Calculates the integral of A over    |\r\n| ...)                                 | the specified dimension(s) d.        |\r\n|                                      |                                      |\r\n|                                      | d is a vector containing the         |\r\n|                                      | dimensions over which to integrate.  |\r\n|                                      |                                      |\r\n|                                      | xi is the position vector            |\r\n|                                      | corresponding to the dimensions of A |\r\n|                                      | over which the integration is        |\r\n|                                      | occurring. If any of the xi vectors  |\r\n|                                      | only have 1 element, integrate       |\r\n|                                      | returns 0.                           |\r\n|                                      |                                      |\r\n|                                      | For example                          |\r\n|                                      |                                      |\r\n|                                      | \u2022power = integrate2(A,1:2,x,y) will  |\r\n|                                      | integrate A over an x-y surface.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nintegrate(), max(), min(), interp(), find(), pinch(), round(),\r\ngetdata(), sum(), length()\r\n"}, "interp": {"link": "https://kb.lumerical.com/en/ref_scripts_interp.html", "text": "Calculates the linear interpolation of a given data set. The data can be\r\ncomplex.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.interp(Ex, xold, xnew)       | Does a linear interpolation of a 1D  |\r\n|                                      | data set.                            |\r\n|                                      |                                      |\r\n|                                      | \u2022Ex is existing data                 |\r\n|                                      |                                      |\r\n|                                      | \u2022xold specifies the points where Ex  |\r\n|                                      | is sampled                           |\r\n|                                      |                                      |\r\n|                                      | \u2022xnew specifies new point to         |\r\n|                                      | interpolate the data.                |\r\n|                                      |                                      |\r\n|                                      | The xnew does not have to be within  |\r\n|                                      | the bounds of xold.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.interp(Ex, xold, yold, xnew, ynew) | The 2D version of interp.            |\r\n+--------------------------------------+--------------------------------------+\r\n| o.interp(Ex, xold, yold, zold, xnew, | The 3D version of interp.            |\r\n| ynew, znew)                          |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n| o.interp(Ex, xold, yold, zold, told, | The 4D version of interp.            |\r\n| xnew, ynew, znew, tnew)              |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nspline(), plotxy()\r\n"}, "interptet": {"link": "https://kb.lumerical.com/en/ref_scripts_interptet.html", "text": "Interpolates a data set in 3D from a tetrahedral to a rectangular grid.\r\nThe data can be complex.\r\n\r\nThis function is typically used for resampling data evaluated originally\r\nin a finite element mesh (monitor data from DEVICE, for example) to a\r\nnew rectilinear grid.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.interptet(tet, vtx,u, xi,    | Does a tetrahedral to rectilinear    |\r\n| yi,zi,extrap\\_val)                   | interpolation of a function and      |\r\n|                                      | outputs a PxQxR array of             |\r\n|                                      | interpolated values, f(xi,yi,zi).    |\r\n|                                      |                                      |\r\n|                                      | \u2022u is existing data of the finite    |\r\n|                                      | element mesh (Nx1)                   |\r\n|                                      |                                      |\r\n|                                      | \u2022xi, yi and zi are arrays with       |\r\n|                                      | length P, Q and R, respectively.     |\r\n|                                      | They specify the points where u is   |\r\n|                                      | to be sampled on the rectilinear     |\r\n|                                      | mesh, in the x-direction,            |\r\n|                                      | y-direction and z-direction          |\r\n|                                      |                                      |\r\n|                                      | \u2022tet is the connectivity array, Mx4, |\r\n|                                      | containing row entries that index    |\r\n|                                      | the 4 vertices of M tetrahedra.      |\r\n|                                      | Taken from the simulation region     |\r\n|                                      |                                      |\r\n|                                      | \u2022vtx is a matrix with the vertices   |\r\n|                                      | of the tetrahedral mesh, Nx3,        |\r\n|                                      | containing row entries of (x,y,z)    |\r\n|                                      | pairs. Taken from the simulation     |\r\n|                                      | region                               |\r\n|                                      |                                      |\r\n|                                      | \u2022extrap\\_val(optional): if an        |\r\n|                                      | interpolation point is outside of    |\r\n|                                      | the finite element mesh, the point   |\r\n|                                      | will be assigned this value (default |\r\n|                                      | is Inf)                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nquadtet(), quadtri(), interptri()\r\n"}, "interptri": {"link": "https://kb.lumerical.com/en/ref_scripts_interptri.html", "text": "Interpolates a data set from a triangular to a rectilinear grid. The\r\ndata can be complex.\r\n\r\nThis function is typically used for resampling data evaluated originally\r\nin a finite element mesh (monitor data from DEVICE, for example) to a\r\nnew rectilinear grid.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.interptri(tri, vtx,u, xi,    | Does a triangular to rectilinear     |\r\n| yi,extrap\\_val)                      | grid interpolation of a function and |\r\n|                                      | outputs a PxQ array of interpolated  |\r\n|                                      | values, z(xi,yi).                    |\r\n|                                      |                                      |\r\n|                                      | \u2022u is existing data of the finite    |\r\n|                                      | element mesh (size Nx1)              |\r\n|                                      |                                      |\r\n|                                      | \u2022xi and yi are arrays with length P  |\r\n|                                      | and Q, respectively. They specify    |\r\n|                                      | the points where u is to be sampled  |\r\n|                                      | on the rectilinear mesh, in the      |\r\n|                                      | x-direction and y-direction          |\r\n|                                      |                                      |\r\n|                                      | \u2022tri is the connectivity array, Mx3, |\r\n|                                      | containing row entries that index    |\r\n|                                      | the three vertices of M triangles.   |\r\n|                                      | Taken from the simulation region     |\r\n|                                      |                                      |\r\n|                                      | \u2022vtx is a matrix with the vertices   |\r\n|                                      | of the triangular mesh, Nx2,         |\r\n|                                      | containing row entries of (x,y)      |\r\n|                                      | pairs. Taken from the simulation     |\r\n|                                      | region                               |\r\n|                                      |                                      |\r\n|                                      | \u2022extrap\\_val(optional): if an        |\r\n|                                      | interpolation point is outside of    |\r\n|                                      | the finite element mesh, the point   |\r\n|                                      | will be assigned this value (default |\r\n|                                      | is Inf)                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nquadtri(), interptet(), quadtet()\r\n"}, "inv": {"link": "https://kb.lumerical.com/en/ref_scripts_inv.html", "text": "Calculates the inverse of a matrix. The matrix has to be invertible.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.inv(A)                       | Returns the inverse of matrix A      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nand(), or(), eig(), mult()\r\n"}, "invfft": {"link": "https://kb.lumerical.com/en/ref_scripts_invfft.html", "text": "Computes the 1D, 2D or 3D inverse Fast Fourier Transform (FFT) of a\r\nmatrix. In the 1D case the transform is given by\r\n\r\nThe inverse FFT, FFT and all related functions have an option (option 1\r\nbelow) that controls the format used to store the frequency domain data.\r\nWhen working with spectral data it is not possible to switch between\r\nformats; there are no functions to convert between formats. This implies\r\nthat if you use option1=n to produce a spectrum with fft, then you must\r\nalso use option1=n if you want to pass that same spectral data to\r\ninvfft. Similarly, if you use option1=n for fft, then you also need to\r\nuse option1=n with fftw to get the proper frequency vector corresponding\r\nto your spectrum. invfft and fftk work in the same way.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.invfft(Ew)                   | Returns the inverse fast Fourier     |\r\n|                                      | transform of Ew. Ew can 1D,2D or 3D. |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.invfft(Ew,option1,option2)   | option1                              |\r\n|                                      |                                      |\r\n|                                      | This option controls the format used |\r\n|                                      | to store the frequency domain data.  |\r\n|                                      | The options are:                     |\r\n|                                      |                                      |\r\n|                                      | \u20221 : the standard FFT (zero          |\r\n|                                      | frequency is at the first element of |\r\n|                                      | the matrix). This is the default     |\r\n|                                      | option.                              |\r\n|                                      |                                      |\r\n|                                      | \u20222 : zero frequency is the first     |\r\n|                                      | element, but only data up to and     |\r\n|                                      | including the Nyquist frequency is   |\r\n|                                      | stored. This option is only useful   |\r\n|                                      | for real valued, 1D time/spatial     |\r\n|                                      | signals.                             |\r\n|                                      |                                      |\r\n|                                      | \u20223 : the FFT is shifted so zero      |\r\n|                                      | frequency is the central element of  |\r\n|                                      | the spectrum (more precisely, this   |\r\n|                                      | means the zero frequency point is at |\r\n|                                      | element floor(N/2 + 1), where N is   |\r\n|                                      | the number of samples).              |\r\n|                                      |                                      |\r\n|                                      | option2                              |\r\n|                                      |                                      |\r\n|                                      | This option is either a 1, 2 or 3    |\r\n|                                      | element vector depending on whether  |\r\n|                                      | Ex is 1D, 2D or 3D. For each         |\r\n|                                      | dimension, specify a value of either |\r\n|                                      | 0, 1 or N to obtain the desired 0    |\r\n|                                      | padding options.                     |\r\n|                                      |                                      |\r\n|                                      | \u20220: no zero padding                  |\r\n|                                      |                                      |\r\n|                                      | \u20221: zero padding up to the next      |\r\n|                                      | power of 2 longer than the length of |\r\n|                                      | Ex (default)                         |\r\n|                                      |                                      |\r\n|                                      | \u2022N: zero pad up to length N if N >   |\r\n|                                      | length(Ex), where length of Ex is    |\r\n|                                      | the length in a specific dimension.  |\r\n|                                      | If N <= length(Ex), it will zero pad |\r\n|                                      | up to the next power of 2 longer     |\r\n|                                      | than the length of Ex. For the       |\r\n|                                      | fastest results, N should be a power |\r\n|                                      | of 2 and can be entered, for         |\r\n|                                      | example, as 2^12.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfft(), fftw(), fftk()\r\n"}, "iscell": {"link": "https://kb.lumerical.com/en/ref_scripts_iscell.html", "text": "The script command checks whether input is a cell.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| value= o.iscell(input)               | Determine whether \u2018input is a cell.  |\r\n|                                      | It returns logical 1 (true) if       |\r\n|                                      | \u2018input\u2019 is a cell and logical 0      |\r\n|                                      | (false) otherwise.                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\nissweep(), isstruct(), isfield()\r\n"}, "isfield": {"link": "https://kb.lumerical.com/en/ref_scripts_isfield.html", "text": "The script command checks whether input is a field.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| value= o.isfield(input, field)       | Determine whether \u2018input contains    |\r\n|                                      | filed name \u2018field\u2019. It returns       |\r\n|                                      | logical 1 (true) if \u2018input contains  |\r\n|                                      | \u2018field\u2019, and logical 0 (false)       |\r\n|                                      | otherwise.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\nissweep(), isstruct(), iscell(), getfield(), setfield()\r\n"}, "ispropertyactive": {"link": "https://kb.lumerical.com/en/ref_scripts_ispropertyactive.html", "text": "Returns true if the property \u2018property\u2019 from element \u2018element\u2019 is\r\nactive.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.ispropertyactive               | Returns true if the property         |\r\n| (element,property)                   | \u2018property\u2019 from element \u2018element\u2019 is |\r\n|                                      | active.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nhideproperty(), hidecategory(), annotateproperty()\r\n"}, "isstruct": {"link": "https://kb.lumerical.com/en/ref_scripts_isstruct.html", "text": "The script command checks whether input is a structure.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| value= o.isstruct(input)             | Determine whether \u2018input\u2019 is a       |\r\n|                                      | structure. It returns logical 1      |\r\n|                                      | (true) if \u2018input\u2019 is a structure and |\r\n|                                      | logical 0 (false) otherwise.         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\nissweep(), iscell(), isfield()\r\n"}, "issweep": {"link": "https://kb.lumerical.com/en/ref_scripts_issweep.html", "text": "The script command checks if the simulation is in sweep mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.issweep()                    | Returns true (1 or 0) if the         |\r\n|                                      | simulation is currently in sweep     |\r\n|                                      | mode.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrunsweep(), havesweepdata(), getsweepresult(), loadsweep(), savesweep(),\r\nisstruct(), iscell(), isfield()\r\n"}, "killwizard": {"link": "https://kb.lumerical.com/en/ref_scripts_killwizard.html", "text": "This closes the wizard window. It should only be called after a wizard\r\nwindow has been created with the newwizard command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.killwizard()                       | This closes the wizard window.       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewwizardpage()\r\n"}, "layoutmode": {"link": "https://kb.lumerical.com/en/ref_scripts_layoutmode.html", "text": "This script command can be used to determine whether the simulation file\r\nis currently in LAYOUT mode or in ANALYSIS mode.  It is important to use\r\nthis command to check the status of the project file once it is opened\r\nto avoid running into an error during the subsequent operations if the\r\nfile is not in the desired mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.layoutmode()                 | Returns 1 if in LAYOUT mode (DESIGN  |\r\n|                                      | mode for INTERCONNECT), and 0 if in  |\r\n|                                      | ANALYSIS mode.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nswitchtolayout(), designmode()\r\n"}, "legend": {"link": "https://kb.lumerical.com/en/ref_scripts_legend.html", "text": "Adds a legend to a line plot.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.legend(\"o.legend1\",\"o.legend2\",... | Adds a legend to the selected        |\r\n| ,                                    | figure.                              |\r\n| \"o.legendn\")                         |                                      |\r\n|                                      | Parameters can be strings, or an     |\r\n|                                      | array (cell) of strings              |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlegend(), plot(), closeall(), visualize()\r\n"}, "length": {"link": "https://kb.lumerical.com/en/ref_scripts_length.html", "text": "Returns the number of elements in a matrix. If the argument is a string,\r\nit will return the length of the string.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| y = o.length(x)                      | y the number of elements in a        |\r\n|                                      | matrix. For example, if x is an n by |\r\n|                                      | m matrix, y = length( x ) = n \\* m.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsize(), transpose(), flip(), substring(), findstring(), replace(),\r\nreplacestring()\r\n"}, "library": {"link": "https://kb.lumerical.com/en/ref_scripts_library.html", "text": "Returns a list of elements available in the currently installed element\r\nlibrary, including custom elements.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.library()                    | Returns a list of elements available |\r\n|                                      | in the currently installed element   |\r\n|                                      | libraries, including custom          |\r\n|                                      | elements.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddtolibrary(), customlibrary()\r\n"}, "linecross": {"link": "https://kb.lumerical.com/en/ref_scripts_linecross.html", "text": "Determines if two line segments in the x-y plane cross each other.\r\n\r\nLine segments are contained in a single matrix of dimension 2\\*Nx2,\r\nwhere there are N line segments. For example, the matrix L = [ 0,0; 1,1;\r\n0,0; 0,1]; represents two lines segments, one from (0,0) to (1,1) and\r\nanother from (0,0) to (0,1).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.linecross(L1,L2)             | Returns an array of dimension N      |\r\n|                                      | which determines if the N line       |\r\n|                                      | segments in L1 and the N line        |\r\n|                                      | segments in L2 cross; the comparison |\r\n|                                      | is done pairwise as in the           |\r\n|                                      | lineintersect command. L1 and L2     |\r\n|                                      | must have the same size (2\\*Nx2 for  |\r\n|                                      | N line segments). The elements in    |\r\n|                                      | the output array are 0 if the        |\r\n|                                      | segments do not cross, 1 if they     |\r\n|                                      | cross and 0.5 if the endpoint of one |\r\n|                                      | segment touches the other. Line      |\r\n|                                      | segments that are coincident and     |\r\n|                                      | touch also return a value of 0.5     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlineintersect(), finite()\r\n"}, "lineintersect": {"link": "https://kb.lumerical.com/en/ref_scripts_lineintersect.html", "text": "Returns the intersection points of two lines in the x-y plane. Note that\r\nthe intersection point does not have to lie on the segments that define\r\nthe lines. Use the command linecross to determine if the line segments\r\nactually cross .\r\n\r\nLine segments are contained in a single matrix of dimension 2\\*Nx2,\r\nwhere there are N line segments. For example, the matrix L = [ 0,0; 1,1;\r\n0,0; 0,1]; represents two lines segments, one from (0,0) to (1,1) and\r\nanother from (0,0) to (0,1).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.lineintersect(L1,L2)         | Returns the intersection of the      |\r\n|                                      | lines represented by the segments in |\r\n|                                      | L1 and L2. L1 and L2 must have the   |\r\n|                                      | same size (2\\*Nx2 for N line         |\r\n|                                      | segments). The result is a sequence  |\r\n|                                      | of x,y points in the form Nx2        |\r\n|                                      | representing the pairwise            |\r\n|                                      | intersections of the N lines. There  |\r\n|                                      | are special cases when               |\r\n|                                      |                                      |\r\n|                                      | \u2022The lines are parallel. In this     |\r\n|                                      | case, the position returned is       |\r\n|                                      | (1.#INF,b). The presence of 1.#INF   |\r\n|                                      | can be tested using the script       |\r\n|                                      | command finite. The value of b is 0  |\r\n|                                      | if the lines coincide and 1 if they  |\r\n|                                      | do not.                              |\r\n|                                      |                                      |\r\n|                                      | \u2022The points in a segment are         |\r\n|                                      | degenerate, i.e., the same. In this  |\r\n|                                      | case, the position returned is       |\r\n|                                      | (1.#INF,b), where b is 0, 1 or 2 if  |\r\n|                                      | both line segments are degenerate,   |\r\n|                                      | the first is degenerate, or the      |\r\n|                                      | second is degenerate, respectively.  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlinecross(), finite()\r\n"}, "linspace": {"link": "https://kb.lumerical.com/en/ref_scripts_linspace.html", "text": "Creates a linearly spaced array.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| x = o.linspace(min,max,num)          | x will be an array with num          |\r\n|                                      | elements, linearly spaced between    |\r\n|                                      | min and max. If num is set to 1,     |\r\n|                                      | then x will be the average of min    |\r\n|                                      | and max.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "listjobs": {"link": "https://kb.lumerical.com/en/ref_scripts_listjobs.html", "text": "Lists all the jobs in the job manager queue.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.listjobs(\"solver\")                 | Lists all the jobs in the Job queue  |\r\n|                                      | for specified solver. If the solver  |\r\n|                                      | is not specified, all the jobs for   |\r\n|                                      | all solvers will be listed. No       |\r\n|                                      | argument is necessary for this       |\r\n|                                      | command in INTERCONNECT.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrun(), runsweep(), addjob(), clearjobs(), save(), load()\r\n"}, "load": {"link": "https://kb.lumerical.com/en/ref_scripts_load.html", "text": "Loads an simulation project file. If the simulation has been run, the\r\nfile will also contain the simulation results.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.load(filename)                     | Loads the simulation file.           |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nloaddata(), save(), savedata(), savedcard(), fileexists(), dir()\r\n"}, "loadcustom": {"link": "https://kb.lumerical.com/en/ref_scripts_loadcustom.html", "text": "Redirects the location of the element library \u2018Custom\u2019 folder and\r\nreloads the contents of the folder.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.loadcustom (path)                  | Redirects the location of the        |\r\n|                                      | element library \u2018Custom\u2019 folder to a |\r\n|                                      | user defined \u2018path\u2019. It also reloads |\r\n|                                      | the contents of the \u2018Custom\u2019 folder  |\r\n|                                      | in the element library.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "loaddata": {"link": "https://kb.lumerical.com/en/ref_scripts_loaddata.html", "text": "Loads workspace variables or d-card data from a Lumerical data file\r\n(ldf) file. If any current variables exist with the same names as those\r\nin the file, the current values will be overwritten.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.loaddata(\"filename\")               | Reads data script variables or       |\r\n|                                      | d-card data from the specified file. |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n|                                      |                                      |\r\n|                                      | Note: This function will check for   |\r\n|                                      | the file in the current working      |\r\n|                                      | directory. If the file to read from  |\r\n|                                      | is in a different directory, either  |\r\n|                                      | specify the full path or change the  |\r\n|                                      | current working directory.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsavedata(), savedcard(), workspace(), load(), fileexists()\r\n"}, "loaddesignkit": {"link": "https://kb.lumerical.com/en/ref_scripts_loaddesignkit.html", "text": "Loads a design kit and directs its contents to a user defined path.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.loaddesignkit (\"name\", \"path\")     | Loads a design kit named \u2018name\u2019 and  |\r\n|                                      | directs its contents to a user       |\r\n|                                      | defined \u2018path\u2019. The design kit will  |\r\n|                                      | be available in the element library  |\r\n|                                      | \u2018Design kits\u2019 folder.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nremovedesignkit(), reloaddesignkit()\r\n"}, "loadelement": {"link": "https://kb.lumerical.com/en/ref_scripts_loadelement.html", "text": "Loads an element from a file created using the saveelement command in\r\nthe current working directory. The element will be placed in the current\r\nschematic editor window.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.loadelement (\"name\")               | Loads an element from the file in    |\r\n|                                      | the current working directory with   |\r\n|                                      | extension ICE.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlibrary(), addtolibrary(), probe(), saveelement()\r\n"}, "loadgdsfile": {"link": "https://kb.lumerical.com/en/ref_scripts_loadgdsfile.html", "text": "Loads a gds file to a layer builder object. The command only functions\r\nproperly when a layer builder object is included in the simulation and\r\nis selected.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.loadgdsfile(\"gds\\_example.gds\")    | Loads the gds file named             |\r\n|                                      | \"gds\\_example\" to the layer builder  |\r\n|                                      | object.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddlayerbuilder(), getlayerlist(), setlayer(), addlayer(),\r\ngetcelllist(), getlayerlist(), setlayer()\r\n"}, "loadsweep": {"link": "https://kb.lumerical.com/en/ref_scripts_loadsweep.html", "text": "Loads the sweep object with the previously generated sweep result.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.loadsweep()                        | Loads previously generated sweep     |\r\n|                                      | result to all the sweep objects in   |\r\n|                                      | simulation.                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.loadsweep(\"name\")                  | Loads previously generated sweep     |\r\n|                                      | result to the specified sweep        |\r\n|                                      | objects in simulation.               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetdata(), runsweep(), havesweepdata(), savedata(), getsweepresult(),\r\nsavesweep()\r\n"}, "log": {"link": "https://kb.lumerical.com/en/ref_scripts_log.html", "text": "Calculates the natural logarithm function. Input can be complex or\r\nnegative.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.log(x)                       | The natural logarithm of x. Input    |\r\n|                                      | can be complex or negative.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlog10(), exp()\r\n"}, "log10": {"link": "https://kb.lumerical.com/en/ref_scripts_log10.html", "text": "Calculates the base 10 logarithm function. Input can be complex or\r\nnegative.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.log10(x)                     | The base 10 logarithm of x. Input    |\r\n|                                      | can be complex or negative.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlog()\r\n"}, "logmessage": {"link": "https://kb.lumerical.com/en/ref_scripts_logmessage.html", "text": "This function sends messages from scripted elements to the INTERCONNECT\r\noutput window.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.logmessage()                       | This function sends messages from    |\r\n|                                      | scripted elements to the             |\r\n|                                      | INTERCONNECT output window. It is    |\r\n|                                      | specially useful to debug scripted   |\r\n|                                      | elements.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\n\r\n"}, "lognrnd": {"link": "https://kb.lumerical.com/en/ref_scripts_lognrnd.html", "text": "Generates a log-normal distributed random number. In order to reset the\r\ngenerator seed use the command randreset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.lognrnd (mean,stddev)        | Generates a lognormal distributed    |\r\n|                                      | random number with user defined mean |\r\n|                                      | value and standard deviation.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrandreset(), randn(), histc()\r\n"}, "lookupappend": {"link": "https://kb.lumerical.com/en/ref_scripts_lookupappend.html", "text": "Inserts a new association into an existing lookup table.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.lookupappend(\"filename\", \"table\",  | Inserts a new association into an    |\r\n| design, \"extracted\")                 | existing lookup table.               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlookupopen(), lookupread(), lookupwrite(), lookupclose(),\r\nlookupreadtable(), lookupreadvalue(), lookupreadnportsparameter(),\r\ninsert()\r\n"}, "lookupclose": {"link": "https://kb.lumerical.com/en/ref_scripts_lookupclose.html", "text": "Closes a lookup table file previously created with a lookupopen command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.lookupclose (\"filename\")           | Closes a file previously created     |\r\n|                                      | with a lookupopen command. This      |\r\n|                                      | command is required in order to      |\r\n|                                      | close any file open by lookupopen.   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlookupopen(), lookupread(), lookupwrite(), lookupreadtable(),\r\nlookupreadvalue(), lookupreadnportsparameter(), lookupappend(), insert()\r\n"}, "lookupopen": {"link": "https://kb.lumerical.com/en/ref_scripts_lookupopen.html", "text": "Opens a file to write a lookup table.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.lookupopen (\"filename\",\"table\")    | Opens a file to write a lookup       |\r\n|                                      | table. This command is required      |\r\n|                                      | before any calls to lookupwrite can  |\r\n|                                      | be made.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlookupclose(), lookupread(), lookupwrite(), lookupreadtable(),\r\nlookupreadvalue(), lookupreadnportsparameter(), lookupappend(), insert()\r\n"}, "lookupread": {"link": "https://kb.lumerical.com/en/ref_scripts_lookupread.html", "text": "Finds the nearest extracted value from a file containing a lookup table\r\nof design and extracted parameters.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.lookupread                   | Finds the nearest extracted value    |\r\n| (\"filename\",\"table\",design,\"extracte | from a file containing a lookup      |\r\n| d\")                                  | table of design and extracted        |\r\n|                                      | parameters. Parameter table is the   |\r\n|                                      | name of the lookup table located     |\r\n|                                      | inside the file, design is a cell    |\r\n|                                      | containing multiple structures that  |\r\n|                                      | define the design parameters to      |\r\n|                                      | search, and extracted is the name of |\r\n|                                      | the parameter to be extracted. It    |\r\n|                                      | will return the value located at the |\r\n|                                      | nearest design parameters.           |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.lookupread (\"filename\")      | Returns a script object, in this     |\r\n|                                      | case a cell array containing all the |\r\n|                                      | contents of the xml file.            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlookupclose(), lookupopen(), lookupwrite(), lookupreadtable(),\r\nlookupreadvalue(), lookupreadnportsparameter(), lookupappend(), insert()\r\n"}, "lookupreadnportsparameter": {"link": "https://kb.lumerical.com/en/ref_scripts_lookupreadnportsparameter.html", "text": "Returns an interpolated s-parameter cell from a file containing a lookup\r\ntable of design and extracted parameters.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.lookupreadnportsparameter    | Returns an interpolated s-parameter  |\r\n| (\"filename\",\"table\",design,\"extracte | cell from a file containing a lookup |\r\n| d\")                                  | table of design and extracted        |\r\n|                                      | parameters. Parameter table is the   |\r\n|                                      | name of the lookup table located     |\r\n|                                      | inside the file, design is a cell    |\r\n|                                      | containing multiple structures that  |\r\n|                                      | define the design parameters to      |\r\n|                                      | search, and extracted is the name of |\r\n|                                      | the parameter to be extracted.       |\r\n|                                      | S-parameter file format must be      |\r\n|                                      | compatible with the \u2018Optical N Port  |\r\n|                                      | S-Parameter\u2019.                        |\r\n|                                      |                                      |\r\n|                                      | Notes: The s-parameter files in the  |\r\n|                                      | lookup-table should be in exact the  |\r\n|                                      | same format. The s-parameter files   |\r\n|                                      | shouldn't contain any header.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlookupopen(), lookupread(), lookupwrite(), lookupclose(),\r\nlookupreadtable(), lookupreadvalue(), lookupappend(), insert()\r\n"}, "lookupreadtable": {"link": "https://kb.lumerical.com/en/ref_scripts_lookupreadtable.html", "text": "Returns an interpolated matrix from a file containing a lookup table of\r\ndesign and extracted parameters.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.lookupreadtable              | Returns an interpolated matrix from  |\r\n| (\"filename\",\"table\",design,\"extracte | a file containing a lookup table of  |\r\n| d\")                                  | design and extracted parameters.     |\r\n|                                      | Parameter table is the name of the   |\r\n|                                      | lookup table located inside the      |\r\n|                                      | file, design is a cell containing    |\r\n|                                      | multiple structures that define the  |\r\n|                                      | design parameters to search, and     |\r\n|                                      | extracted is the name of the         |\r\n|                                      | parameter to be extracted. It will   |\r\n|                                      | return a matrix that contains        |\r\n|                                      | multiple columns. The first column   |\r\n|                                      | is the independent variable. e.g.    |\r\n|                                      | frequency dependent transmission     |\r\n|                                      | values.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlookupopen(), lookupread(), lookupwrite(), lookupclose(),\r\nlookupreadvalue(), lookupreadnportsparameter(), lookupappend(), insert()\r\n"}, "lookupreadvalue": {"link": "https://kb.lumerical.com/en/ref_scripts_lookupreadvalue.html", "text": "Finds the value from a file containing a lookup table of design and\r\nextracted parameters.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.lookupreadvalue              | Find the value from a file           |\r\n| (\"filename\",\"table\",design,\"extracte | containing a lookup table of design  |\r\n| d\")                                  | and extracted parameters. Parameter  |\r\n|                                      | table is the name of the lookup      |\r\n|                                      | table located inside the file,       |\r\n|                                      | design is a cell containing multiple |\r\n|                                      | structures that define the design    |\r\n|                                      | parameters to search, and extracted  |\r\n|                                      | is the name of the parameter to be   |\r\n|                                      | extracted. It will return the value  |\r\n|                                      | is interpolated at the design        |\r\n|                                      | parameters.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlookupopen(), lookupread(), lookupwrite(), lookupclose(),\r\nlookupreadtable(), lookupreadnportsparameter(), lookupappend(), insert()\r\n"}, "lookupwrite": {"link": "https://kb.lumerical.com/en/ref_scripts_lookupwrite.html", "text": "Writes to a lookup table file with a design and an extracted parameter\r\npair. This function must be called after lookupopen and before\r\nlookupclose.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.lookupwrite                  | Writes to a lookup table with a      |\r\n| (\"filename\",\"table\",design,          | design and an extracted parameter    |\r\n| \"extracted\")                         | pair. The design and extracted       |\r\n|                                      | parameters are cells that contain    |\r\n|                                      | multiple structures, allowing for    |\r\n|                                      | mapping between multiple design and  |\r\n|                                      | extracted parameters. This function  |\r\n|                                      | can be called multiple times, for    |\r\n|                                      | each call the design and extracted   |\r\n|                                      | parameters will be appended to the   |\r\n|                                      | current file. This function must be  |\r\n|                                      | called after lookupopen and before   |\r\n|                                      | lookupclose.                         |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.lookupwrite (\"filename\")     | Takes a script object, in this case  |\r\n|                                      | a cell array containing all the      |\r\n|                                      | contents of the xml file, and save   |\r\n|                                      | it to a file.                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlookupclose(), lookupopen(), lookupread(), lookupreadtable(),\r\nlookupreadvalue(), lookupreadnportsparameter(), lookupappend(), insert()\r\n"}, "lower": {"link": "https://kb.lumerical.com/en/ref_scripts_lower.html", "text": "Converts all the characters in a string to lower case.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.lower(string)                      | Converts a string to lower case.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlength(), substring(), findstring(), replace(), str2num(), num2str(),\r\nsplitstring(), upper(), toscript()\r\n"}, "ls": {"link": "https://kb.lumerical.com/en/ref_scripts_ls.html", "text": "Lists files in a directory. Files other than Lumerical project files are\r\nalso listed.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = dir; out = o.ls()              | The output is a string.              |\r\n|                                      |                                      |\r\n|                                      | Use ?dir; to write the value to the  |\r\n|                                      | screen.                              |\r\n+--------------------------------------+--------------------------------------+\r\n| out = dir(\"directory\") out =         | Lists the files in the specified     |\r\n| o.ls(\"directory\")                    | directory. For example,              |\r\n|                                      | ?ls(\"C:\\\\Downloads\");                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nload(), splitstring()\r\n"}, "mapfind": {"link": "https://kb.lumerical.com/en/ref_scripts_mapfind.html", "text": "Returns the nearest value from a file containing a map of values. It\r\nreturns the string value located at the specified nearest point.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.mapfind (filename,x,y)       | Find the nearest value from a file   |\r\n|                                      | containing a map of values. It       |\r\n|                                      | returns the string value located at  |\r\n|                                      | the nearest point (x,y).             |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.mapfind (filename,x,y,z)     | Find the nearest value from a file   |\r\n|                                      | containing a map of values. It       |\r\n|                                      | returns the string value located at  |\r\n|                                      | the nearest point (x,y,z).           |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.mapfind (filename,x,y,z,w)   | Find the nearest value from a file   |\r\n|                                      | containing a map of values. It       |\r\n|                                      | returns the string value located at  |\r\n|                                      | the nearest point (x,y,z,w).         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nread(), readdata()\r\n"}, "materialexists": {"link": "https://kb.lumerical.com/en/ref_scripts_materialexists.html", "text": "Returns a boolean indicating whether or not a material exists in the\r\nmaterial database.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.materialexists(\"materialname\")     | Returns 1 if the material named      |\r\n|                                      | \"materialname\" is present in the     |\r\n|                                      | material database. Otherwise return  |\r\n|                                      | 0.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddmaterial(), deletematerial(), setmaterial(), getmaterial(),\r\ncopymaterial()\r\n"}, "matlab": {"link": "https://kb.lumerical.com/en/ref_scripts_matlab.html", "text": "Runs a MATLAB command from the Lumerical script prompt. This gives\r\naccess to extended mathematical and visualization functionality from the\r\nLumerical script environment.  If the MATLAB script integration is not\r\nenabled, this function will return an error.\r\n\r\nThe first time a MATLAB function (matlab, matlabget or matlabput) is\r\ncalled, a MATLAB session will be started and a connection will be\r\nestablished with the Lumerical scripting environment. Once this\r\nconnection is established, MATLAB commands can be run using the matlab\r\nfunction. It is important to understand that the MATLAB and the\r\nLumerical script variable workspaces are completely separate and\r\nindependent. A MATLAB command cannot act on a variable defined in the\r\nLumerical workspace, and vice-versa. Variables must be passed between\r\nthe workspaces using the matlabget and matlabput functions. At any time\r\nyou may examine the MATLAB workspace or interact with the MATLAB\r\nenvironment by typing commands at the MATLAB script prompt. The working\r\ndirectory of the MATLAB instance is always set to match the working\r\ndirectory of the Lumerical application.\r\n\r\nThe output from the MATLAB commands will be printed at the Lumerical\r\nscript prompt. One limitation of the matlab function is that no error\r\nreporting is provided to either the Lumerical script prompt or the\r\nMATLAB prompt. MATLAB commands should be tested by typing them directly\r\ninto the MATLAB prompt before they are called from a Lumerical script.\r\nThe output buffer length is roughly 1e5 characters. Additional output\r\nwill be truncated.\r\n\r\nWhen you have a long sequence of MATLAB commands, you may find it more\r\nconvenient to save them in a MATLAB m-file. Then, you can simply call\r\nthe m-file by running a single command.\r\n\r\n+--------------------------------------------------------------------------+\r\n| See MATLAB integration setup for installation and configuration          |\r\n| instructions.  Additional tips (particularly for plotting data in        |\r\n| Matlab) can be found in the MATLAB section of the online help.           |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.matlab(\"command\")                  | command: a string containing one or  |\r\n|                                      | more valid MATLAB commands.          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.matlab(\" command\\_1 command\\_2 \")  | Multi-line strings can be used in    |\r\n|                                      | script files to contain a block of   |\r\n|                                      | MATLAB commands. Multi-line strings  |\r\n|                                      | are not supported at the script      |\r\n|                                      | command prompt.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatlabget(), matlabput()\r\n"}, "matlabget": {"link": "https://kb.lumerical.com/en/ref_scripts_matlabget.html", "text": "Copies a variable from the MATLAB workspace to the script variable\r\nworkspace. The resulting variable will have the same name as the MATLAB\r\nvariable, and will overwrite any existing variable with the same name.\r\nIf the variable does not exist in MATLAB, the command will return an\r\nerror. For more information, please see the matlab command description.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: Matlab script integration must be enabled in order to use this     |\r\n| command. For more information on how to set this up see the Matlab       |\r\n| script integration page.                                                 |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.matlabget(var1, var2,...varN)      | The arguments to this command are    |\r\n|                                      | one or more variable names that      |\r\n|                                      | refer to variables in the MATLAB     |\r\n|                                      | workspace.                           |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatlab(), matlabput()\r\n"}, "matlabload": {"link": "https://kb.lumerical.com/en/ref_scripts_matlabload.html", "text": "Load Matlab .mat data into workspace\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.matlabload(\"filename\")             | Load to the workspace the data of    |\r\n|                                      | the specified .mat file.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatlabput(), matlabsavelegacy(), matlabsave()\r\n"}, "matlabput": {"link": "https://kb.lumerical.com/en/ref_scripts_matlabput.html", "text": "Copies a variable from Lumerical's Script Workspace to the MATLAB\r\nworkspace. The resulting variable in the MATLAB workspace will have the\r\nsame name as in Lumerical, and will overwrite any existing variable with\r\nthe same name. If the variable does not exist in the Lumerical\r\nworkspace, the command will return an error.\r\n\r\nFor more information, please see the matlab command description.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.matlabput(var1, var2,...varN)      | The arguments to this command are    |\r\n|                                      | one or more variable names that      |\r\n|                                      | exist in the Lumerical variable      |\r\n|                                      | workspace.                           |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatlab(), matlabget()\r\n"}, "matlabsave": {"link": "https://kb.lumerical.com/en/ref_scripts_matlabsave.html", "text": "Save workspace data to Matlab .mat data files.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.matlabsave(\"\")                     | Save all workspace variables to a    |\r\n|                                      | .mat file that has the same name as  |\r\n|                                      | the simulation file.                 |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.matlabsave(\"filename\")             | Saves all workspace variables to the |\r\n|                                      | specified .mat file.                 |\r\n+--------------------------------------+--------------------------------------+\r\n| o.matlabsave(\"filename\", var1, ...,  | Saves the specified workspace        |\r\n| varN)                                | variables to the .mat file.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatlabput(), matlabsavelegacy(), matlabload(), vtksave()\r\n"}, "matlabsavelegacy": {"link": "https://kb.lumerical.com/en/ref_scripts_matlabsavelegacy.html", "text": "Save workspace data to Matlab .mat data using a legacy Matlab file\r\nformat required for Matlab version 7.2 and earlier. This file format\r\ndoes not support matrices larger than 2GB.\r\n\r\nThe command syntax is the same as the standard matlabsave command. See\r\nmatlabsave for details.\r\n\r\nSee Also\r\n\r\nmatlabsave()\r\n"}, "matrix": {"link": "https://kb.lumerical.com/en/ref_scripts_matrix.html", "text": "Initialize a matrix. All elements are set to zero.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| x = o.matrix(i,j,k,....)             | Initializes an i x j x k x ....      |\r\n|                                      | matrix.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlinspace()\r\n"}, "matrixdataset": {"link": "https://kb.lumerical.com/en/ref_scripts_matrixdataset.html", "text": "Creates an empty matrix dataset. Matrix datasets are used for data\r\n(attributes and parameters) that don't have any spatial dependence (i.e.\r\nReflection vs frequency). For datasets that do have x/y/z spatial\r\ncoordinates (i.e. electric fields), use rectilineardataset or\r\nunstructureddataset.\r\n\r\nMatrix datasets can be parameterized, and can contain an arbitrary\r\nnumber of attributes (see addattribute) and parameters (see\r\naddparameter).\r\n\r\nSee Dataset introduction for more information.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.matrixdataset()                    | Creates an empty dataset.            |\r\n+--------------------------------------+--------------------------------------+\r\n| o.matrixdataset(\"name\")              | Creates an empty dataset with the    |\r\n|                                      | name \"name\".                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrectilineardataset(), addattribute(), addparameter(), visualize(),\r\ngetparameter(), getattribute(), matrixdataset(), struct()\r\n"}, "max": {"link": "https://kb.lumerical.com/en/ref_scripts_max.html", "text": "Returns the maximum value in a matrix. For complex numbers, only the\r\nreal part is considered.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.max(x)                       | The maximum value in matrix x.       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmin(), abs(), mean(), amax(), amin()\r\n"}, "mcfit": {"link": "https://kb.lumerical.com/en/ref_scripts_mcfit.html", "text": "The script command runs the multi-coefficient fitting for a file\r\ncontaining multiple frequency dependent transmission values.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.mcfit(filenamein,filenameout,npole | Runs the multi-coefficient fitting   |\r\n| s,tolerance,automatic)               | for a file containing multiple       |\r\n| ()                                   | frequency dependent transmission     |\r\n|                                      | values (filenamein), where each      |\r\n|                                      | transmission depends on an operating |\r\n|                                      | point, and generates a file          |\r\n|                                      | containing the fitting data          |\r\n|                                      | (filenameout). The number of poles   |\r\n|                                      | and the fitting tolerance are        |\r\n|                                      | defined by parameters npoles and     |\r\n|                                      | tolerance respectively. The          |\r\n|                                      | parameter \u2018automatic\u2019 define if the  |\r\n|                                      | fitting will use the user defined    |\r\n|                                      | npoles or estimate the number of     |\r\n|                                      | poles automatically.                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmczfit()\r\n"}, "mczfit": {"link": "https://kb.lumerical.com/en/ref_scripts_mczfit.html", "text": "Fits a variable gain filter to a family of gain curve data, where each\r\ncurve in the family corresponds to a value of carrier density, producing\r\na file of gain filter coefficients to be used by the TWLM element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.mczfit(inputfilename,          | Fits a variable gain filter to a     |\r\n| outputfilebase, centrefrequency,     | family of gain curve data, where     |\r\n| samplerate, maxnumcoef, tol,         | each curve in the family corresponds |\r\n| maxiter, rectangular, rolloff)       | to a value of carrier density,       |\r\n|                                      | producing a file of gain filter      |\r\n|                                      | coefficients to be used by the TWLM  |\r\n|                                      | element.                             |\r\n|                                      |                                      |\r\n|                                      | \"inputfilename\" is a string          |\r\n|                                      | containing the name of the input     |\r\n|                                      | data file (including the suffix).    |\r\n|                                      |  The format of the input data is     |\r\n|                                      | specified below.                     |\r\n|                                      |                                      |\r\n|                                      | \"outputfilename\" is a string         |\r\n|                                      | containing the name (excluding the   |\r\n|                                      | suffix) of the file containing the   |\r\n|                                      | gain filter coefficients.            |\r\n|                                      |                                      |\r\n|                                      | \"centrefrequency\" is the center      |\r\n|                                      | frequency of the frequency band for  |\r\n|                                      | which the gain fitting is to be      |\r\n|                                      | performed.                           |\r\n|                                      |                                      |\r\n|                                      | \"samplerate\" is the bandwidth of the |\r\n|                                      | frequency band for which the gain    |\r\n|                                      | fitting is to be performed.          |\r\n|                                      |                                      |\r\n|                                      | \"maxnumcoef\" is the maximum number   |\r\n|                                      | of filter coefficients to be used to |\r\n|                                      | fit to the data.                     |\r\n|                                      |                                      |\r\n|                                      | \"tol\" is the tolerance               |\r\n|                                      |                                      |\r\n|                                      | \"rectangular\" is a bool value, it    |\r\n|                                      | defines the data format. \"true\"      |\r\n|                                      | represents 'real' and 'imaginary'    |\r\n|                                      | format; \"false\" represents polar     |\r\n|                                      | coordinate format with 'amplitude'   |\r\n|                                      | and 'phase'                          |\r\n|                                      |                                      |\r\n|                                      | \"maxiter\" is the maximum number of   |\r\n|                                      | iterations used in fitting to the    |\r\n|                                      | data.                                |\r\n|                                      |                                      |\r\n|                                      | \"rolloff\" is the fraction of the     |\r\n|                                      | bandwidth over which the input       |\r\n|                                      | frequency data is rolled off to the  |\r\n|                                      | average of the two values at the     |\r\n|                                      | band edges.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nImplementation detail\r\n\r\nThe format of the data file is as follows:\r\n\r\n(1, Nc)\r\n\r\ncarrierdensity\\_1, carrierdenisty\\_2, \u2026, carrierdensity\\_Nc\r\n\r\n(Ns, Nc+1)\r\n\r\nfreq\\_1                gain\\_1\\_1        gain\\_1\\_2        \u2026      \r\n gain\\_1\\_Nc\r\n\r\nfreq\\_2                gain\\_2\\_1        gain\\_2\\_2        \u2026      \r\n gain\\_2\\_Nc\r\n\r\n\u2026                        \u2026                \u2026                \u2026        \u2026\r\n\r\nfreq\\_Ns                gain\\_Ns\\_1        gain\\_Ns\\_2        \u2026      \r\n gain\\_Ns\\_Nc\r\n\r\nwhere the parameters are defined in the table below:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Nc                                   | The number of gain curves            |\r\n+--------------------------------------+--------------------------------------+\r\n| Ns                                   | The number of frequency samples      |\r\n+--------------------------------------+--------------------------------------+\r\n| carrierdensity\\_j                    | The carrier density corresponding to |\r\n|                                      | the j-th gain curve                  |\r\n+--------------------------------------+--------------------------------------+\r\n| freq\\_i                              | The i-th frequency sample            |\r\n+--------------------------------------+--------------------------------------+\r\n| gain\\_i\\_j                           | The gain value for the i-th          |\r\n|                                      | frequency sample in the j-th curve   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nNotes:\r\n\r\n1.The frequencies must be ordered in ascending order, such that\r\nfrequency\\_1 is  the lowest and frequency\\_Ns is the highest\r\n\r\n2.The gain curves and carrier densities must be ordered in descending\r\norder of carrier density. That is, carrierdensity\\_1 is the largest\r\ncarrier density and carrierdensity\\_Nc is the lowest carrier density,\r\nand gain\\_i\\_1 is  the gain  for the  largest carrier density and i-th\r\nfrequency sample and gain\\_i\\_Nc is the gain for the lowest carriest\r\ndensity and i-th frequency sample.\r\n\r\nThe return values are listed in the table below:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| fit\\_out                             | A struct with fields                 |\r\n+--------------------------------------+--------------------------------------+\r\n| frequency                            | A column vector of the frequency     |\r\n|                                      | sample points                        |\r\n+--------------------------------------+--------------------------------------+\r\n| input                                | A matrix with the column vectors     |\r\n|                                      | containing the input frequency       |\r\n|                                      | response to be fit for each          |\r\n|                                      | operating point                      |\r\n+--------------------------------------+--------------------------------------+\r\n| operatingPoint                       | A row vector containing the input    |\r\n|                                      | operating points corresponding to    |\r\n|                                      | the input frequency responses in the |\r\n|                                      | columns of the input matrix          |\r\n+--------------------------------------+--------------------------------------+\r\n| operatingPointInterpolated           | A row vector containing values of    |\r\n|                                      | the linearly interpolated values of  |\r\n|                                      | operating points between the input   |\r\n|                                      | values of operating points           |\r\n+--------------------------------------+--------------------------------------+\r\n| output                               | A matrix with the column vectors     |\r\n|                                      | containing the fit frequency         |\r\n|                                      | response for each input operating    |\r\n|                                      | point                                |\r\n+--------------------------------------+--------------------------------------+\r\n| outputInterpolated                   | A matrix with the column vectors     |\r\n|                                      | containing the fit frequency         |\r\n|                                      | response for each linearly           |\r\n|                                      | interpolated operating point         |\r\n|                                      | contained in row vector              |\r\n|                                      | \u2018operatingPointInterpolated\u2019.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nNote:\r\n\r\nThis script function also produces a gain filter coefficients to be used\r\nby the TWLM element. The name of the file will be outputfilename.mcfdb.\r\n\r\nSee Also\r\n\r\nmcfit()\r\n"}, "mean": {"link": "https://kb.lumerical.com/en/ref_scripts_mean.html", "text": "Returns the mean value in a matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.mean(a)                      | The mean value of the matrix a is    |\r\n|                                      | returned.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmax(), min(), abs(), sum()\r\n"}, "mesh": {"link": "https://kb.lumerical.com/en/ref_scripts_mesh.html", "text": "Produces a mesh of the current structure that is required to perform a\r\nsubsequent calculation (either to calculate the modes, or to perform a\r\nfrequency sweep). Produces a d-card called \"material\" which contains the\r\nmaterial properties of the meshed object.\r\n\r\nThis is equivalent to pressing the \"mesh structure\" button in the\r\ngraphical user interface.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.mesh()                             | Mesh the current simulation.         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetanalysis(), mesh(), findmodes(), frequencysweep(), analysis(),\r\ngetanalysis()\r\n"}, "meshgrid3dx": {"link": "https://kb.lumerical.com/en/ref_scripts_meshgrid3dx.html", "text": "Create a 3D meshgrid in the x direction\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.meshgrid3dx(x,y,z)           | The 3D version of meshgridx and      |\r\n|                                      | meshgridy.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmeshgridx(), meshgridy(), meshgrid3dy(), meshgrid3dz()\r\n"}, "meshgrid3dy": {"link": "https://kb.lumerical.com/en/ref_scripts_meshgrid3dy.html", "text": "Create a 3D meshgrid in the y direction\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.meshgrid3dy(x,y,z)           | The 3D version of meshgridx and      |\r\n|                                      | meshgridy.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmeshgridx(), meshgridy(), meshgrid3dx(), meshgrid3dz()\r\n"}, "meshgrid3dz": {"link": "https://kb.lumerical.com/en/ref_scripts_meshgrid3dz.html", "text": "Create a 3D meshgrid in the z direction\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.meshgrid3dz(x,y,z)           | The 3D version of meshgridx and      |\r\n|                                      | meshgridy.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmeshgridx(), meshgridy(), meshgrid3dx(), meshgrid3dy()\r\n"}, "meshgrid4d": {"link": "https://kb.lumerical.com/en/ref_scripts_meshgrid4d.html", "text": "Create a 4D meshgrid in any direction.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.meshgrid4d(dim, x1, x2, x3,  | The 4D meshgrid function.            |\r\n| x4)                                  |                                      |\r\n|                                      | dim specifies the dimension along    |\r\n|                                      | which to create the grid             |\r\n|                                      |                                      |\r\n|                                      | x1,x2,x3,x4 are the position vectors |\r\n|                                      | in each direction                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmeshgridx(), meshgridy(), meshgrid3dy(), meshgrid3dz()\r\n"}, "meshgridx": {"link": "https://kb.lumerical.com/en/ref_scripts_meshgridx.html", "text": "Create a 2D meshgrid in the x direction\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.meshgridx(x,y)               | If x and y are single column (or     |\r\n|                                      | single row vectors), of dimension    |\r\n|                                      | nX1 and mX1 respectively, the        |\r\n|                                      | command                              |\r\n|                                      |                                      |\r\n|                                      | \u2022X = meshgridx(x,y);                 |\r\n|                                      |                                      |\r\n|                                      | Will create a 2D matrix of dimension |\r\n|                                      | nXm where X(i,j)=x(i).               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nimage(), meshgridy(), meshgrid3dx()\r\n"}, "meshgridy": {"link": "https://kb.lumerical.com/en/ref_scripts_meshgridy.html", "text": "Create a 2D meshgrid in the y direction\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.meshgridy(x,y)               | If x and y are single column (or     |\r\n|                                      | single row vectors), of dimension    |\r\n|                                      | nX1 and mX1 respectively, the        |\r\n|                                      | command                              |\r\n|                                      |                                      |\r\n|                                      | \u2022Y = meshgridy(x,y);                 |\r\n|                                      |                                      |\r\n|                                      | Will create a 2D matrix of dimension |\r\n|                                      | nXm where Y(i,j)=y(j).               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nimage(), meshgridx(), meshgrid3dx()\r\n"}, "message": {"link": "https://kb.lumerical.com/en/ref_scripts_message.html", "text": "Creates a message window that displays some text. The user must hit\r\nEnter, or click the OK button to continue.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.message(\"text\")                    | Creates a window that displays text. |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewwizard()\r\n"}, "mie3d": {"link": "https://kb.lumerical.com/en/ref_scripts_mie3d.html", "text": "The function mie3d can be used to calculate the scattering, absorption,\r\nand extinction efficiencies of a spherical particle made of any\r\n(non-magnetic) material embedded in any ambient dielectric material. The\r\nefficiencies are simply the cross sections normalized to the geometric\r\ncross section of the particle (pi\\*r^2).\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note:                                                                    |\r\n|                                                                          |\r\n| This script command was introduced in the 2017a R5 release.              |\r\n+--------------------------------------------------------------------------+\r\n\r\nReferences:\r\n~~~~~~~~~~~\r\n\r\n[1] Bohren C.F. and D.R. Huffman, \u201cAbsorption and Scattering of Light by\r\nSmall Particles\u201d, John Wiley, New York, NY, 1983.\r\n\r\n[2] Documentation of M\u00e4tzler C. \u201cMATLAB Functions for Mie Scattering and\r\nAbsorption, Version 2\u201d, IAP Res. Rep. No. 2002-11, August, 2002.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| Q = o.mie3d(m,x)                     | The result Q is a struct which       |\r\n|                                      | contains quantities Qext, Qabs and   |\r\n|                                      | Qscat (Qext = Qabs+Qscat). These     |\r\n|                                      | will have the same length as x.      |\r\n|                                      |                                      |\r\n|                                      | The arguments are:                   |\r\n|                                      |                                      |\r\n|                                      | m: the ratio of the refractive index |\r\n|                                      | of the sphere to the refractive      |\r\n|                                      | index of the ambient dielectric      |\r\n|                                      | medium. This quantity may be         |\r\n|                                      | complex-valued because the           |\r\n|                                      | refractive index of the sphere may   |\r\n|                                      | be complex. This quantity should     |\r\n|                                      | either have a singleton value, or be |\r\n|                                      | the same length of x for dispersive  |\r\n|                                      | media.                               |\r\n|                                      |                                      |\r\n|                                      | x: the size parameter which is       |\r\n|                                      | defined as 2\\*pi\\*r/lambda0\\*n1      |\r\n|                                      | where lambda0 is the free space      |\r\n|                                      | wavelength, r is the sphere radius,  |\r\n|                                      | and n1 is the real-valued refractive |\r\n|                                      | index of the ambient medium.         |\r\n+--------------------------------------+--------------------------------------+\r\n| Q = o.mie3d(m,x,nmax)                | nmax : the maximum number of orders  |\r\n|                                      | to calculate for the mie             |\r\n|                                      | coefficients. The default value is   |\r\n|                                      | 0, and in this case the nmax =       |\r\n|                                      | ceil(x+4\\*x^(1/3))+2. There is       |\r\n|                                      | typically no need to modify the      |\r\n|                                      | default value.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmie3ds12()\r\n"}, "mie3ds12": {"link": "https://kb.lumerical.com/en/ref_scripts_mie3ds12.html", "text": "The function mie3ds12 can be used to calculate the scattered far field\r\nof any (non-magnetic) material embedded in any ambient dielectric\r\nmaterial. The function returns the scattering functions S1 and S2. The\r\nscattered far field can be calculated by\r\n\r\nWhere E\\|\\| is the field in the scattering plane and E\u22a5 is the field\r\northogonal to the scattering plane. The scattering plane is defined by\r\nthe incident and scattered directions. The angle \u03b8 is the angle within\r\nthe scattering plane (with respect to the incident angle) and the angle\r\n\u03c6 is the angle between the incident electric field and the scattering\r\nplane.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note:                                                                    |\r\n|                                                                          |\r\n| This script command was introduced in the 2017a R5 release.              |\r\n+--------------------------------------------------------------------------+\r\n\r\nReferences:\r\n~~~~~~~~~~~\r\n\r\n[1] Bohren C.F. and D.R. Huffman, \u201cAbsorption and Scattering of Light by\r\nSmall Particles\u201d, John Wiley, New York, NY, 1983.\r\n\r\n[2] Documentation of M\u00e4tzler C. \u201cMATLAB Functions for Mie Scattering and\r\nAbsorption, Version 2\u201d, IAP Res. Rep. No. 2002-11, August, 2002.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| S = o.mie3ds12(u,m,x)                | The result Q is a struct which       |\r\n|                                      | contains quantities S1, S2 which has |\r\n|                                      | dimensions NxM where N is the length |\r\n|                                      | of u and M is the length of x.       |\r\n|                                      |                                      |\r\n|                                      | The arguments are:                   |\r\n|                                      |                                      |\r\n|                                      | u: this is cos(q)                    |\r\n|                                      |                                      |\r\n|                                      | m: the ratio of the refractive index |\r\n|                                      | of the sphere to the refractive      |\r\n|                                      | index of the ambient dielectric      |\r\n|                                      | medium. This quantity may be         |\r\n|                                      | complex-valued because the           |\r\n|                                      | refractive index of the sphere may   |\r\n|                                      | be complex. This quantity should     |\r\n|                                      | either have a singleton value, or be |\r\n|                                      | the same length of x for dispersive  |\r\n|                                      | media.                               |\r\n|                                      |                                      |\r\n|                                      | x: the size parameter which is       |\r\n|                                      | defined as 2\\*pi\\*r/lambda0\\*n1      |\r\n|                                      | where lambda0 is the free space      |\r\n|                                      | wavelength, r is the sphere radius   |\r\n|                                      | and n1 is the real-valued refractive |\r\n|                                      | index of the ambient medium.         |\r\n+--------------------------------------+--------------------------------------+\r\n| S = o.mie3ds12(u,m,x,nmax)           | nmax : the maximum number of orders  |\r\n|                                      | to calculate for the mie             |\r\n|                                      | coefficients. The default value is   |\r\n|                                      | 0, and in this case the nmax =       |\r\n|                                      | ceil(x+4\\*x^(1/3))+2. There is       |\r\n|                                      | typically no need to modify the      |\r\n|                                      | default value.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmie3d()\r\n"}, "min": {"link": "https://kb.lumerical.com/en/ref_scripts_min.html", "text": "Returns the minimum value in a matrix. For complex numbers, only the\r\nreal part is considered.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.min(x)                       | The minimum value in matrix x.       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmax(), abs(), mean(), amax(), amin()\r\n"}, "mod": {"link": "https://kb.lumerical.com/en/ref_scripts_mod.html", "text": "Finds the modulus after division.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.mod(x,y)                     | Returns x - n\\*y where n =           |\r\n|                                      | floor(x/y) if y is not equal to 0.   |\r\n|                                      | The input x can be a real array or a |\r\n|                                      | real scalar, while y must be a real  |\r\n|                                      | scalar.                              |\r\n|                                      |                                      |\r\n|                                      | The following are true by            |\r\n|                                      | convention:                          |\r\n|                                      |                                      |\r\n|                                      | mod(x,0) = x                         |\r\n|                                      |                                      |\r\n|                                      | mod(x,x) = 0                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfloor(), ceil()\r\n"}, "move": {"link": "https://kb.lumerical.com/en/ref_scripts_move.html", "text": "Moves selected objects.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.move(dx)                           | In 2D or 3D, move by dx              |\r\n+--------------------------------------+--------------------------------------+\r\n| o.move(dx,dy)                        | In 2D or 3D, move by dx and dy.      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.move(dx,dy,dz)                     | In 3D, move by dx, dy, and dz.       |\r\n|                                      |                                      |\r\n|                                      | In 2D, dz will be ignored.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopy(), select()\r\n"}, "mult": {"link": "https://kb.lumerical.com/en/ref_scripts_mult.html", "text": "Performs matrix multiplication of two or more matrices. The dimensions\r\nof the matrices have to match.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.mult(A,B,...)                | Returns the matrix multiplication of |\r\n|                                      | matrices A, B, C ... Dimension of    |\r\n|                                      | matrices must match; for example, if |\r\n|                                      | A is an MxN matrix and B is a NXP    |\r\n|                                      | matrix, mult(A,B) has dimensions     |\r\n|                                      | MxP.                                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nand(), or(), eig(), permute(), reshape(), inv()\r\n"}, "mv": {"link": "https://kb.lumerical.com/en/ref_scripts_mv.html", "text": "Moves a file to a new location. Path can be specified.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.mv(\"file1\",\"file2\")                | Moves file1 to file2.                |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.mv(\"path1\\\\file1\",\"path2\\\\file2\")  | Moves file1 in path1 to file2 in     |\r\n|                                      | path2.                               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncp(), pwd()\r\n"}, "near2far": {"link": "https://kb.lumerical.com/en/ref_scripts_near2far.html", "text": "Calculates the far field at the specified points using the provided near\r\nfield monitor data.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.near2far(nearfield,          | Calculates the far field using the   |\r\n| farfield, n)                         | provided near field monitor data at  |\r\n|                                      | the specified far field points. The  |\r\n|                                      | input unstructured data set          |\r\n|                                      | specifying the near fields must      |\r\n|                                      | contain an attribute named 'E'       |\r\n|                                      | parametrized by frequency. The       |\r\n|                                      | output is an unstructured data set   |\r\n|                                      | with an attribute named 'E'          |\r\n|                                      | containing the far field. The far    |\r\n|                                      | field frequencies are determined by  |\r\n|                                      | the near field frequencies while the |\r\n|                                      | far field points, connectivity       |\r\n|                                      | matrix and surface normals           |\r\n|                                      | associated with the output data set  |\r\n|                                      | are taken from the unstructured data |\r\n|                                      | set specifying the far field points. |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| nearfield      | required       |                | unstructured   | Near field     |\r\n|                |                |                | data set       | data in the    |\r\n|                |                |                |                | format         |\r\n|                |                |                |                | returned by    |\r\n|                |                |                |                | DFT monitors.  |\r\n|                |                |                |                | The electric   |\r\n|                |                |                |                | field can be   |\r\n|                |                |                |                | sampled on a   |\r\n|                |                |                |                | segmented line |\r\n|                |                |                |                | or on a        |\r\n|                |                |                |                | triangulated   |\r\n|                |                |                |                | surface. If    |\r\n|                |                |                |                | sampled on a   |\r\n|                |                |                |                | segmented      |\r\n|                |                |                |                | line, the      |\r\n|                |                |                |                | electric field |\r\n|                |                |                |                | is assumed to  |\r\n|                |                |                |                | come from a 2D |\r\n|                |                |                |                | simulation and |\r\n|                |                |                |                | the 2D         |\r\n|                |                |                |                | integral       |\r\n|                |                |                |                | kernel is used |\r\n|                |                |                |                | for the far    |\r\n|                |                |                |                | field          |\r\n|                |                |                |                | projection.    |\r\n|                |                |                |                | Similarly, if  |\r\n|                |                |                |                | the electric   |\r\n|                |                |                |                | field is       |\r\n|                |                |                |                | sampled on a   |\r\n|                |                |                |                | triangulated   |\r\n|                |                |                |                | surface, it is |\r\n|                |                |                |                | assumed to     |\r\n|                |                |                |                | come from a 3D |\r\n|                |                |                |                | simulation and |\r\n|                |                |                |                | the 3D         |\r\n|                |                |                |                | integral       |\r\n|                |                |                |                | kernel is used |\r\n|                |                |                |                | for the        |\r\n|                |                |                |                | projection     |\r\n|                |                |                |                | (see the       |\r\n|                |                |                |                | provided       |\r\n|                |                |                |                | reference).    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| farfield       | required       |                | unstructured   | Far field      |\r\n|                |                |                | data set       | points to be   |\r\n|                |                |                |                | used in the    |\r\n|                |                |                |                | projection. If |\r\n|                |                |                |                | the near       |\r\n|                |                |                |                | fields are     |\r\n|                |                |                |                | sampled on     |\r\n|                |                |                |                | segmented      |\r\n|                |                |                |                | line, the far  |\r\n|                |                |                |                | field points   |\r\n|                |                |                |                | must be        |\r\n|                |                |                |                | specified      |\r\n|                |                |                |                | using a        |\r\n|                |                |                |                | segmented      |\r\n|                |                |                |                | line.          |\r\n|                |                |                |                | Similarly, if  |\r\n|                |                |                |                | the near       |\r\n|                |                |                |                | fields are     |\r\n|                |                |                |                | sampled on a   |\r\n|                |                |                |                | triangulated   |\r\n|                |                |                |                | surface, the   |\r\n|                |                |                |                | far field      |\r\n|                |                |                |                | points must be |\r\n|                |                |                |                | sampled on a   |\r\n|                |                |                |                | triangulated   |\r\n|                |                |                |                | surface. The   |\r\n|                |                |                |                | command        |\r\n|                |                |                |                | createspherica |\r\n|                |                |                |                | lsurface       |\r\n|                |                |                |                | can be used to |\r\n|                |                |                |                | easily create  |\r\n|                |                |                |                | an             |\r\n|                |                |                |                | unstructured   |\r\n|                |                |                |                | data set with  |\r\n|                |                |                |                | a segmented    |\r\n|                |                |                |                | line or a      |\r\n|                |                |                |                | triangulated   |\r\n|                |                |                |                | surface.       |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| n              | optional       | 1.0            | number or      | Background     |\r\n|                |                |                | vector         | refractive     |\r\n|                |                |                |                | index of the   |\r\n|                |                |                |                | far field      |\r\n|                |                |                |                | medium. It can |\r\n|                |                |                |                | be a single    |\r\n|                |                |                |                | number or a    |\r\n|                |                |                |                | vector with    |\r\n|                |                |                |                | the same       |\r\n|                |                |                |                | length as the  |\r\n|                |                |                |                | near field     |\r\n|                |                |                |                | frequency      |\r\n|                |                |                |                | parameter.     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: Far field integration                                              |\r\n|                                                                          |\r\n| For integration of far field over a range of angles, the script command  |\r\n| quadtri can be used. See quadtri for more information.                   |\r\n+--------------------------------------------------------------------------+\r\n\r\nSee Also\r\n\r\ncreatesphericalsurface()\r\n"}, "new": {"link": "https://kb.lumerical.com/en/ref_scripts_new.html", "text": "Same as newproject. It creates a new simulation project file. If there\r\nis an existing project file in the GUI, the old project file will not be\r\nsaved.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.new()                              | Creates a new project file.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewproject(), exit()\r\n"}, "newproject": {"link": "https://kb.lumerical.com/en/ref_scripts_newproject.html", "text": "Creates a new simulation project file. If there is an existing project\r\nfile in the GUI, the old project file will not be saved.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.newproject()                       | Creates a new layout environment.    |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+----+\r\n+----+----+\r\n+----+----+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n+--------------------------------------+--------------------------------------+\r\n|                                      | +----+----+----+                     |\r\n|                                      | +----+----+----+                     |\r\n|                                      | +----+----+----+                     |\r\n|                                      | +----+----+----+                     |\r\n|                                      | +----+----+----+                     |\r\n|                                      | +----+----+----+                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnew(), exit()\r\n"}, "newwizard": {"link": "https://kb.lumerical.com/en/ref_scripts_newwizard.html", "text": "Used to create a new user defined wizard. Opens a new wizard window.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.newwizard( w, h, \"title\")          | \u2022w and h (width and height) are      |\r\n|                                      | specified in pixels. The minimum     |\r\n|                                      | values for w and h are 200.          |\r\n|                                      |                                      |\r\n|                                      | \u2022title is the wizard window title.   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmessage()\r\n"}, "newwizardpage": {"link": "https://kb.lumerical.com/en/ref_scripts_newwizardpage.html", "text": "This creates a page for the wizard and should be done before adding any\r\nwidgets.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.newwizardpage( \"label1\")           | Creates a button with the label      |\r\n|                                      | \"label1\". Typically, this will be    |\r\n|                                      | \"Done\" or \"OK\".                      |\r\n+--------------------------------------+--------------------------------------+\r\n| o.newwizardpage( \"label1\", \"label2\") | Creates two buttons with labels      |\r\n|                                      | \"label1\" and \"label2\". These will    |\r\n|                                      | typically be \"Next\" and \"Back\" or    |\r\n|                                      | \"Done\" and \"Back\".                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewwizardpage()\r\n"}, "nonorm": {"link": "https://kb.lumerical.com/en/ref_scripts_nonorm.html", "text": "Does not normalize the data to the source power. The actual field\r\nintensities will be used in all calculations. This function controls the\r\ncheckbox located in Settings - Normalization state. Note, this command\r\nworks in both the Layout and Analysis mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.nonorm()                           | Use no normalization.                |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncwnorm()\r\n"}, "norm": {"link": "https://kb.lumerical.com/en/ref_scripts_norm.html", "text": "Returns the natural norm of a matrix induced by the L2-norm (spectral\r\nnorm). For a matrix A this is the square root of the maximum eigenvalue\r\nof the matrix product AHA, where AH is the conjugate transpose of A.\r\n\r\nNote that for a N-dimensional complex vector x = [x1,x2,...,xN] this\r\nreduces to the usual norm:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.norm(y)                      | Returns the spectral norm of the     |\r\n|                                      | matrix y.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsqrt(), sum(), conj(), max(), eig(), mult(), ctranspose()\r\n"}, "now": {"link": "https://kb.lumerical.com/en/ref_scripts_now.html", "text": "Display the Unix time\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.now()                        | Displays the current UNIX time       |\r\n+--------------------------------------+--------------------------------------+\r\n"}, "num2str": {"link": "https://kb.lumerical.com/en/ref_scripts_num2str.html", "text": "Converts an integer, floating point number, or matrix into a string.\r\nMatrices can only be 1D or 2D. Use the format script command to change\r\nthe precision of the output.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.num2str(x)                   | Converts the number x into a string. |\r\n|                                      | x can also be a 1D or 2D matrix. The |\r\n|                                      | tab character (rather than space)    |\r\n|                                      | will be used as delimiter between    |\r\n|                                      | columns.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nendl(), write(), format(), str2num(), findstring(), replace(),\r\nreplacestring(), substring(), eval(), lower(), upper(), toscript()\r\n"}, "nummodes": {"link": "https://kb.lumerical.com/en/ref_scripts_nummodes.html", "text": "Returns the number of eigenmodes found in the FDE solver mode list.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| n=o.nummodes()                       | n will be equal to the number of     |\r\n|                                      | modes found.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetanalysis(), mesh(), selectmode(), frequencysweep(), coupling(),\r\noverlap(), bestoverlap(), propagate()\r\n"}, "ones": {"link": "https://kb.lumerical.com/en/ref_scripts_ones.html", "text": "Initialize a matrix. All elements are set to one.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| x = o.ones(i,j,k,....)               | Initializes an i x j x k x ....      |\r\n|                                      | matrix.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlinspace(), matrix(), zeros()\r\n"}, "opensession": {"link": "https://kb.lumerical.com/en/ref_scripts_opensession.html", "text": "An interoperability command that opens a server session of selected\r\nLumerical product via automation API. Once the session is opened, client\r\nproduct can call the server to execute arbitrary Lumerical script\r\ncommand(s) and execute them. Opened Lumerical session also allows to\r\nsend and get variables from/to workspace.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| s2=o.opensession('device')           | When executed, this command will     |\r\n|                                      | open a session of Device via the     |\r\n|                                      | automation API.                      |\r\n|                                      |                                      |\r\n|                                      | Accepted parameters:                 |\r\n|                                      |                                      |\r\n|                                      | 'fdtd'                               |\r\n|                                      |                                      |\r\n|                                      | 'mode'                               |\r\n|                                      |                                      |\r\n|                                      | 'device'                             |\r\n|                                      |                                      |\r\n|                                      | 'interconnect'                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nclosesession(), putremotedata(), getremotedata(), evalremote()\r\n"}, "operatingsystem": {"link": "https://kb.lumerical.com/en/ref_scripts_operatingsystem.html", "text": "Returns the current operating system.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.operatingsystem()                  | Returns the current operating        |\r\n|                                      | system. Valid return values are      |\r\n|                                      | \u201cwindows\u201d, \u201capple\u201d or \u201clinux\u201d.       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n \r\n=\r\n\r\nSee Also\r\n\r\n\r\n"}, "optimizeposition": {"link": "https://kb.lumerical.com/en/ref_scripts_optimizeposition.html", "text": "The optimizeposition command calculates the x shift, y shift, and z\r\nshift resulting in maximum overlap between the specified mode and d-card\r\nwhen using the FDE solver.\r\n\r\nThe x shift, y shift, and z shift correspond to the offset in the d-card\r\nprofile in x, y, and z.\r\n\r\nThis function also populates the overlap and power coupling as well as\r\nthe x shift, y shift, and z shift positions in the Overlap analysis tab\r\nof the Eigensolver Analysis window, similarly to when you click on the\r\n\"Optimize position\" button in the GUI.\r\n\r\nSee the overlap function for more details about overlap and coupling\r\ncalculations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.optimizeposition(mode        | \u2022mode number: the mode number in the |\r\n| number, d-card number)               | mode list                            |\r\n|                                      |                                      |\r\n|                                      | \u2022d-card number: the number of the    |\r\n|                                      | d-card in the deck                   |\r\n|                                      |                                      |\r\n|                                      | Note that the \"shift d-card center\"  |\r\n|                                      | option must be selected in order to  |\r\n|                                      | use this function.                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopydcard(), findmodes(), coupling(), overlap(), bestoverlap(),\r\npropagate(), expand(), setanalysis()\r\n"}, "or": {"link": "https://kb.lumerical.com/en/ref_scripts_or2.html", "text": "Is the logical OR function. Imaginary components of x and y are ignored.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = y \\| x()                       | If the real part of either or both   |\r\n|                                      | of x,y is non-zero, then return 1.   |\r\n|                                      | Otherwise return 0.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| y o.or x()                           | Same as \\|.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nand(), or()\r\n"}, "orbit": {"link": "https://kb.lumerical.com/en/ref_scripts_orbit.html", "text": "This command performs an elliptical viewing orbit of the structure in\r\nthe perspective view. Note that the commands setview, getview and redraw\r\nmake it possible to create any type of orbit you would like in your own\r\nscript file.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.orbit()                            | Performs an orbit of the current     |\r\n|                                      | perspective view.                    |\r\n+--------------------------------------+--------------------------------------+\r\n| o.orbit(zoom\\_factor)                | Performs an orbit with the specified |\r\n|                                      | minimum zoom factor. By default the  |\r\n|                                      | zoom factor is 1.5.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.orbit(zoom\\_factor, frame\\_rate)   | Performs an orbit with the specified |\r\n|                                      | frame rate specified in frames per   |\r\n|                                      | second. The default frame rate is    |\r\n|                                      | 15.                                  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.orbit(zoom\\_factor, frame\\_rate,   | The orbit will be streamed to the    |\r\n| \"filename\")                          | mpeg file filename for later         |\r\n|                                      | viewing.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetview(), getview(), framerate()\r\n"}, "overlap": {"link": "https://kb.lumerical.com/en/ref_scripts_overlap.html", "text": "Returns the overlap and power coupling between two modes calculated by\r\nthe FDE solver or recorded by frequency monitors from a varFDTD\r\nsimulation. In FDTD, it calculates the overlap and power coupling\r\nbetween the field profiles (modes) recorded by two frequency monitors.\r\n\r\nOverlap\r\n~~~~~~~\r\n\r\nOverlap measures the fraction of electromagnetic fields that overlap\r\nbetween the two field profiles (modes). This is also the fraction of\r\npower from mode2 that can propagate in mode1 (for both forward and\r\nbackward propagating fields). The absolute value of the entire formula\r\nis to ensure it is positive.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: Comparison with Mode expansion monitor                             |\r\n|                                                                          |\r\n| This overlap calculation is similar to the calculations provided by the  |\r\n| Expansion monitor, but it is designed for use in a slightly different    |\r\n| situation.                                                               |\r\n|                                                                          |\r\n| - The expansion monitor is intended for situations where the input file  |\r\n| profile (mode2) is known within the same waveguide structure where mode1 |\r\n| exists.                                                                  |\r\n|                                                                          |\r\n| - The overlap calculation is intended for situations where the input     |\r\n| field profile (mode2) is known in a different waveguide structure than   |\r\n| the one where mode1 exists. For example, mode1 and mode2 are the         |\r\n| fundamental modes of two different waveguide structures, and the overlap |\r\n| function is being used to estimate the efficiency of an end-fire         |\r\n| coupling arrangement between the two waveguides.                         |\r\n|                                                                          |\r\n| The overlap calculation can provide accurate results in many situations, |\r\n| but it is worth noting that it is an approximate technique. One key      |\r\n| assumption is that both mode1 and mode2 only contain fields that are     |\r\n| propagating in a single direction.                                       |\r\n|                                                                          |\r\n| The overlap calculation defined above can be written in terms of the     |\r\n| quantities provided by the expansion monitor, as shown below. This       |\r\n| represents the total power carried by the ith mode, including both the   |\r\n| forward and backward propagating fields, normalized to the input power.  |\r\n| See the online help for more information on Using Mode Expansion         |\r\n| Monitors.                                                                |\r\n|                                                                          |\r\n| In the event that real(N) or real(P) is 0, the \"real\" can be replaced    |\r\n| with \"abs\".                                                              |\r\n+--------------------------------------------------------------------------+\r\n\r\nPower Coupling\r\n~~~~~~~~~~~~~~\r\n\r\nPower Coupling measures the amount of power that can couple from mode2\r\ninto a forward propagating wave with the mode profile of mode1. The\r\nremaining power that can propagate in this mode will couple into the\r\nbackwards propagating mode. Therefore, the power coupling is always less\r\nthan or equal to the overlap. If the two modes have the same effective\r\nindex, then the power coupling will be equal to the overlap.\r\n\r\nA dielectric interface is a simple example. The modes (i.e. a plane\r\nwave) on each side of the interface have an overlap of 1, but the power\r\ncoupling will be less than one. This is due to reflections caused by the\r\nindex change at the interface.\r\n\r\nThese calculations are based on the methods described in Snyder and Love\r\n\"Optical Waveguide Theory\", Chapman & Hall, London, England, 1983.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note:                                                                    |\r\n|                                                                          |\r\n| For an exact power coupling result at an interface, it is necessary to   |\r\n| know the complete set of waveguide modes on both the input and output    |\r\n| sides, and the MODE Solutions' EME solver can be used. See Overlap       |\r\n| analysis for more information.                                           |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.overlap(mode2, mode1)        | \u2022mode2, mode1: the mode names (in    |\r\n|                                      | FDTD, use the names of the frequency |\r\n|                                      | monitors, \"m1\" and \"m2\" instead)     |\r\n|                                      |                                      |\r\n|                                      | \u2022out(1): the mode overlap            |\r\n|                                      |                                      |\r\n|                                      | \u2022out(2): the mode power coupling     |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.overlap(mode2, mode1, x,     | Mode alignment can be adjusted       |\r\n| y,z)                                 | before overlap is calculated.        |\r\n|                                      |                                      |\r\n|                                      | \u2022x offset                            |\r\n|                                      |                                      |\r\n|                                      | \u2022y offset                            |\r\n|                                      |                                      |\r\n|                                      | \u2022z offset                            |\r\n|                                      |                                      |\r\n|                                      | The offset is applied to the second  |\r\n|                                      | mode listed.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopydcard(), findmodes(), coupling(), bestoverlap(), propagate(),\r\nexpand(), expand2(), optimizeposition()\r\n"}, "packagedesignkit": {"link": "https://kb.lumerical.com/en/ref_scripts_packagedesignkit.html", "text": "Crates a .cml from a existing folder under Custom library.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.packagedesignkit(name, filename,   | Creates a design kit file named      |\r\n| key, overwrite)                      | \u2018filename.cml\u2019 from the custom       |\r\n|                                      | folder named \u2018name\u2019 using an         |\r\n|                                      | optional obfuscation key \u2018key\u2019. If   |\r\n|                                      | 'key' = \"none\", it will packaged     |\r\n|                                      | without encryption. The default      |\r\n|                                      | value for 'key' is the first key     |\r\n|                                      | available. If \u2018overwrite\u2019 is true,   |\r\n|                                      | it will overwrite an existing design |\r\n|                                      | kit file with the same name, if      |\r\n|                                      | \u2018overwrite\u2019 is false, it will ask    |\r\n|                                      | the user for confirmation before     |\r\n|                                      | overwriting. The default setting for |\r\n|                                      | 'overwrite' is false.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ninstalldesignkit(), importschematic(), exportschematic(),\r\ncustomlibrary(), exportlib()\r\n"}, "pastefromclipboard": {"link": "https://kb.lumerical.com/en/ref_scripts_pastefromclipboard.html", "text": "Pastes the contents of the system clipboard into the layout environment.\r\nEquivalent to 'Ctrl-V'.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.pastefromclipboard()               | Paste contents of system clipboard   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopytoclipboard(), copy()\r\n"}, "pastesweep": {"link": "https://kb.lumerical.com/en/ref_scripts_pastesweep.html", "text": "Pastes a sweep/optimization/Monte Carlo analysis item from clipboard to\r\nthe \"Optimizations and Sweeps\" tab.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.pastesweep(\"name\")                 | Pastes a sweep/optimization/Monte    |\r\n|                                      | Carlo analysis item from clipboard.  |\r\n|                                      |                                      |\r\n|                                      | \"name\" is the absolute name of the   |\r\n|                                      | parent item where the new analysis   |\r\n|                                      | item will be pasted as a child. If   |\r\n|                                      | the name is empty, paste the new     |\r\n|                                      | analysis item as a top-most item.    |\r\n|                                      |                                      |\r\n|                                      | Returns the absolute name of the new |\r\n|                                      | item. Returns empty string if paste  |\r\n|                                      | got failed.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddsweep(), deletesweep(), copysweep(), insertsweep(), getsweep(),\r\nsetsweep(), addsweepparameter(), addsweepresult(),\r\nremovesweepparameter(), removesweepresult()\r\n"}, "pause": {"link": "https://kb.lumerical.com/en/ref_scripts_pause.html", "text": "Pauses program for a time.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.pause(time)                        | Pauses script for time, measured in  |\r\n|                                      | seconds. Hit the space bar to force  |\r\n|                                      | the script to continue. Hit the      |\r\n|                                      | ESCAPE key to break the script at    |\r\n|                                      | this point.                          |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nbreak()\r\n"}, "permute": {"link": "https://kb.lumerical.com/en/ref_scripts_permute.html", "text": "This function is a more general version of the transpose function. It\r\nallows matrix dimensions to be rearranged as needed.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.permute(A, [i,j,k, ...])     | Returns a matrix with the same       |\r\n|                                      | elements as A but with rearranged    |\r\n|                                      | dimensions i,j,k, etc.               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nand(), or(), eig(), reshape(), mult(), inv(), flip(), transpose(),\r\nsize()\r\n"}, "pinch": {"link": "https://kb.lumerical.com/en/ref_scripts_pinch.html", "text": "Removes singleton dimensions from a matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.pinch(x)                     | Removes all singleton dimensions.    |\r\n|                                      | For example, if x is a matrix of     |\r\n|                                      | dimension 1x1x1xM, then              |\r\n|                                      |                                      |\r\n|                                      | \u2022y=pinch(x);                         |\r\n|                                      |                                      |\r\n|                                      | will return a Mx1 matrix where       |\r\n|                                      |                                      |\r\n|                                      | \u2022y(i) = x(1,1,1,i);                  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.pinch(x,i)                         | Removes a specified dimension. If x  |\r\n|                                      | is an NxMxKxP matrix then            |\r\n|                                      |                                      |\r\n|                                      | \u2022y=pinch(x,2);                       |\r\n|                                      |                                      |\r\n|                                      | will return an NxKxP matrix where    |\r\n|                                      |                                      |\r\n|                                      | \u2022y(i,j,k) = x(i,1,j,k)               |\r\n+--------------------------------------+--------------------------------------+\r\n| o.pinch(x,i,j)                       | Removes a specified dimension but    |\r\n|                                      | keeps a specific index for the       |\r\n|                                      | dimension being removed. If x is an  |\r\n|                                      | NxMxKxP matrix then                  |\r\n|                                      |                                      |\r\n|                                      | \u2022y=pinch(x,2,4);                     |\r\n|                                      |                                      |\r\n|                                      | will return an NxKxP matrix where    |\r\n|                                      |                                      |\r\n|                                      | \u2022y(i,j,k) = x(i,4,j,k)               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfind(), size(), flip()\r\n"}, "plot": {"link": "https://kb.lumerical.com/en/ref_scripts_plot.html", "text": "Creates line plots. All data sets must be sampled on the same position\r\nvector.\r\n\r\nSee plotxy for data sets that are sampled on different position vectors.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.plot(x,y)                    | Creates a plot of y vs x, y and x    |\r\n|                                      | are both 1D vectors with the same    |\r\n|                                      | length.                              |\r\n|                                      |                                      |\r\n|                                      | The figure number is returned.       |\r\n+--------------------------------------+--------------------------------------+\r\n| o.plot(x,y)                          | x is a nx1 matrix.                   |\r\n|                                      |                                      |\r\n|                                      | y is a nxm matrix.                   |\r\n|                                      |                                      |\r\n|                                      | This will generate a graph with m    |\r\n|                                      | lines. (y(1:n,1) vs x, y(1:n,2) vs   |\r\n|                                      | x, etc)                              |\r\n+--------------------------------------+--------------------------------------+\r\n| o.plot(x,y1,y2,y3)                   | Creates a plot with 3 curves, x,y1,  |\r\n|                                      | y2, y3 must be the same length,      |\r\n|                                      | returns the figure number.           |\r\n+--------------------------------------+--------------------------------------+\r\n| o.plot(x,y, \"x label\", \"y label\",    | Creates a plot of y vs x with axis   |\r\n| \"title\")                             | labels and a title, returns the      |\r\n|                                      | figure number.                       |\r\n+--------------------------------------+--------------------------------------+\r\n| o.plot(x,y, \"x label\", \"y label\",    | Creates a plot with desired options. |\r\n| \"title\", \"options\")                  | Options are listed in the table      |\r\n|                                      | below.                               |\r\n|                                      |                                      |\r\n|                                      | Returns the figure number.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| Parameter          |                    | Description        | Acceptable values  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    | Output             |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n| options            | optional           | plot setting       | +----+----------+  |\r\n|                    |                    | options            | |    | Expand   |  |\r\n|                    |                    |                    | +----+----------+  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    | +----------------- |\r\n|                    |                    |                    | ------------------ |\r\n|                    |                    |                    | ------------------ |\r\n|                    |                    |                    | ------------------ |\r\n|                    |                    |                    | ---+               |\r\n|                    |                    |                    | | \u2022plot type       |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | line             |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | point            |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | bar              |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022marker style    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | x                |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | o                |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | +                |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | s (square)       |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | d (diamond)      |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022pen             |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | --               |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | :                |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | -.               |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | -..              |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022x axis location |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | top              |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | bottom           |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022y axis location |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | left             |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | right            |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022color           |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | blue, red, etc   |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022greyscale       |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022plot lines      |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022plot bar        |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022plot points     |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022marker size (de |\r\n|                    |                    |                    | fault=4)           |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022linewidth (defa |\r\n|                    |                    |                    | ult=1)             |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | |                  |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |                    |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | | \u2022any comma separ |\r\n|                    |                    |                    | ated list of the a |\r\n|                    |                    |                    | bove, for example  |\r\n|                    |                    |                    | \"log10x,greyscale\" |\r\n|                    |                    |                    |    |               |\r\n|                    |                    |                    | +----------------- |\r\n|                    |                    |                    | ------------------ |\r\n|                    |                    |                    | ------------------ |\r\n|                    |                    |                    | ------------------ |\r\n|                    |                    |                    | ---+               |\r\n+--------------------+--------------------+--------------------+--------------------+\r\n\r\nSee Also\r\n\r\nplotxy(), image(), closeall(), setplot(), exportfigure(), visualize(),\r\nvectorplot(), polar()\r\n"}, "plotxy": {"link": "https://kb.lumerical.com/en/ref_scripts_plotxy.html", "text": "Creates line plots. In particular, this function is used when the data\r\nsets are sampled on different position vectors.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.plotxy(x,y)                  | Creates a plot of y vs x, y and x    |\r\n|                                      | are both 1D vectors with the same    |\r\n|                                      | length. The figure number is         |\r\n|                                      | returned.                            |\r\n+--------------------------------------+--------------------------------------+\r\n| o.plotxy(x1,y1,x2,y2,xn,yn)          | Creates a plot with multiple curves. |\r\n|                                      | The xn-yn pairs must have the same   |\r\n|                                      | length, but x1, x2, and xn can have  |\r\n|                                      | different start-end values and       |\r\n|                                      | resolutions. The figure number is    |\r\n|                                      | returned.                            |\r\n+--------------------------------------+--------------------------------------+\r\n| o.plotxy(x1,y1,x2,y2, \"x label\", \"y  | Creates line plots with axis labels  |\r\n| label\", \"title\")                     | and a title, returns the figure      |\r\n|                                      | number.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplot(), legend(), image(), closeall(), setplot(), exportfigure(),\r\nvisualize(), vectorplot(), holdon()\r\n"}, "polar": {"link": "https://kb.lumerical.com/en/ref_scripts_polar.html", "text": "Creates polar plots. All data sets must be sampled on the same array of\r\nangle values.\r\n\r\nSee polar2 for data sets that are sampled on different arrays of theta\r\nvalues.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.polar(theta,rho)             | Creates a polar coordinate plot of   |\r\n|                                      | the angle theta versus the radius    |\r\n|                                      | rho. theta is the angle from the     |\r\n|                                      | x-axis to the radius vector          |\r\n|                                      | specified in radians; rho is the     |\r\n|                                      | length of the radius vector.         |\r\n|                                      |                                      |\r\n|                                      | Theta and rho can be vectors of the  |\r\n|                                      | same length, or if the length of     |\r\n|                                      | theta is n, then rho can be a nxm    |\r\n|                                      | matrix, which corresponds to m sets  |\r\n|                                      | of rho values.                       |\r\n|                                      |                                      |\r\n|                                      | The figure number is returned.       |\r\n+--------------------------------------+--------------------------------------+\r\n| o.polar(theta,rho1,rho2,rho3)        | Creates a polar plot with three      |\r\n|                                      | curves. theta, rho1, rho2, rho3 must |\r\n|                                      | be of the same length. The figure    |\r\n|                                      | number is returned.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.polar(theta,rho,\"x label\", \"y      | Creates a polar plot with axis       |\r\n| label\", \"title\")                     | labels and a title. The figure       |\r\n|                                      | number is returned.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.polar(theta,rho,\"x label\", \"y      | Creates a polar plot with desired    |\r\n| label\", \"title\", \"options\")          | options. Options can be be           |\r\n|                                      |                                      |\r\n|                                      | \u2022greyscale                           |\r\n|                                      |                                      |\r\n|                                      | \u2022polar (use with plot command to     |\r\n|                                      | generate the same plot as the polar  |\r\n|                                      | script command)                      |\r\n|                                      |                                      |\r\n|                                      | \u2022any comma separated list of the     |\r\n|                                      | above                                |\r\n|                                      |                                      |\r\n|                                      | Returns the figure number.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npolar2(), legend(), image(), closeall(), setplot(), exportfigure(),\r\npolarimage(), plot()\r\n"}, "polar2": {"link": "https://kb.lumerical.com/en/ref_scripts_polar2.html", "text": "Creates polar plots. In particular, this function is used when the data\r\nsets are sampled on different arrays of angle values.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.polar2(theta,rho)            | Creates a polar coordinate plot of   |\r\n|                                      | the angle theta versus the radius    |\r\n|                                      | rho. theta is the angle from the     |\r\n|                                      | x-axis to the radius vector          |\r\n|                                      | specified in radians; rho is the     |\r\n|                                      | length of the radius vector.         |\r\n|                                      |                                      |\r\n|                                      | Theta and rho can be vectors of the  |\r\n|                                      | same length, or if the length of     |\r\n|                                      | theta is n, then rho can be a nxm    |\r\n|                                      | matrix, which corresponds to m sets  |\r\n|                                      | of rho values.                       |\r\n|                                      |                                      |\r\n|                                      | The figure number is returned.       |\r\n+--------------------------------------+--------------------------------------+\r\n| o.polar2(theta1,rho1,theta2,rho2)    | Creates a plot with two curves. The  |\r\n|                                      | two data sets can be sampled on      |\r\n|                                      | different theta vectors.             |\r\n+--------------------------------------+--------------------------------------+\r\n| o.polar2(theta,rho,\"x label\", \"y     | Creates a plot of y vs x with axis   |\r\n| label\", \"title\")                     | labels and a title, returns the      |\r\n|                                      | figure number.                       |\r\n+--------------------------------------+--------------------------------------+\r\n| o.polar2(theta,rho,\"x label\", \"y     | Creates a plot with desired options. |\r\n| label\", \"title\", \"options\")          | Options can be be                    |\r\n|                                      |                                      |\r\n|                                      | \u2022greyscale                           |\r\n|                                      |                                      |\r\n|                                      | \u2022polar (same as the polar script     |\r\n|                                      | command)                             |\r\n|                                      |                                      |\r\n|                                      | \u2022any comma separated list of the     |\r\n|                                      | above                                |\r\n|                                      |                                      |\r\n|                                      | Returns the figure number.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npolar(), legend(), image(), closeall(), setplot(), exportfigure(),\r\npolarimage(), plot()\r\n"}, "polarimage": {"link": "https://kb.lumerical.com/en/ref_scripts_polarimage.html", "text": "Creates 2D polar image plots. This is typically used to plot far field\r\ndata.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.polarimage(ux,uy,data)             | Creates a 2D image plot. data must   |\r\n|                                      | be of dimension N x M and            |\r\n|                                      |                                      |\r\n|                                      | \u2022ux is of dimension N x 1, where ux  |\r\n|                                      | goes from -1 to 1                    |\r\n|                                      |                                      |\r\n|                                      | \u2022uy is of dimension M x 1, where uy  |\r\n|                                      | goes from -1 to 1                    |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.polarimage(ux,uy,data, \"x    | Creates a 2D image plot with axis    |\r\n| label\", \"y label\", \"title\")          | labels                               |\r\n|                                      |                                      |\r\n|                                      | Optionally returns the figure        |\r\n|                                      | number.                              |\r\n+--------------------------------------+--------------------------------------+\r\n| o.polarimage(ux,uy,data, \"x label\",  | Creates a 2D image plot with axis    |\r\n| \"y label\", \"title\", \"options\")       | labels and options, options can be   |\r\n|                                      |                                      |\r\n|                                      | \u2022logplot                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplot(), polar(), image(), closeall(), setplot(), exportfigure(),\r\nvisualize()\r\n"}, "polyand": {"link": "https://kb.lumerical.com/en/ref_scripts_polyand.html", "text": "Combines two polygons into one using the Boolean 'and' operation.\r\n\r\nThe polygon vertices are contained in a single matrix of dimension Nx2\r\n(or 2xN), where N >= 3 is the number of vertices. The dimension 2\r\ncorresponds to the x,y positions. For example, a square of side length 1\r\ncan be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| V3 = o.polyand(V1,V2)                | Returns a new polygon, V3, that is   |\r\n|                                      | the 'and' of V1 and V2.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+----+\r\n+----+----+\r\n+----+----+\r\n+----+----+\r\n+----+----+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\npolyor(), polydiff(), polyxor(), polyarea(), centroid(),\r\npolyintersect(), inpoly(), polygrow()\r\n"}, "polyarea": {"link": "https://kb.lumerical.com/en/ref_scripts_polyarea.html", "text": "Returns the area of a polygon. The area is positive if the vertices are\r\ndefined in a counter-clockwise direction, and negative if the vertices\r\nare defined in a clockwise direction.\r\n\r\nThe polygon vertices are contained in a single matrix of dimension Nx2\r\n(or 2xN), where N >= 3 is the number of vertices. The dimension 2\r\ncorresponds to the x,y positions. For example, a square of side length 1\r\ncan be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.polyarea(V)                  | Returns the area of V. The sign of   |\r\n|                                      | the area indicates if V is defined   |\r\n|                                      | in a counter-clockwise (positive) or |\r\n|                                      | clockwise (negative) direction.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncentroid(), polyintersect(), inpoly(), polygrow(), polyand(), polyor(),\r\npolydiff(), polyxor()\r\n"}, "polydft": {"link": "https://kb.lumerical.com/en/ref_scripts_polydft.html", "text": "Returns the chirped z-transform of a set of data. The polydft function\r\nis very similar to a two-dimensional czt function with the difference\r\nbeing that the E function does not need to be finely sampled and only\r\nproviding the vertices of a polygon as input range of the function would\r\nbe enough to perform the transform. The only limit however is that E is\r\nconsidered constant within the limits of the polygon. The polygon mesh\r\ncan be created using the inpoly function.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.polydft(E,kx,ky)             | Returns the two dimensional chirped  |\r\n|                                      | z-transform of E. kx and ky must be  |\r\n|                                      | linearly spaced sets of wavenumbers  |\r\n|                                      | but can cover any range.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nczt(), inpoly(), fft(), fftw()\r\n"}, "polydiff": {"link": "https://kb.lumerical.com/en/ref_scripts_polydiff.html", "text": "Combines two polygons into one by taking the difference.\r\n\r\nThe polygon vertices are contained in a single matrix of dimension Nx2\r\n(or 2xN), where N >= 3 is the number of vertices. The dimension 2\r\ncorresponds to the x,y positions. For example, a square of side length 1\r\ncan be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| V3 = o.polydiff(V1,V2)               | Returns a new polygon, V3, that is   |\r\n|                                      | V1-V2.                               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npolyand(), polyor(), polyxor(), polyarea(), centroid(), polyintersect(),\r\ninpoly(), polygrow()\r\n"}, "polygrow": {"link": "https://kb.lumerical.com/en/ref_scripts_polygrow.html", "text": "Returns a polygon that has grown or shrunk by a specified amount. The\r\npolygon is stretched or compressed in a direction normal to every line\r\nsegment.\r\n\r\nThe polygon vertices are contained in a single matrix of dimension Nx2\r\n(or 2xN), where N >= 3 is the number of vertices. The dimension 2\r\ncorresponds to the x,y positions. For example, a square of side length 1\r\ncan be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.polygrow(V,dx)               | Returns the vertices of a new        |\r\n|                                      | polygon that has grown by dx. To     |\r\n|                                      | shrink a polygon, use dx < 0.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npolyarea(), centroid(), polyintersect(), inpoly(), polyand(), polyor(),\r\npolydiff(), polyxor()\r\n"}, "polyfit": {"link": "https://kb.lumerical.com/en/ref_scripts_polyfit.html", "text": "Calculates a polynomial fit based on linear regression. The data can be\r\ncomplex.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| p = o.polyfit(x, y, N)               | Returns the coefficients for a       |\r\n|                                      | polynomial p(x) of degree N that is  |\r\n|                                      | the best fit for the data in y.      |\r\n|                                      |                                      |\r\n|                                      | The length of the coefficients is    |\r\n|                                      | N+1.                                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ninterp(), spline()\r\n"}, "polyintersect": {"link": "https://kb.lumerical.com/en/ref_scripts_polyintersect.html", "text": "Determines if two polygons intersect.\r\n\r\nThe polygon vertices are contained in a single matrix of dimension Nx2\r\n(or 2xN), where N >= 3 is the number of vertices. The dimension 2\r\ncorresponds to the x,y positions. For example, a square of side length 1\r\ncan be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.polyintersect(V1,V2)         | Returns                              |\r\n|                                      |                                      |\r\n|                                      | \u20220 if the polygons do not overlap    |\r\n|                                      |                                      |\r\n|                                      | \u20220.5 if the polygons touch           |\r\n|                                      |                                      |\r\n|                                      | \u20221 if they overlap                   |\r\n|                                      |                                      |\r\n|                                      | \u20222 if one polygon completely         |\r\n|                                      | encloses the other                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npolyarea(), centroid(), inpoly(), polygrow(), polyand(), polyor(),\r\npolydiff(), polyxor()\r\n"}, "polyor": {"link": "https://kb.lumerical.com/en/ref_scripts_polyor.html", "text": "Combines two polygons into one using the Boolean 'or' operation.\r\n\r\nThe polygon vertices are contained in a single matrix of dimension Nx2\r\n(or 2xN), where N >= 3 is the number of vertices. The dimension 2\r\ncorresponds to the x,y positions. For example, a square of side length 1\r\ncan be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| V3 = o.polyor(V1,V2)                 | Returns a new polygon, V3, that is   |\r\n|                                      | the 'or' of V1 and V2.               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npolyand(), polydiff(), polyxor(), polyarea(), centroid(),\r\npolyintersect(), inpoly(), polygrow()\r\n"}, "polyxor": {"link": "https://kb.lumerical.com/en/ref_scripts_polyxor.html", "text": "Combines two polygons into one using the Boolean 'xor' operation.\r\n\r\nThe polygon vertices are contained in a single matrix of dimension Nx2\r\n(or 2xN), where N >= 3 is the number of vertices. The dimension 2\r\ncorresponds to the x,y positions. For example, a square of side length 1\r\ncan be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| V3 = o.polyxor(V1,V2)                | Returns a new polygon, V3, that is   |\r\n|                                      | the 'xor' of V1 and V2.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npolyand(), polyor(), polydiff(), polyarea(), centroid(),\r\npolyintersect(), inpoly(), polygrow()\r\n"}, "precision": {"link": "https://kb.lumerical.com/en/ref_scripts_precision.html", "text": "Truncates a number to the precision specified by the user. The precision\r\nis specified by the desired number of significant figures used when\r\nrounding the number.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.precision (y,p)              | Truncates y to a user defined        |\r\n|                                      | precision p. Where p is the number   |\r\n|                                      | of significant figures.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nround()\r\n"}, "propagate": {"link": "https://kb.lumerical.com/en/ref_scripts_propagate.html", "text": "Calculates the resulting mode profile of an arbitrary mode after it has\r\npropagated through a waveguide for some distance. This is done by\r\ndecomposing the mode into modes supported by the waveguide. Each\r\nsupported mode is then propagated through the waveguide. The resulting\r\nmodes are then added coherently to give the final mode profile. The\r\nmodes used in this calculation are obtained from one or more FDE\r\nsimulations.\r\n\r\nSee the overlap function for more details about overlap and coupling\r\ncalculations.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.propagate(mode, d, n1, n2)   | \u2022mode: the name of the monitor       |\r\n|                                      | containing the mode to propagate     |\r\n|                                      |                                      |\r\n|                                      | \u2022d: distance to propagate            |\r\n|                                      |                                      |\r\n|                                      | \u2022n1: minimum index                   |\r\n|                                      |                                      |\r\n|                                      | \u2022n2: maximum index                   |\r\n|                                      |                                      |\r\n|                                      | \u2022out: the name of the resulting      |\r\n|                                      | dataset created by the propagate     |\r\n|                                      | command                              |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.propagate(mode, d, n1, n2,   | Mode alignment can be adjusted       |\r\n| x, y)                                | before propagate is calculated.      |\r\n|                                      |                                      |\r\n|                                      | \u2022x offset                            |\r\n|                                      |                                      |\r\n|                                      | \u2022y offset                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopydcard(), findmodes(), coupling(), overlap(), bestoverlap(), expand()\r\n"}, "popportdata": {"link": "https://kb.lumerical.com/en/ref_scripts_popportdata.html", "text": "Extracts the first available data value from the input port. Used for\r\nScripted Element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| data\\_out =                          | Returns the first available data     |\r\n| o.popportdata('input\\_port\")         | value from \"input\\_port\".            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npushportdata(), cloneportdata(), portdatasize()\r\n"}, "popportframe": {"link": "https://kb.lumerical.com/en/ref_scripts_popportframe.html", "text": "Extracts the first available data value from the input port. Used for\r\nScripted Element.\r\n\r\nFor INTERCONNECT 6.5+, this script command supports for both Sample Mode\r\nand Block Mode data.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| signalIn = o.popportframe(port)      | For a scripted element, this command |\r\n|                                      | returns a frame structure containing |\r\n|                                      | the input signal for a given input   |\r\n|                                      | \u2018port\u2019 (data) and its properties     |\r\n|                                      | (header).                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nImplementation Details\r\n\r\nDigital signal frame:\r\n\r\nThe data contains the current time instant and the value of the signal,\r\nas well as the bandwidth struct which contains the signal bitrate and\r\ntime window. The header is a struct that contains the signal type and\r\nsubtype. The type for a digital signal is \u20183\u2019. The subtype for sample\r\nand block modes digital signal are '1' and '2', respectively.\r\n\r\n#digital signal frame\r\n\r\ndata=struct\r\n\r\ndata.bandwidth=struct\r\n\r\ndata.bandwidth.bitrate\r\n\r\ndata.bandwidth.time\\_window\r\n\r\ndata.time\r\n\r\ndata.value\r\n\r\nheader=struct\r\n\r\nheader.subtype\r\n\r\nheader.type\r\n\r\nvalid\r\n\r\nElectrical signal frame:\r\n\r\nThe data contains the current time instant and the value of the signal,\r\nas well as the bandwidth struct which contains the signal frequency,\r\nsample rate and time window. The header is a struct that contains the\r\nsignal type and subtype. The type for an electrical signal is \u20182\u2019. The\r\nsubtype for sample and block modes electrical signal are '1' and '2',\r\nrespectively.\r\n\r\n#electrical signal frame\r\n\r\ndata=struct\r\n\r\ndata.bandwidth=struct\r\n\r\ndata.bandwidth.frequency\r\n\r\ndata.bandwidth.sample\\_rate\r\n\r\ndata.bandwidth.time\\_window\r\n\r\ndata.time\r\n\r\ndata.value\r\n\r\nheader=struct\r\n\r\nheader.subtype\r\n\r\nheader.type\r\n\r\nvalid\r\n\r\nOptical signal frame:\r\n\r\nThe data signal is a cell which contains the channel and mode\r\ninformation. The signal channel is a cell that contains the bandwidth\r\nstruct, and the bandwidth struct contains the signal frequency, sample\r\nrate and time window. The mode is a struct which contains the mode\r\nlabel, orthogonal indentifier and the mode ID. The header is a struct\r\nthat contains the signal type and subtype. The type for an optical\r\nsignal is \u20181\u2019. The subtype for sample and block modes optical signal are\r\n'1' and '2', respectively.\r\n\r\n#optical signal frame\r\n\r\ndata=struct\r\n\r\ndata.signal=cell\r\n\r\ndata.signal.channel=cell\r\n\r\ndata.signal.channel.bandwidth=struct\r\n\r\ndata.signal.channel.bandwidth.frequency\r\n\r\ndata.signal.channel.bandwidth.sample\\_rate\r\n\r\ndata.signal.channel.bandwidth.time\\_window\r\n\r\ndata.signal.channel.time\r\n\r\ndata.signal.channel.value\r\n\r\ndata.signal.mode=struct\r\n\r\ndata.signal.mode.label\r\n\r\ndata.signal.mode.orthogonal\\_identifier\r\n\r\ndata.signal.mode.uid\r\n\r\nheader=struct\r\n\r\nheader.subtype\r\n\r\nheader.type\r\n\r\nvalid\r\n\r\nSee Also\r\n\r\npopportdata(), pushportdata(), cloneportdata(), portdatasize(),\r\npushportframe(), getmonitorframe(), getmonitorwaveform()\r\n"}, "portdatasize": {"link": "https://kb.lumerical.com/en/ref_scripts_portdatasize.html", "text": "Returns the number of data values available at the input port.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| size = o.portdatasize(\"input\\_port\") | Returns the number of data values    |\r\n|                                      | available at the input port.         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npopportdata(), pushportdata(), cloneportdata()\r\n"}, "probe": {"link": "https://kb.lumerical.com/en/ref_scripts_probe.html", "text": "Places a probe analyzer at a specified port of a specified element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.probe (\"name\",\"port\")              | Places a probe analyzer at a given   |\r\n|                                      | element name at the given port.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlibrary(), addtolibrary(), saveelement()\r\n"}, "prod": {"link": "https://kb.lumerical.com/en/ref_scripts_prod.html", "text": "Returns the product of elements in a matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.prod(x)                      | Product of all the elements in       |\r\n|                                      | matrix x, over all dimensions.       |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.prod(x,n)                    | Product elements of x over the       |\r\n|                                      | specified dimension n.               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nintegrate(), mean(), sum()\r\n"}, "pushportdata": {"link": "https://kb.lumerical.com/en/ref_scripts_pushportdata.html", "text": "Sends the data value to the specified output port. Used for Scripted\r\nElement.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.pushportdata(\"output\\_port\",data)  | Sends the data value to              |\r\n|                                      | \"output\\_port\".                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npopportdata(), cloneportdata(), portdatasize()\r\n"}, "pushportframe": {"link": "https://kb.lumerical.com/en/ref_scripts_pushportframe.html", "text": "Writes a frame structure containing the output signal for a given output\r\nport. Used for Scripted Element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.pushportframe(port)                | For a scripted element, this command |\r\n|                                      | writes a frame structure containing  |\r\n|                                      | the output signal for a given output |\r\n|                                      | \u2018port\u2019 (data) and its properties     |\r\n|                                      | (header). Refer to popportframe for  |\r\n|                                      | the list of supported frame types    |\r\n|                                      | and examples.                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npopportdata(), pushportdata(), cloneportdata(), portdatasize(),\r\npopportframe(), getmonitorframe(), getmonitorwaveform()\r\n"}, "putremotedata": {"link": "https://kb.lumerical.com/en/ref_scripts_putremotedata.html", "text": "An interoperability command that will send a variable from the client\r\nworkspace into the server workspace via an active session\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.putremotedata(s,'y',x)             | Creates variable y in the server     |\r\n|                                      | workspace that has value of x in the |\r\n|                                      | client workspace via an active       |\r\n|                                      | session s                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nopensession(), closesession(), getremotedata(), evalremote()\r\n"}, "pwd": {"link": "https://kb.lumerical.com/en/ref_scripts_pwd.html", "text": "Returns the current working directory.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.pwd()                        | Returns the current working          |\r\n|                                      | directory as a string.               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncurrentfilename(), cd()\r\n"}, "quadtri": {"link": "https://kb.lumerical.com/en/ref_scripts_quadtri2.html", "text": "Calculates the numerical integral of data collected on a 2D triangle\r\nmesh using first order trapezoidal quadrature.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.quadtri(tri,vtx,u,n)         | Calculates the integral of data      |\r\n|                                      | collected on triangle mesh. A scalar |\r\n|                                      | is returned if the input data        |\r\n|                                      | corresponds to a scalar quantity and |\r\n|                                      | a vector with three components is    |\r\n|                                      | returned if the input data           |\r\n|                                      | corresponds to a vector quantity.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| tri            | required       |                | matrix         | [Mx3]          |\r\n|                |                |                |                | connectivity   |\r\n|                |                |                |                | matrix for the |\r\n|                |                |                |                | M triangle     |\r\n|                |                |                |                | elements on    |\r\n|                |                |                |                | the mesh.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| vtx            | required       |                | matrix         | [Nx2] or [Nx3] |\r\n|                |                |                |                | matrix         |\r\n|                |                |                |                | containing the |\r\n|                |                |                |                | (x,y,z)        |\r\n|                |                |                |                | coordinates of |\r\n|                |                |                |                | the N vertices |\r\n|                |                |                |                | of the mesh.   |\r\n|                |                |                |                | If the matrix  |\r\n|                |                |                |                | has only two   |\r\n|                |                |                |                | columns, the z |\r\n|                |                |                |                | coordinate is  |\r\n|                |                |                |                | assumed to be  |\r\n|                |                |                |                | zero.          |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| u              | required       |                | matrix         | [Nx1] or [Nx3] |\r\n|                |                |                |                | matrix         |\r\n|                |                |                |                | containing the |\r\n|                |                |                |                | data to be     |\r\n|                |                |                |                | integrated at  |\r\n|                |                |                |                | the location   |\r\n|                |                |                |                | of each        |\r\n|                |                |                |                | vertex. If the |\r\n|                |                |                |                | matrix is of   |\r\n|                |                |                |                | size [Nx1],    |\r\n|                |                |                |                | the data is    |\r\n|                |                |                |                | assumed to be  |\r\n|                |                |                |                | a scalar       |\r\n|                |                |                |                | quantity. If   |\r\n|                |                |                |                | the matrix is  |\r\n|                |                |                |                | of size [Nx3], |\r\n|                |                |                |                | the data is    |\r\n|                |                |                |                | assumed to be  |\r\n|                |                |                |                | a vector       |\r\n|                |                |                |                | quantity.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| n              | optional       | empty          | matrix         | [Mx3] matrix   |\r\n|                |                |                |                | with the       |\r\n|                |                |                |                | surface normal |\r\n|                |                |                |                | vectors for    |\r\n|                |                |                |                | each of the M  |\r\n|                |                |                |                | triangles on   |\r\n|                |                |                |                | the mesh. The  |\r\n|                |                |                |                | columns        |\r\n|                |                |                |                | correspond to  |\r\n|                |                |                |                | the (x,y,z)    |\r\n|                |                |                |                | components of  |\r\n|                |                |                |                | each vector.   |\r\n|                |                |                |                | This input is  |\r\n|                |                |                |                | required only  |\r\n|                |                |                |                | if the data to |\r\n|                |                |                |                | be integrated  |\r\n|                |                |                |                | is a vector    |\r\n|                |                |                |                | quantity.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\ninterptri(), quadtet(), interptet()\r\n"}, "quadtet": {"link": "https://kb.lumerical.com/en/ref_scripts_quadtet.html", "text": "Calculates the numerical integral of data on a 3D finite element mesh.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.quadtet(tet,vtx,u)           | outputs a scalar, the integral of u  |\r\n|                                      | on the finite element mesh, where    |\r\n|                                      |                                      |\r\n|                                      | \u2022tet: the connectivity array, Mx4,   |\r\n|                                      | containing row entries that index    |\r\n|                                      | the four vertices of M tetrahedra    |\r\n|                                      |                                      |\r\n|                                      | \u2022vtx: the vertex array, Nx3,         |\r\n|                                      | containing row entries of (x,y,z)    |\r\n|                                      | pairs that locate the N vertex       |\r\n|                                      | points                               |\r\n|                                      |                                      |\r\n|                                      | \u2022u: the data on the finite element   |\r\n|                                      | mesh (Nx1)                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ninterptri(), quadtri()\r\n"}, "rand": {"link": "https://kb.lumerical.com/en/ref_scripts_rand.html", "text": "Generates a uniform random number between 0 and 1. In order to reset the\r\ngenerator seed use the command randreset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.rand()                       | Generates a uniform random number    |\r\n|                                      | between 0 and 1.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.rand(min,max)                | Generates a random number between    |\r\n|                                      | min and max. By default, min and max |\r\n|                                      | are 0 and 1 respectively.            |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.rand(min,max,option)         | option = 1: output is a double       |\r\n|                                      | precision number between min and max |\r\n|                                      | (default)                            |\r\n|                                      |                                      |\r\n|                                      | option = 2: output is an integer     |\r\n|                                      | between min and max.                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrandreset(), randmatrix(), randn()\r\n"}, "randmatrix": {"link": "https://kb.lumerical.com/en/ref_scripts_randmatrix.html", "text": "Initialize a matrix. All elements are random numbers between 0 and 1.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| x = o.randmatrix(i,j,k,....)         | Initializes an i x j x k x ....      |\r\n|                                      | matrix. The elements are all random  |\r\n|                                      | numbers between 0 and 1.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatrix(), rand(), randreset()\r\n"}, "randn": {"link": "https://kb.lumerical.com/en/ref_scripts_randn.html", "text": "Generates a normally distributed random number. In order to reset the\r\ngenerator seed use the command randreset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.randn()                      | Generates a normally distributed     |\r\n|                                      | random number with mean 0 and        |\r\n|                                      | standard deviation 1.                |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.randn(mean,stddev)           | Generates a normally distributed     |\r\n|                                      | random number with user defined mean |\r\n|                                      | value and standard deviation.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrandreset(), lognrnd(), randnmatrix()\r\n"}, "randnmatrix": {"link": "https://kb.lumerical.com/en/ref_scripts_randnmatrix.html", "text": "Initialize a matrix. All elements are normally distributed random\r\nnumbers with mean 0 and standard distribution 1.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| x = o.randnmatrix(i,j,k,....)        | Initializes an i x j x k x ....      |\r\n|                                      | matrix. The elements are all random  |\r\n|                                      | normally distributed numbers with    |\r\n|                                      | mean 0 and standard deviation 1.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatrix(), randn(), randreset()\r\n"}, "randreset": {"link": "https://kb.lumerical.com/en/ref_scripts_randreset.html", "text": "Resets the random number generator seed.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.randreset()                  | Resets the random number seed based  |\r\n|                                      | on the clock time.                   |\r\n|                                      |                                      |\r\n|                                      | This function returns the random     |\r\n|                                      | number seed that was used.           |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.randreset(seed)              | Set the seed to a specific value     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrand(), randmatrix()\r\n"}, "read": {"link": "https://kb.lumerical.com/en/ref_scripts_read.html", "text": "Reads data from a text file as a string.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.read(filename, size)               | Read a text file as a string for the |\r\n|                                      | user defined size 'size'. The        |\r\n|                                      | default value for size is 1e+6, if   |\r\n|                                      | not specified.                       |\r\n|                                      |                                      |\r\n|                                      | Note: This function will check for   |\r\n|                                      | the file in the current working      |\r\n|                                      | directory. If the file to read from  |\r\n|                                      | is in a different directory, either  |\r\n|                                      | specify the full path or change the  |\r\n|                                      | current working directory.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nreaddata(), struct(), cell()\r\n"}, "readdata": {"link": "https://kb.lumerical.com/en/ref_scripts_readdata.html", "text": "Reads a file with data in a row/column format. User can import numerical\r\nvalues stored in text files with the readdata command. The data must be\r\ncorrectly formatted so each row has the same number of columns. Readdata\r\nwill ignore any line that begins with a letter.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| M=o.readdata(\"filename.txt\")         | Will load the text file filename     |\r\n|                                      | into matrix variable M. Any lines    |\r\n|                                      | starting with a letter are ignored.  |\r\n|                                      |                                      |\r\n|                                      | Note: This function will check for   |\r\n|                                      | the file in the current working      |\r\n|                                      | directory. If the file to read from  |\r\n|                                      | is in a different directory, either  |\r\n|                                      | specify the full path or change the  |\r\n|                                      | current working directory.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrm(), write(), read(), str2num(), findstring(), replace(),\r\nreplacestring(), substring(), fileexists()\r\n"}, "readstltriangles": {"link": "https://kb.lumerical.com/en/ref_scripts_readstltriangles.html", "text": "Imports a matrix of vertex positions from an STL file.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.readstltriangles(\"filename.stl | Returns an Mx3 matrix with vertices  |\r\n| \",scaling\\_factor)                   | from all STL triangles from the      |\r\n|                                      | specified STL file.                  |\r\n|                                      |                                      |\r\n|                                      | scaling\\_factor: An STL file does    |\r\n|                                      | not contain unit data. To import     |\r\n|                                      | data in units of microns, set this   |\r\n|                                      | value to 1e-6. For nanometers, set   |\r\n|                                      | this value to 1e-9.                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nstlimport()\r\n"}, "real": {"link": "https://kb.lumerical.com/en/ref_scripts_real.html", "text": "Returns the real part of a number or matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.real(x)                      | Returns the real part of x.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nimag()\r\n"}, "rectilineardataset": {"link": "https://kb.lumerical.com/en/ref_scripts_rectilineardataset.html", "text": "Creates an empty rectilinear dataset that is associate with the x/y/z\r\ncoordinates (ex. E and H fields). Like matrix datasets, rectilinear\r\ndatasets can be parameterized, and can contain an arbitrary number of\r\nattributes (see addattribute) and parameters (see addparameter).\r\n\r\nSee Dataset introduction for more information.\r\n\r\nFor datasets that are not associated with the x/y/z coordinates (ex.\r\ntransmission as a function of frequency), see matrixdataset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.rectilineardataset(x,y,z)          | Creates a empty rectilinear dataset  |\r\n|                                      | associated with the coordinates      |\r\n|                                      | x/y/z.                               |\r\n|                                      |                                      |\r\n|                                      | Arguments 'x', 'y' and 'z' may be    |\r\n|                                      | different lengths and the total      |\r\n|                                      | number of points is the product of   |\r\n|                                      | their lengths.                       |\r\n+--------------------------------------+--------------------------------------+\r\n| o.rectilineardataset(\"dataset\\_name\" | Creates a empty rectilinear dataset  |\r\n| ,x,y,z)                              | named \"dataset\\_name\" associated     |\r\n|                                      | with the coordinates x/y/z.          |\r\n|                                      |                                      |\r\n|                                      | Arguments 'x', 'y' and 'z' may be    |\r\n|                                      | different lengths and the total      |\r\n|                                      | number of points is the product of   |\r\n|                                      | their lengths.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrectilineardataset(), addattribute(), addparameter(), visualize(),\r\ngetparameter(), getattribute(), matrixdataset(), struct()\r\n"}, "redo": {"link": "https://kb.lumerical.com/en/ref_scripts_redo.html", "text": "Redos a command after a previous undo.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.redo()                             | Redo command after previous undo.    |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nundo(), historyon(), historyoff()\r\n"}, "redraw": {"link": "https://kb.lumerical.com/en/ref_scripts_redraw.html", "text": "Forces the graphical viewports of the CAD or the schematic layout\r\ndrawing to update. The viewports update automatically by default, so\r\nthis command is only required after using the redrawoff command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.redraw()                           | Redraws graphics.                    |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nredrawon(), redrawoff(), redrawmode()\r\n"}, "redrawmode": {"link": "https://kb.lumerical.com/en/ref_scripts_redrawmode.html", "text": "This command can be used to determine the current status of automatic\r\nredrawing. It can also be used to set the current status of automatic\r\nredrawing. The graphics will be redrawn after any script command that\r\nmay change the properties of a graphical object.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.redrawmode()                 | The value of out indicates if        |\r\n|                                      | automatic redrawing is off or on     |\r\n|                                      |                                      |\r\n|                                      | \u2022out=1: automatic redrawing is on    |\r\n|                                      |                                      |\r\n|                                      | \u2022out=0: automatic redrawing is off   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.redrawmode(in)               | Set the automatic redrawing off or   |\r\n|                                      | on. To turn it on, use in=1. To turn |\r\n|                                      | it off, use in=0. The value of out   |\r\n|                                      | is set after executing the command   |\r\n|                                      | so that out=in once this command has |\r\n|                                      | been executed.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nredraw(), redrawoff()\r\n"}, "redrawoff": {"link": "https://kb.lumerical.com/en/ref_scripts_redrawoff.html", "text": "Disables automatic updating of the graphical viewports in the CAD or the\r\nschematic layout drawing. This can greatly increase the speed of scripts\r\nthat add large numbers of objects.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.redrawoff()                        | Prevents redrawing of graphics.      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n|                                      |                                      |\r\n|                                      | Cannot use this command in group     |\r\n|                                      | setup scripts since redrawing is     |\r\n|                                      | automatically turned off.            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nredrawon(), redraw(), redrawmode()\r\n"}, "redrawon": {"link": "https://kb.lumerical.com/en/ref_scripts_redrawon.html", "text": "Enables automatic updating of the graphical viewports in the CAD or the\r\nschematic layout drawing. Automatic updating is the default behavior, so\r\nthis command is only required after using the redrawoff command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.redrawon()                         | Turns redrawing back on.             |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nredraw(), redrawoff(), redrawmode()\r\n"}, "refresh": {"link": "https://kb.lumerical.com/en/ref_scripts_refresh.html", "text": "This command reloads the current project.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.refresh()                          | Reloads the current project. This is |\r\n|                                      | particularly useful when changing    |\r\n|                                      | the \u2018library\u2019 property of a          |\r\n|                                      | reference element. Reference         |\r\n|                                      | elements must be manually            |\r\n|                                      | \u2018refreshed\u2019 or reloaded if the       |\r\n|                                      | \u2018library\u2019 property is modified \u2013     |\r\n|                                      | otherwise the use will have to save  |\r\n|                                      | and reload the current project.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n \r\n=\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\n\r\n"}, "reloaddesignkit": {"link": "https://kb.lumerical.com/en/ref_scripts_reloaddesignkit.html", "text": "Reloads the contents of a design kit from the element library \u2018Design\r\nkits\u2019 folder.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.reloaddesignkit (\"name\")           | Reloads the contents of a design kit |\r\n|                                      | named \u2018name\u2019 from the element        |\r\n|                                      | library \u2018Design kits\u2019 folder.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nloaddesignkit(), removedesignkit()\r\n"}, "removecostom": {"link": "https://kb.lumerical.com/en/ref_scripts_removecustom.html", "text": "Removes a folder in the Custom folder in Element Library.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| removecustom(\"element name\", \"old    | Removes a folder in the Custom       |\r\n| port name\", \"new port name\")         | folder in Element Library. This      |\r\n|                                      | command removes all the files in the |\r\n|                                      | CML installation directory.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npackagedesignkit(), installdesignkit(), importschematic(),\r\nexportschematic(), customlibrary(), renameport(), exportlib()\r\n"}, "removedesignkit": {"link": "https://kb.lumerical.com/en/ref_scripts_removedesignkit.html", "text": "Removes an existing design kit from the element library \u2018Design kits\u2019\r\nfolder.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.removedesignkit(\"name\")            | Removes a design kit named \u2018name\u2019    |\r\n|                                      | from the element library \u2018Design     |\r\n|                                      | kits\u2019 folder.                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nloaddesignkit(), reloaddesignkit()\r\n"}, "removeexpansion": {"link": "https://kb.lumerical.com/en/ref_scripts_removeexpansion.html", "text": "Removes a DFT monitor from a mode expansion monitor.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.removeexpansion(\"name\")            | Removes the DFT monitor with the     |\r\n|                                      | specified name from the \"Monitors    |\r\n|                                      | for expansion\" list of the selected  |\r\n|                                      | mode expansion monitor.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddmodeexpansion(), setexpansion()\r\n"}, "removeport": {"link": "https://kb.lumerical.com/en/ref_scripts_removeport.html", "text": "Removes a port from a compound/script element (Note that this command\r\ndoes not apply for primitive elements).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.removeport(\"element\", \"port\")      | Removes \"port\" from \"element\".       |\r\n|                                      |                                      |\r\n|                                      | Returns 1 if the port is             |\r\n|                                      | successfully removed, 0 otherwise.   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddport()\r\n"}, "removesweepparameter": {"link": "https://kb.lumerical.com/en/ref_scripts_removesweepparameter.html", "text": "Removes a parameter from a parameter sweep/optimization/Monte\r\nCarlo/S-parameter sweep item.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.removesweepparameter(\"name\",       | Removes a parameter from a parameter |\r\n| \"parameter\\_name\")                   | sweep/optimization/Monte             |\r\n|                                      | Carlo/S-parameter sweep item.        |\r\n|                                      |                                      |\r\n|                                      | \"name\" is the absolute name of an    |\r\n|                                      | analysis item.                       |\r\n|                                      |                                      |\r\n|                                      | \"parameter\\_name\" is the parameter   |\r\n|                                      | name.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopysweep(), pastesweep(), addsweep(), insertsweep(), getsweep(),\r\nsetsweep(), addsweepparameter(), addsweepresult(), removesweepresult()\r\n"}, "removesweepresult": {"link": "https://kb.lumerical.com/en/ref_scripts_removesweepresult.html", "text": "Removes a result from a sweep/optimization/Monte Carlo item.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.removesweepresult(\"name\",          | Removes a result from a              |\r\n| \"result\\_name\")                      | sweep/optimization/Monte Carlo item. |\r\n|                                      |                                      |\r\n|                                      | \"name\" is the absolute name of an    |\r\n|                                      | analysis item.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopysweep(), pastesweep(), addsweep(), insertsweep(), getsweep(),\r\nsetsweep(), addsweepparameter(), addsweepresult(),\r\nremovesweepparameter()\r\n"}, "renameport": {"link": "https://kb.lumerical.com/en/ref_scripts_renameport.html", "text": "Renames the port name for a Compound or Scripted element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.renameport(\"element name\", \"old    | Renames the port name for a Compound |\r\n| port name\", \"new port name\")         | or Scripted element.                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npackagedesignkit(), installdesignkit(), importschematic(),\r\nexportschematic(), customlibrary(), exportlib()\r\n"}, "replace": {"link": "https://kb.lumerical.com/en/ref_scripts_replace.html", "text": "Replaces a substring of a string with a new string. The start position\r\nof the substring must be specified. This function can also be used to\r\nadd a substring to a string at a given position.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| snew = o.replace(s,pos,len,s1)       | Replaces len characters of s,        |\r\n|                                      | starting at position pos, with the   |\r\n|                                      | string in s1. If len is 0, it will   |\r\n|                                      | insert the string s1 between pos-1   |\r\n|                                      | and pos. If len is -1 (or any values |\r\n|                                      | less than 0) it will replace all     |\r\n|                                      | remaining characters in s with s1,   |\r\n|                                      | starting at pos. The position pos    |\r\n|                                      | can be 1 to length(s).               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlength(), substring(), findstring(), replacestring(), str2num(),\r\nnum2str(), splitstring(), lower(), upper(), toscript()\r\n"}, "replacelibrary": {"link": "https://kb.lumerical.com/en/ref_scripts_replacelibrary.html", "text": "Replaces all instances of the current library in the Custom library.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.replacelibrary(previous,new)       | Replaces all instances of the        |\r\n|                                      | current library \u2018previous\u2019 by the    |\r\n|                                      | new library \u2018new\u2019.                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "replacestring": {"link": "https://kb.lumerical.com/en/ref_scripts_replacestring.html", "text": "Replaces all the instances of a substring in a string with a new string.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| snew = o.replacestring(s,s1,s2)      | Replaces all instances of s1 in s    |\r\n|                                      | with s2. If s1 is not found, the     |\r\n|                                      | original string s is returned.       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlength(), substring(), findstring(), replace(), str2num(), num2str(),\r\nsplitstring(), lower(), upper(), toscript()\r\n"}, "reshape": {"link": "https://kb.lumerical.com/en/ref_scripts_reshape.html", "text": "Reshapes the matrix A to have a given size i,j,k.The product of the\r\nspecified dimensions, i\\*j\\*k\\*..., must be the same as that of the\r\noriginal matrix A.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.reshape(A, [i,j,k, ...])     | Returns an array with the same       |\r\n|                                      | elements as A but reshaped to have   |\r\n|                                      | the size i by j by k by ...          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nand(), or(), eig(), permute(), mult(), inv(), flip(), transpose(),\r\nsize()\r\n"}, "rm": {"link": "https://kb.lumerical.com/en/ref_scripts_rm.html", "text": "Deletes a file. A path can be specified.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| del(\"filename\") o.rm(\"filename\")     | Deletes the file \"filename\".         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ndelete(), rm()\r\n"}, "rotateelement": {"link": "https://kb.lumerical.com/en/ref_scripts_rotateelement.html", "text": "Rotates element in the schematic editor.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.rotateelement(\"element\")           | Rotates element in the schematic     |\r\n|                                      | editor.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nflipelement()\r\n"}, "round": {"link": "https://kb.lumerical.com/en/ref_scripts_round.html", "text": "Rounds a number to the nearest integer.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.round(x)                     | Rounds x to the nearest integer.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfloor(), ceil(), mod()\r\n"}, "run": {"link": "https://kb.lumerical.com/en/ref_scripts_run.html", "text": "Run the current simulation. When the simulation finishes, all simulation\r\ndata will be saved to the current simulation file. The updated\r\nsimulation file will then be re-loaded by the GUI.\r\n\r\nFor FDTD,\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.run()                              | Launch the simulation in parallel    |\r\n|                                      | mode as defined in the resource      |\r\n|                                      | manager. This function does not      |\r\n|                                      | return any data.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.run(option1)                       | Option1 (default: 3) can be:         |\r\n|                                      |                                      |\r\n|                                      | \u20221: run FDTD in single processor     |\r\n|                                      | mode (legacy) avoiding any use of    |\r\n|                                      | MPI.                                 |\r\n|                                      |                                      |\r\n|                                      | \u20222: run FDTD in single processor     |\r\n|                                      | mode (legacy). Pop-up dialogs no     |\r\n|                                      | longer take focus.                   |\r\n|                                      |                                      |\r\n|                                      | \u20223: run FDTD in parallel mode as     |\r\n|                                      | defined in the resource manager.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nFor MODE, DEVICE, and INTERCONNECT,\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.run()                              | Launch the simulation. The           |\r\n|                                      | simulation will be run using the     |\r\n|                                      | settings from the first active       |\r\n|                                      | resource in the resource manager.    |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrunanalysis(), addjob(), runjobs(), save(), load()\r\n"}, "runanalysis": {"link": "https://kb.lumerical.com/en/ref_scripts_runanalysis.html", "text": "Runs the analysis script in analysis objects.\r\n\r\nNote: Scripts that already have data are not re-run; to re-run a script,\r\nfirst clear data using clearanalysis.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runanalysis()                      | Runs the analysis scripts in all     |\r\n|                                      | analysis objects in the simulation   |\r\n|                                      | file.                                |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runanalysis(\"group name\")          | Runs the analysis script in the      |\r\n|                                      | analysis object named \"group name\".  |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrun(), getdata(), getresult(), havedata(), clearanalysis(), runsetup()\r\n"}, "runfinalize": {"link": "https://kb.lumerical.com/en/ref_scripts_runfinalize.html", "text": "This script command finalizes a step by step simulation.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runfinalize()                      | Finalizes a step by step simulation. |\r\n|                                      | This command should be used in       |\r\n|                                      | combination with runinitialize and   |\r\n|                                      | runstep, and it is typically used    |\r\n|                                      | for co-simulations.                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nruninitialize(), runstep(), waituntildone()\r\n"}, "runinitialize": {"link": "https://kb.lumerical.com/en/ref_scripts_runinitialize.html", "text": "This script command initializes a step by step simulation.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runinitialize()                    | Initialize a step by step            |\r\n|                                      | simulation, different from \u2018run\u2019 the |\r\n|                                      | simulation is only initialized. This |\r\n|                                      | command should be used in            |\r\n|                                      | combination with runstep and         |\r\n|                                      | runfinalize, and it is typically     |\r\n|                                      | used for co-simulations.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrunstep(), runfinalize(), waituntildone()\r\n"}, "runjobs": {"link": "https://kb.lumerical.com/en/ref_scripts_runjobs.html", "text": "Run all simulations in the job manager queue. The script execution will\r\nbe paused while the jobs run, then resume when all of the simulations\r\nhave complete successfully. If errors occur, the script will not\r\nproceed.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runjobs()                          | Run jobs in the Job queue for        |\r\n|                                      | existing (active) solver. Use the    |\r\n|                                      | computer resources and parallel      |\r\n|                                      | settings that are specified in the   |\r\n|                                      | Resource Manager.                    |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runjobs(\"solver\", option)          | Run jobs in the Job queue for        |\r\n|                                      | specified solver. option=0: run jobs |\r\n|                                      | in single process mode using only    |\r\n|                                      | the local computer.                  |\r\n|                                      |                                      |\r\n|                                      | option=1: run jobs using the         |\r\n|                                      | computer resources and parallel      |\r\n|                                      | settings that are specified in the   |\r\n|                                      | Resource Manager. (default)          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrun(), runsweep(), addjob(), clearjobs(), listjobs(), save(), load()\r\n"}, "runoptimization": {"link": "https://kb.lumerical.com/en/ref_scripts_runoptimization.html", "text": "Optimizes a property from a chosen element under specified condition.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| x=o.runoptimization(element,property | Optimizes property from element      |\r\n| ,min,max,analyzer,result,\u2019target\u2019,ta | until a target for an analyzer       |\r\n| rget,tolerance=1e-9,iterations=2000) | result is reached. Function returns  |\r\n|                                      | an array with two columns, the firs  |\r\n|                                      | column contains the property values  |\r\n|                                      | and the second column contains the   |\r\n|                                      | result values.                       |\r\n+--------------------------------------+--------------------------------------+\r\n| x=o.runoptimization(element,property | Optimizes property from element      |\r\n| ,min,max,analyzer,result,\u2019minimize\u2019, | until a minimum value for an         |\r\n| tolerance=1e-9,iterations=2000)      | analyzer result is reached. Function |\r\n|                                      | returns an array with two columns,   |\r\n|                                      | the firs column contains the         |\r\n|                                      | property values and the second       |\r\n|                                      | column contains the result values.   |\r\n+--------------------------------------+--------------------------------------+\r\n| x=o.runoptimization(element,property | Optimizes property from element      |\r\n| ,min,max,analyzer,result,\u2019maximize\u2019, | until a maximum value for an         |\r\n| tolerance=1e-9,iterations=2000)      | analyzer result is reached. Function |\r\n|                                      | returns an array with two columns,   |\r\n|                                      | the firs column contains the         |\r\n|                                      | property values and the second       |\r\n|                                      | column contains the result values.   |\r\n+--------------------------------------+--------------------------------------+\r\n"}, "runparallel": {"link": "https://kb.lumerical.com/en/ref_scripts_runparallel.html", "text": "Launch the simulation in parallel mode. Equivalent to run and run(3).\r\nWhen the simulation finishes, all simulation data will be saved to the\r\ncurrent file. This command has been deprecated. Use run.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runparallel()                      | Launch the simulation in parallel    |\r\n|                                      | mode as defined in the resource      |\r\n|                                      | manager. This function does not      |\r\n|                                      | return any data.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrun(), runanalysis()\r\n"}, "runsetup": {"link": "https://kb.lumerical.com/en/ref_scripts_runsetup.html", "text": "Runsetup forces the setup scripts of structure and analysis groups to\r\nrun.\r\n\r\nIn most cases, it is not necessary to use this function, as group setup\r\nscripts automatically re-run at the end of script, if the object has\r\nbeen modified.  It is only necessary to use this function when you need\r\nto force the setup script to run before the end of your script file.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runsetup()                         | Forces setup scripts of groups to    |\r\n|                                      | run.                                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nget(), set(), runanalysis()\r\n"}, "runstep": {"link": "https://kb.lumerical.com/en/ref_scripts_runstep.html", "text": "This script command runs a single simulation step.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runstep()                          | Runs a single simulation step. This  |\r\n|                                      | command should be used in            |\r\n|                                      | combination with runinitialize and   |\r\n|                                      | runfinalize, and it is typically     |\r\n|                                      | used for co-simulations.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nruninitialize(), runfinalize(), waituntildone()\r\n"}, "runsweep": {"link": "https://kb.lumerical.com/en/ref_scripts_runsweep.html", "text": "Runs a parameter sweep or optimization task.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runsweep()                         | Runs all sweeps and optimization     |\r\n|                                      | tasks.                               |\r\n+--------------------------------------+--------------------------------------+\r\n| o.runsweep(\"taskname\")               | Runs only the sweep or optimization  |\r\n|                                      | named taskname.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrun(), getsweepdata(), addjob(), runjobs()\r\n"}, "runwizard": {"link": "https://kb.lumerical.com/en/ref_scripts_runwizard.html", "text": "Runs the wizard and returns a value indicating which button was pressed.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.runwizard()                  | Returns either 0, +1 or -1.          |\r\n|                                      |                                      |\r\n|                                      | 0 means the user pressed Cancel, 1   |\r\n|                                      | means the user pressed the first     |\r\n|                                      | button (created by calling           |\r\n|                                      | newwizardpage) and -1 means the user |\r\n|                                      | pressed the second button (created   |\r\n|                                      | by calling newwizardpage).           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewwizardpage()\r\n"}, "save": {"link": "https://kb.lumerical.com/en/ref_scripts_save.html", "text": "Saves an simulation project file. If the simulation has been run, the\r\nfile will also contain the simulation results, such as sweep and\r\noptimization data.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.save()                             | Open a file browser to save the      |\r\n|                                      | file.                                |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.save(filename)                     | Save with the specified name to the  |\r\n|                                      | current working directory. A path    |\r\n|                                      | can be specified.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\nload(), loaddata(), savedata(), savedcard()\r\n"}, "saveelement": {"link": "https://kb.lumerical.com/en/ref_scripts_saveelement.html", "text": "Saves an element to a .ice file in the current working directory.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.saveelement (\"name\")               | Save an element to a file. The       |\r\n|                                      | element will be saved with the       |\r\n|                                      | current element name in the current  |\r\n|                                      | working directory with extension     |\r\n|                                      | ICE.                                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlibrary(), addtolibrary(), probe(), loadelement()\r\n"}, "savedata": {"link": "https://kb.lumerical.com/en/ref_scripts_savedata.html", "text": "Saves workspace variables to a Lumerical data file (ldf) file. To save\r\nmonitor (D-card) data to an ldf file, see the savedcard function.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.savedata(\"filename\")               | Saves all current variables to the   |\r\n|                                      | specified file.                      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.savedata(\"filename\", var1,         | Saves only variables with the        |\r\n| var2,...)                            | specified names to file.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsavedcard(), loaddata(), workspace(), matlabsave()\r\n"}, "savedcard": {"link": "https://kb.lumerical.com/en/ref_scripts_savedcard.html", "text": "Saves d-card data to a Lumerical data file (ldf) file. D-cards are\r\ngenerally used to store monitor data.\r\n\r\nData is saved in the nonorm state. See the units and normalization\r\nsection of the reference guide for more information.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.savedcard(\"filename\")              | Saves all current d-cards (local and |\r\n|                                      | global) to the specified ldf file.   |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.savedcard(\"filename\", \"name1\",     | Saves only the d-cards with the      |\r\n| \"name2\",...)                         | specified names, \"name1\", \"name2\",   |\r\n|                                      | etc.                                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncopydcard(), savedata(), loaddata(), matlabsave()\r\n"}, "savesweep": {"link": "https://kb.lumerical.com/en/ref_scripts_savesweep.html", "text": "Creates and saves the simulations files to a folder in the working\r\ndirectory, this script command is equivalent to the GUI \"Save to files\"\r\noperation.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.savesweep()                        | Saves the simulation files of all    |\r\n|                                      | sweep objects in simulation.         |\r\n+--------------------------------------+--------------------------------------+\r\n| o.savesweep(\"name\")                  | Saves the simulation files of the    |\r\n|                                      | specified sweep object.              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetdata(), runsweep(), havesweepdata(), savedata(), getsweepresult(),\r\nloadsweep()\r\n"}, "scorrcoef": {"link": "https://kb.lumerical.com/en/ref_scripts_scorrcoef.html", "text": "Generates a spatial correlation matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.scorrcoef(x\\_pos, y\\_pos, x\\_corr, | Generates a spatial correlation      |\r\n| y\\_corr)                             | matrix. x\\_pos and y\\_pos are        |\r\n|                                      | vectors containing the x and y       |\r\n|                                      | layout coordinate respectively, and  |\r\n|                                      | x\\_corr and y\\_corr are the          |\r\n|                                      | correlation values for the x and y   |\r\n|                                      | coordinates respectively.            |\r\n|                                      |                                      |\r\n|                                      | Correlation is defined as a Gaussian |\r\n|                                      | function:                            |\r\n|                                      |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ncov(), corrtransf()\r\n"}, "scriptautorun": {"link": "https://kb.lumerical.com/en/ref_scripts_scriptautorun.html", "text": "Disable or enable running script files automatically by typing the\r\nscript name.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.scriptautorun(option)              | The options are                      |\r\n|                                      |                                      |\r\n|                                      | \u20220: disables automatic running of    |\r\n|                                      | script files                         |\r\n|                                      |                                      |\r\n|                                      | \u20221: enables automatic running of     |\r\n|                                      | script files                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfeval()\r\n"}, "select": {"link": "https://kb.lumerical.com/en/ref_scripts_select.html", "text": "Selects objects with a given name in the current group scope. A failed\r\nselect command will have the same result as the unselectall command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.select(\"name\")                     | Selects objects with the name \"name\" |\r\n|                                      | in the current group scope.          |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.select(\"group name::name\")         | Selects all objects with the name    |\r\n|                                      | \"name\" located in the group named    |\r\n|                                      | \"group name\". The group named \"group |\r\n|                                      | name\" must be in the current group   |\r\n|                                      | scope.                               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngroupscope(), unselectall()\r\n"}, "selectall": {"link": "https://kb.lumerical.com/en/ref_scripts_selectall.html", "text": "Selects all objects in the current group scope.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.selectall()                        | Selects all objects in the current   |\r\n|                                      | group scope.                         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngroupscope(), unselectall()\r\n"}, "selectfigure": {"link": "https://kb.lumerical.com/en/ref_scripts_selectfigure.html", "text": "Selects a figure, which will be shown on screen (gives it focus). A\r\nwarning will be generated if the figure does not exist.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.selectfigure()                     | Selects the last figure that was     |\r\n|                                      | created.                             |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.selectfigure(1)                    | Selects figure 1.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nexportfigure(), image(), plot(), setplot(), closeall()\r\n"}, "selectmode": {"link": "https://kb.lumerical.com/en/ref_scripts_selectmode.html", "text": "Selects a mode from the mode list. All modes found in a simulation are\r\nnumbered based on their effective index and they are displayed in the\r\nmode list in the Eigensolver analysis window.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.selectmode(N)                      | Select the Nth mode from the mode    |\r\n|                                      | list.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.selectmode(name)                   | Selects the desired mode where name  |\r\n|                                      | is a string containing the name of a |\r\n|                                      | mode. Modes are named mode1, mode2,  |\r\n|                                      | ..modeN. This form of the command is |\r\n|                                      | compatible with the bestoverlap      |\r\n|                                      | function.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetanalysis(), mesh(), findmodes(), frequencysweep()\r\n"}, "selectpartial": {"link": "https://kb.lumerical.com/en/ref_scripts_selectpartial.html", "text": "Selects any objects with a given partial name.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.selectpartial(\"partialname\")       | Selects any objects where            |\r\n|                                      | \"partialname\" can be found in the    |\r\n|                                      | object name provided the object is   |\r\n|                                      | not in a group. To select objects    |\r\n|                                      | located in groups see the command    |\r\n|                                      | below.                               |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.selectpartial(\"partialgroupname::p | Selects any objects where            |\r\n| artialname\")                         | \"partialgroupname\" can be found in   |\r\n|                                      | the group name and \"partialname\" can |\r\n|                                      | be found in the object name.         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngroupscope()\r\n"}, "set": {"link": "https://kb.lumerical.com/en/ref_scripts_set.html", "text": "Sets a property of currently selected objects. This command will return\r\nan error in analysis mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.set()                        | Returns a list of the properties of  |\r\n|                                      | the selected object(s).              |\r\n+--------------------------------------+--------------------------------------+\r\n| o.set(\"property\",value)              | This will set the properties of a    |\r\n|                                      | currently selected object, including |\r\n|                                      | pull-downs and check boxes. It       |\r\n|                                      | cannot be used to set the value of a |\r\n|                                      | selected object in a group.          |\r\n|                                      |                                      |\r\n|                                      | Value can be a number or string.     |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.set(\"property\",value,i)            | This form can be used to set the     |\r\n|                                      | property of the ith selected object  |\r\n|                                      | when multiple objects are selected.  |\r\n|                                      | It cannot be used to set the value   |\r\n|                                      | of a selected object in a group.     |\r\n|                                      |                                      |\r\n|                                      | The objects are ordered by their     |\r\n|                                      | location in the object tree. The     |\r\n|                                      | uppermost selected object is given   |\r\n|                                      | the index 1, and the index numbers   |\r\n|                                      | increase as you go down the tree.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nget(), setnamed(), setmaterial(), addmaterial(), haveproperty(),\r\nrunsetup(), runanalysis()\r\n"}, "setactivesolver": {"link": "https://kb.lumerical.com/en/ref_scripts_setactivesolver.html", "text": "Sets the specified solver as the active solver. For example, this can be\r\nused to toggle between the FDE, varFDTD, and EME simulations in MODE\r\nSolutions.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.setactivesolver()            | Lists all the possible solver        |\r\n|                                      | choices                              |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setactivesolver('solver\\_name')    | Set the solver with the specified    |\r\n|                                      | name as the active solver.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetactivesolver()\r\n"}, "setanalysis": {"link": "https://kb.lumerical.com/en/ref_scripts_setanalysis.html", "text": "Sets calculation parameters in MODE Solutions' FDE and DEVICE analysis\r\nwindow.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.setanalysis()                | Lists all the parameters in the      |\r\n|                                      | analysis window.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setanalysis(\"property\", value)     | Sets\"property\" to value.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmesh(), findmodes(), frequencysweep(), analysis(), getanalysis()\r\n"}, "setcompositionfraction": {"link": "https://kb.lumerical.com/en/ref_scripts_setcompositionfraction.html", "text": "This command is used to set the composition fraction of two materials in\r\nan alloy.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setcompositionfraction(name,       | Set the composition fraction of two  |\r\n| property, value)                     | materials in an alloy.               |\r\n|                                      |                                      |\r\n|                                      | This command only works if the       |\r\n|                                      | material of the specified structure  |\r\n|                                      | is an alloy.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Property                             | Value                                |\r\n+--------------------------------------+--------------------------------------+\r\n| name                                 | Name of the structure                |\r\n+--------------------------------------+--------------------------------------+\r\n| property                             | Can be set to fixed, linear x,       |\r\n|                                      | linear y, linear z, or custom        |\r\n+--------------------------------------+--------------------------------------+\r\n| value                                | \u2022fixed: scalar number                |\r\n|                                      |                                      |\r\n|                                      | \u2022linear: [value at min, value at     |\r\n|                                      | max]                                 |\r\n|                                      |                                      |\r\n|                                      | \u2022custom: string with function, e.g   |\r\n|                                      | \u201c(w-0.2)^2\u201d using variables u,v,w    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetcompositionfraction()\r\n"}, "setconnectionrouting": {"link": "https://kb.lumerical.com/en/ref_scripts_setconnectionrouting.html", "text": "This command sets the connection routing for a given connection.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setconnectionrouting (element,     | This command sets the connection     |\r\n| port, type) o.setconnectionrouting   | routing for a given connection.      |\r\n| (element, type)                      |                                      |\r\n|                                      | If only the element and the type are |\r\n|                                      | provided, all connections to the     |\r\n|                                      | element port will have the same      |\r\n|                                      | type.                                |\r\n|                                      |                                      |\r\n|                                      | If element name, port and type are   |\r\n|                                      | provided, only the specific element  |\r\n|                                      | port connection will be affected.    |\r\n|                                      |                                      |\r\n|                                      | type = \"direct\" or \"manhattan\".      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "seteigensolver": {"link": "https://kb.lumerical.com/en/ref_scripts_seteigensolver.html", "text": "Mode sources and mode expansion monitors in FDTD and MODE have embedded\r\neigensolvers. This script command makes it possible to set the\r\nproperties of that eigensolver without using the GUI.\r\n\r\nChanging any values of the embedded eigensolver with this command will\r\nautomatically invalidate any existing mode data. This means that new\r\nupdates based on overlap calculations with previous modes will fail\r\nafter using this command. Therefore please call this command before\r\nmaking any calls to updatesourcemode or updatemodes.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.seteigensolver()             | Returns a list of the properties of  |\r\n|                                      | the embedded eigensolver             |\r\n+--------------------------------------+--------------------------------------+\r\n| o.seteigensolver(\"property\",value)   | This will set the eigensolver        |\r\n|                                      | properties of the currently selected |\r\n|                                      | objects.                             |\r\n|                                      |                                      |\r\n|                                      | Value can be a number or string.     |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddmode(), addmodeexpansion(), addport(), clearsourcedata(),\r\nclearmodedata(), clearportmodedata(), expand(), geteigensolver(),\r\nupdatemodes(), updatesourcemode(), updateportmodes()\r\n"}, "setemeanalysis": {"link": "https://kb.lumerical.com/en/ref_scripts_setemeanalysis.html", "text": "Sets calculation parameters in MODE Solutions' EME analysis window.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.setemeanalysis()             | Lists all the parameters in the EME  |\r\n|                                      | analysis window.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setemeanalysis(\"property\", value)  | Sets the parameter named \"property\"  |\r\n|                                      | to value.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetemeanalysis(), emesweep()\r\n"}, "setexpansion": {"link": "https://kb.lumerical.com/en/ref_scripts_setexpansion.html", "text": "Associates a DFT monitor with a mode expansion monitor.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.setexpansion()               | List all monitors under the          |\r\n|                                      | \"Monitors for expansion\" list for    |\r\n|                                      | the selected mode expansion monitor. |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setexpansion(\"name\",               | Adds the \"dft\\_monitor\" to the       |\r\n| \"dft\\_monitor\")                      | \"Monitors for expansion\" list of the |\r\n|                                      | selected mode expansion monitor,     |\r\n|                                      | with the specified name.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddmodeexpansion(), removeexpansion()\r\n"}, "setexpression": {"link": "https://kb.lumerical.com/en/ref_scripts_setexpression.html", "text": "The script command sets the selected element's specified property to the\r\nmentioned expression.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setexpression (name,p,expr)        | Set the property \u2018p\u2019 of element      |\r\n|                                      | \u2018name\u2019 to an expression \u2018expr\u2019.      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nautoarrange(), addproperty(), setexpression(), createcompound()\r\n"}, "setfield": {"link": "https://kb.lumerical.com/en/ref_scripts_setfield.html", "text": "The script command assigns a value to a structure input field.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| output= o.setfield(input,            | Assigns a \u2018value\u2019 to a structure     |\r\n| field,value)                         | \u2018input\u2019 \u2018field\u2019.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n~~~~~~~~\r\n\r\nisfield(), getfield()\r\n"}, "setfir": {"link": "https://kb.lumerical.com/en/ref_scripts_setfir.html", "text": "Initializes a FIR filter using the current s-parameters.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setfir(\"window\",taps,tap\\_estimati | Initializes a FIR filter (with the   |\r\n| on,tolerance,max\\_taps)              | specified number of taps) using the  |\r\n|                                      | current s-parameters.                |\r\n|                                      |                                      |\r\n|                                      | \"window\" is the window function used |\r\n|                                      | by the FIR.                          |\r\n|                                      |                                      |\r\n|                                      | window =  \"rectangular\", \"hamming\"   |\r\n|                                      | or \"hanning\".                        |\r\n|                                      |                                      |\r\n|                                      | tap\\_estimation = 1, the fitting     |\r\n|                                      | will iterate from number of taps to  |\r\n|                                      | max\\_taps to find the best fit with  |\r\n|                                      | the given input tolerance.           |\r\n|                                      |                                      |\r\n|                                      | tap\\_estimation = 2, the fitting     |\r\n|                                      | will use the group delay value of    |\r\n|                                      | the filter (if available).           |\r\n|                                      |                                      |\r\n|                                      | tap\\_estimation = 0, or false,       |\r\n|                                      | tap\\_estimation is disabled.         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetsparameter()\r\n"}, "setglobalmonitor": {"link": "https://kb.lumerical.com/en/ref_scripts_setglobalmonitor.html", "text": "Sets global monitor properties. This command will return an error in\r\nanalysis mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.setglobalmonitor()           | Returns a list of the global monitor |\r\n|                                      | properties                           |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setglobalmonitor(\"property\",value) | Set the global monitor property      |\r\n|                                      | named \"property\" to a value.         |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), getglobalmonitor(), setglobalsource(), getglobalsource()\r\n"}, "setglobalsource": {"link": "https://kb.lumerical.com/en/ref_scripts_setglobalsource.html", "text": "Sets global source properties. This command will return an error in\r\nanalysis mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.setglobalsource()            | Returns a list of the global source  |\r\n|                                      | properties                           |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setglobalsource(\"property\",value)  | Set the global source property named |\r\n|                                      | \"property\" to a value.               |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), setglobalmonitor(), getglobalmonitor(), getglobalsource()\r\n"}, "seticon": {"link": "https://kb.lumerical.com/en/ref_scripts_seticon.html", "text": "Sets a user defined icon for an element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.seticon (name,icon)                | Set a user defined icon for element  |\r\n|                                      | \u2018name\u2019. Parameter \u2018icon\u2019 should be a |\r\n|                                      | vector image format SVG (Scalable    |\r\n|                                      | Vector Graphics) file.               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "setlayer": {"link": "https://kb.lumerical.com/en/ref_scripts_setlayer.html", "text": "Sets the properties of the specified layer of the selected layer builder\r\nobject. There needs to be a layer builder object selected.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setlayer(\"layer name\", \"property   | Sets the properties of a specified   |\r\n| name\", \"property value\")             | layer of the selected layer builder  |\r\n|                                      | object.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddlayerbuilder(), getlayerlist(), setlayer(), loadgdsfile(),\r\naddlayer(), getcelllist(), getlayerlist()\r\n"}, "setmaterial": {"link": "https://kb.lumerical.com/en/ref_scripts_setmaterial.html", "text": "Sets properties of a material in the material database.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.setmaterial(\"materialname\")  | Displays the property names of the   |\r\n|                                      | specified material that can be       |\r\n|                                      | modified.                            |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setmaterial( \"materialname\",       | Sets the property named              |\r\n| \"propertyname\", newvalue)            | \"propertyname\" of the material with  |\r\n|                                      | the name \"materialname\" to newvalue. |\r\n|                                      | The argument newvalue can be a       |\r\n|                                      | number or a string. The arguments    |\r\n|                                      | \"propertyname\" and \"materialname\"    |\r\n|                                      | have to match correct string         |\r\n|                                      | exactly. For example,                |\r\n|                                      |                                      |\r\n|                                      |  setmaterial(\"Si\",\"Mesh order\",4);   |\r\n|                                      |                                      |\r\n|                                      | will set the property \"mesh order\"   |\r\n|                                      | of the materials \"Si\" to 4.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+\r\n+----+\r\n\r\nSee Also\r\n\r\naddmaterial(), deletematerial(), getmaterial(), getindex(),\r\ngetfdtdindex()\r\n"}, "setname": {"link": "https://kb.lumerical.com/en/ref_scripts_setname.html", "text": "The script command setname is used to set the name of a datset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setname(\"test\")                    | Returns the name of the dataset of   |\r\n|                                      | the variable a.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetname()\r\n"}, "setnamed": {"link": "https://kb.lumerical.com/en/ref_scripts_setnamed.html", "text": "Likes the set command, except that the object name must be specified.\r\nThis command will return an error in analysis mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.setnamed(\"name\")             | Returns a list of the properties of  |\r\n|                                      | the objects called name.             |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setnamed(\"name\", \"property\",       | The same as set, but acts on objects |\r\n| value)                               | with a specific name, instead of     |\r\n|                                      | selected objects.                    |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setnamed(\"name\", \"property\",       | This form can be used to set the     |\r\n| value,i)                             | property of the ith named object     |\r\n|                                      | when multiple objects have the same  |\r\n|                                      | name.                                |\r\n|                                      |                                      |\r\n|                                      | The objects are ordered by their     |\r\n|                                      | location in the object tree. The     |\r\n|                                      | uppermost selected object is given   |\r\n|                                      | the index 1, and the index numbers   |\r\n|                                      | increase as you go down the tree.    |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setnamed(\"groupname::name\",        | The same as set, but acts on objects |\r\n| \"property\", value)                   | within the group named \"groupname\"   |\r\n|                                      | that are named \"name\", instead of    |\r\n|                                      | selected objects.                    |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setnamed(\"groupname::name\",        | This form can be used to set the     |\r\n| \"property\", value,i)                 | property of the ith object with the  |\r\n|                                      | name \"name\" in the group \"groupname\" |\r\n|                                      | when multiple objects have the same  |\r\n|                                      | name.                                |\r\n|                                      |                                      |\r\n|                                      | The objects are ordered by their     |\r\n|                                      | location in the object tree. The     |\r\n|                                      | uppermost selected object is given   |\r\n|                                      | the index 1, and the index numbers   |\r\n|                                      | increase as you go down the tree.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nset(), get(), getnamed(), getnamednumber()\r\n"}, "setplot": {"link": "https://kb.lumerical.com/en/ref_scripts_setplot.html", "text": "Sets the plot properties of a figure.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.setplot()                    | Creates a string which lists all     |\r\n|                                      | figure properties for the figure     |\r\n|                                      | that is currently selected. Unless   |\r\n|                                      | the selectfigure() command was       |\r\n|                                      | called, the most recently created    |\r\n|                                      | plot will be selected.               |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setplot(\"property\", \"property      | Set the desired property of the      |\r\n| value\")                              | currently selected figure to         |\r\n|                                      | property value.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nimage(), plot(), visualize()\r\n"}, "setposition": {"link": "https://kb.lumerical.com/en/ref_scripts_setposition.html", "text": "Sets horizontal and vertical positions of an element.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setposition(\"element\",x,y)         | Set an element vertical and          |\r\n|                                      | horizontal positions.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetposition(), setrectangle()\r\n"}, "setrectangle": {"link": "https://kb.lumerical.com/en/ref_scripts_setrectangle.html", "text": "Sets the width or height of an element rectangle.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setrectangle (\"element\",w,h)       | Sets the width (w) and height (h) of |\r\n|                                      | an element rectangle.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetrectangle(), setposition()\r\n"}, "setresult": {"link": "https://kb.lumerical.com/en/ref_scripts_setresult.html", "text": "Sets the result of a Scripted or a Compound element. Note that this\r\ncommand is not available from the script prompt or script file editor.\r\nIt should be used in the Scripted or Compound element \"Simulation\" tabs.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setresult(\"result\",value)          | Sets the \"result\" for the            |\r\n|                                      | scripted/compound element to the     |\r\n|                                      | specified value.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setresult(\"result\",value,\"kind     | Sets the \"result\" for the            |\r\n| (unit)\")                             | scripted/compound element to the     |\r\n|                                      | specified value with the given       |\r\n|                                      | description. Note that units should  |\r\n|                                      | be placed in parenthesis.            |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setresult(\"result\",x,y,\"x          | Sets the x, y parameters of the      |\r\n| title\",'y title')                    | \"result\" for the scripted/compound   |\r\n|                                      | element. This is useful for          |\r\n|                                      | visualization.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetresult()\r\n"}, "setsetting": {"link": "https://kb.lumerical.com/en/ref_scripts_setsetting.html", "text": "Sets the value of a user defined setting. User settings are saved\r\npermanently and available even closing the application.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsetting(\"name\",\"string\\_value\") | Set the value of a user defined      |\r\n|                                      | setting.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+-------------------------+-------------------------+-------------------------+\r\n| Parameter               | Type                    | Description             |\r\n+-------------------------+-------------------------+-------------------------+\r\n| name                    | string                  | name of the setting.    |\r\n+-------------------------+-------------------------+-------------------------+\r\n| string\\_value           | string                  | value of the setting.   |\r\n+-------------------------+-------------------------+-------------------------+\r\n\r\nSee Also\r\n\r\ngetsetting()\r\n"}, "setsparameter": {"link": "https://kb.lumerical.com/en/ref_scripts_setsparameter.html", "text": "Sets the s-parameters between output port and input port.\r\n\r\nIMPORTANT: the filter transfer function depends on the sample rate when\r\nproviding filter coefficients.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsparameter(\"output\\_port\",      | Sets the s-parameter between         |\r\n| \"input\\_port\", \"constant\", value)    | \"output\\_port\" and \"input\\_port\" as  |\r\n|                                      | a single complex constant value      |\r\n|                                      | (frequency independent).             |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsparameter(\"output\\_port\",\"mode | Sets the s-parameter between         |\r\n| \\_label\",                            | \"output\\_port\" and \"input\\_port\" as  |\r\n| output\\_mode\\_ID, \"input\\_port\",     | a single complex constant value      |\r\n| input\\_mode\\_ID, \"constant\", value)  | (frequency independent).             |\r\n|                                      | \"output\\_mode\\_ID\" and               |\r\n|                                      | \"input\\_mode\\_ID\" are numbers (i.e., |\r\n|                                      | 1, 2, 3...).                         |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsparameter(\"output\\_port\",      | Sets the s-parameter between         |\r\n| \"input\\_port\", \"transmission\",       | \"output\\_port\" and \"input\\_port\",    |\r\n| transmission)                        | where the transmission is a matrix   |\r\n|                                      | with 3 columns: frequency (Hz),      |\r\n|                                      | amplitude and angle (rad). The       |\r\n|                                      | number of rows of the matrix is the  |\r\n|                                      | number of frequency points. If only  |\r\n|                                      | two columns are provided, it is      |\r\n|                                      | assume that the angle values are     |\r\n|                                      | zero.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsparameter(\"output\\_port\",\"mode | Sets the s-parameter between         |\r\n| \\_label\",                            | \"output\\_port\" and \"input\\_port\",    |\r\n| output\\_mode\\_ID, \"input\\_port\",     | where the transmission is a matrix   |\r\n| input\\_mode\\_ID, \"transmission\",     | with 3 columns: frequency (Hz),      |\r\n| transmission)                        | amplitude and angle (rad). The       |\r\n|                                      | number of rows of the matrix is the  |\r\n|                                      | number of frequency points. If only  |\r\n|                                      | two columns are provided, it is      |\r\n|                                      | assume that the angle values are     |\r\n|                                      | zero. \"output\\_mode\\_ID\" and         |\r\n|                                      | \"input\\_mode\\_ID\" are numbers (i.e., |\r\n|                                      | 1, 2, 3...).                         |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsparameter(\"output\\_port\",      | Sets the frequency dependent         |\r\n| \"input\\_port\", \"propagation\",        | propagation parameters between       |\r\n| propagation, length, digital,        | \"output\\_port\" and \"input\\_port\",    |\r\n| fractional delay, delay              | where the propagation is a matrix    |\r\n| compensation)                        | with up to 6 columns: frequency      |\r\n|                                      | (Hz), absorption (dB/m), effective   |\r\n|                                      | index, group velocity (m/s),         |\r\n|                                      | dispersion (s/m/m), dispersion slope |\r\n|                                      | (s/m^2/m) and digital filter. The    |\r\n|                                      | number of rows of the matrix is the  |\r\n|                                      | number of frequency points. Group    |\r\n|                                      | velocity, dispersion, dispersion     |\r\n|                                      | slope and digital filter are         |\r\n|                                      | optional. The length (m) is the      |\r\n|                                      | propagation length. Digital is a     |\r\n|                                      | boolean value which defines whether  |\r\n|                                      | the model will use a FIR filter or   |\r\n|                                      | not (default is true). Fractional    |\r\n|                                      | delay is a boolean value which       |\r\n|                                      | defines whether to enable the        |\r\n|                                      | fractional delay option for the      |\r\n|                                      | propagation. Delay compensation is   |\r\n|                                      | the compensation number.             |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsparameter(\"output\\_port\",\"mode | Sets the s-parameter between         |\r\n| \\_label\",                            | \"output\\_port\" and \"input\\_port\",    |\r\n| output\\_mode\\_ID, \"input\\_port\",     | where the propagation is a matrix    |\r\n| input\\_mode\\_ID, \"propagation\",      | with up to 6 columns columns:        |\r\n| propagation, length, digital,        | frequency (Hz), absorption (dB/m),   |\r\n| fractional delay, delay              | effective index, group velocity      |\r\n| compensation)                        | (m/s), dispersion (s/m/m) ,          |\r\n|                                      | dispersion slope (s/m^2/m)  and      |\r\n|                                      | digital filter. The number of rows   |\r\n|                                      | of the matrix is the number of       |\r\n|                                      | frequency points. Group velocity,    |\r\n|                                      | dispersion, dispersion slope and     |\r\n|                                      | digital filter are optional. The     |\r\n|                                      | length (m) is the propagation        |\r\n|                                      | length. Digital is a boolean value   |\r\n|                                      | which defines whether the model will |\r\n|                                      | use a FIR filter or not (default is  |\r\n|                                      | true). Fractional delay is a boolean |\r\n|                                      | value which defines whether to       |\r\n|                                      | enable the fractional delay option   |\r\n|                                      | for the propagation. Delay           |\r\n|                                      | compensation is the compensation     |\r\n|                                      | number. \"output\\_mode\\_ID\" and       |\r\n|                                      | \"input\\_mode\\_ID\" are numbers (i.e., |\r\n|                                      | 1, 2, 3...).                         |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsparameter(\"output\\_port\",\"mode | Sets the s-parameter between         |\r\n| \\_label\",                            | \"output\\_port\" and \"input\\_port\",    |\r\n| output\\_mode\\_ID, \"input\\_port\",     | using \u2018s\u2019 domain coefficients. coeff |\r\n| input\\_mode\\_ID, \"s coefficient\",    | is a matrix with 2 columns: complex  |\r\n| coeff, frequency)                    | numerators and complex denominators. |\r\n|                                      | The number of rows of the matrix is  |\r\n|                                      | the number of coefficients points.   |\r\n|                                      | If the number of numerators are      |\r\n|                                      | different from the number of         |\r\n|                                      | denominators, set the missing values |\r\n|                                      | to zero. frequency is the center     |\r\n|                                      | frequency of the transmission        |\r\n|                                      | described by the coefficients.       |\r\n|                                      | Coefficients are the terms of the    |\r\n|                                      | polynomial and increase in powers of |\r\n|                                      | s. \"output\\_mode\\_ID\" and            |\r\n|                                      | \"input\\_mode\\_ID\" are numbers (i.e., |\r\n|                                      | 1, 2, 3...).                         |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsparameter(\"output\\_port\",\"inpu | Sets the s-parameter between         |\r\n| t\\_port\",                            | \"output\\_port\" and \"input\\_port\",    |\r\n| \"s-coefficient\", coeff, frequency)   | using \u2018s\u2019 domain coefficients. coeff |\r\n|                                      | is a matrix with 2 columns: complex  |\r\n|                                      | numerators and complex denominators. |\r\n|                                      | The number of rows of the matrix is  |\r\n|                                      | the number of coefficients points.   |\r\n|                                      | If the number of numerators are      |\r\n|                                      | different from the number of         |\r\n|                                      | denominators, set the missing values |\r\n|                                      | to zero. frequency is the center     |\r\n|                                      | frequency of the transmission        |\r\n|                                      | described by the coefficients.       |\r\n|                                      | Coefficients are the terms of the    |\r\n|                                      | polynomial and increase in powers of |\r\n|                                      | s.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsetfir()\r\n"}, "setsourcesignal": {"link": "https://kb.lumerical.com/en/ref_scripts_setsourcesignal.html", "text": "Loads a custom source time signal into a source. This advanced source\r\nproperty allows users to create a custom source source time signal and\r\nspectrum. Custom source time signals are required for some types of\r\nnonlinear simulations. This feature is not recommended for most types of\r\nlinear simulations.\r\n\r\nThe custom time signal must be defined in terms of the signal Amplitude\r\nand Phase. This is a convenient definition because the Amplitude and\r\nPhase are generally slowly varying as a function of time (compared with\r\nthe actual time signal), meaning a lower sampling rate can be used to\r\ndefine the custom signal. The actual time domain signal injected by the\r\nsource is given by:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Real valued time domain fields (ie.  | Complex valued time domain fields    |\r\n| most simulations):                   | (eg. Bloch boundary conditions)      |\r\n|                                      |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsourcesignal(\"name\", t,         | Sets the time domain signal of       |\r\n| amplitude, phase)                    | source named \"name\".                 |\r\n|                                      |                                      |\r\n|                                      | t, amplitude, and phase are 1D       |\r\n|                                      | vectors with the same length.        |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsourcesignal(\"name\", t,         | Allows you to specify the precise    |\r\n| amplitude, phase, fcentre,           | center frequency and bandwidth that  |\r\n| bandwidth)                           | will be used for all simulations.    |\r\n|                                      | These values are used for materials  |\r\n|                                      | fits, calculating the mesh, and      |\r\n|                                      | source limits.                       |\r\n|                                      |                                      |\r\n|                                      | If fcentre and bandwidth are not     |\r\n|                                      | specified, they will be              |\r\n|                                      | automatically estimated from the     |\r\n|                                      | time signal.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcepower()\r\n"}, "setsweep": {"link": "https://kb.lumerical.com/en/ref_scripts_setsweep.html", "text": "Sets a property in a parameter sweep/optimization/Monte\r\nCarlo/S-parameter sweep item.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setsweep(\"name\", \"property\\_name\", | Sets a property in a                 |\r\n| property\\_value)                     | sweep/optimization/Monte             |\r\n|                                      | Carlo/S-parameter item.              |\r\n|                                      |                                      |\r\n|                                      | \"name\" is the absolute name of an    |\r\n|                                      | analysis item.                       |\r\n|                                      |                                      |\r\n|                                      | \"property\\_name\" is the property     |\r\n|                                      | showed in the edit window.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nFor a sweep analysis:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Argument                             | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"name\"              | Sets the name of the sweep.          |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"type\"              | Sets the type of the sweep. The      |\r\n|                                      | value of \"type\" could be \"Ranges\" or |\r\n|                                      | \"Values\"                             |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"number of points\"  | Sets the number of points of the     |\r\n|                                      | sweep. The default number of points  |\r\n|                                      | is 10.                               |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"resave files after | Defines whether or not to re-save    |\r\n| analysis\"                            | the file after analysis.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nFor an optimization analysis:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Argument                             | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"name\"              | Sets the name of the optimization.   |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"Type\"              | \"Type\" = \"Maximum\", \"Minimum\"        |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"algorithm\"         | \"algorithm\" = \"Particle Swarm\",      |\r\n|                                      | \"User Defined\"                       |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"maximum            | Sets the maximum generation number.  |\r\n| generations\"                         |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"reset random       | Checks the box of \"Reset random      |\r\n| generator\"                           | generation\".                         |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"tolerance\"         | Sets the tolerance value.            |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"first generation   | Sets the \"first generation script\"   |\r\n| script\"                              | in the \"Advanced\" tab.               |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"next generation    | Sets the \"next generation script\" in |\r\n| script\"                              | the \"Advanced\" tab.                  |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"use figure of      | Checks the box of \"use figure of     |\r\n| merit script\"                        | merit\" in the \"Figure of merit       |\r\n|                                      | script\" tab.                         |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"figure of merit    | Sets the \"figure of merit script\" in |\r\n| script\"                              | the \"Figure of merit script\" tab.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nFor a Monte Carlo analysis:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Argument                             | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"name\"              | Sets the name of the Monte Carlo.    |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"number of trials\"  | Sets the number of trials for the    |\r\n|                                      | Monte Carlo. The default number of   |\r\n|                                      | trials is 10.                        |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"variation\"         | Sets the variation for \"Process\" or  |\r\n|                                      | \"Mismatch\" or \"Both\". The default    |\r\n|                                      | variation is \"Both\".                 |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"seed\"              | Sets the seed.                       |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"enable seed\"       | Sets whether or not to enable the    |\r\n|                                      | seed.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"individual trial\"  | Sets the individual trial number.    |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"enable individual  | Sets whether or not to enable        |\r\n| trail\"                               | individual trials.                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nFor an S-parameter sweep analysis:\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Argument                             | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| property\\_name = \"name\"              | Sets the name of the s-parameter     |\r\n|                                      | sweep.                               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------------------------------------------------------------+\r\n| Additional Notes:                                                        |\r\n|                                                                          |\r\n| Except for the listed default properties of the sweep/optimization/Monte |\r\n| Carlo/S-parameter, any added sweep parameters can be edited by the       |\r\n| setsweep command by setting the \"property\\_name\" to the parameter name.  |\r\n+--------------------------------------------------------------------------+\r\n\r\nSee Also\r\n\r\ndeletesweep(), copysweep(), pastesweep(), addsweep(), insertsweep(),\r\ngetsweep(), addsweepparameter(), addsweepresult(),\r\nremovesweepparameter(), removesweepresult()\r\n"}, "setvalue": {"link": "https://kb.lumerical.com/en/ref_scripts_setvalue.html", "text": "Sets an internal value for an element's internal parameter.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setvalue(element, parameter        | Set an internal value for an         |\r\n| ,value)                              | \u2018element\u2019 internal \u2018parameter\u2019.      |\r\n|                                      | Different from \u2018set\u2019 or \u2018setnamed\u2019,  |\r\n|                                      | \u2018setvalue\u2019 can have direct access to |\r\n|                                      | internal element parameters.         |\r\n|                                      | Currently only the \u2018Optical N Port   |\r\n|                                      | S-Parameter\u2019 support this function   |\r\n|                                      | for the internal \u2018s parameters\u2019      |\r\n|                                      | value. The \u2018s parameters\u2019 parameter  |\r\n|                                      | is a cell that contains a complete   |\r\n|                                      | description of the element           |\r\n|                                      | s-parameters.                        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetvalue()\r\n"}, "setview": {"link": "https://kb.lumerical.com/en/ref_scripts_setview.html", "text": "This command allows the viewing properties of the Layout Editor to be\r\nmodified.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| outstring = o.setview()              | Returns a list of the view           |\r\n|                                      | properties that can be set. The      |\r\n|                                      | command                              |\r\n|                                      |                                      |\r\n|                                      | ?setview;                            |\r\n|                                      |                                      |\r\n|                                      | will return                          |\r\n|                                      |                                      |\r\n|                                      | extent, zoom, theta, phi             |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setview(\"property\")                | Sets the default value for any of    |\r\n|                                      | the view properties. For example,    |\r\n|                                      |                                      |\r\n|                                      | setview(\"extent\");                   |\r\n|                                      |                                      |\r\n|                                      | is the same as pressing the          |\r\n|                                      | graphical extent button.             |\r\n+--------------------------------------+--------------------------------------+\r\n| o.setview(\"property\",value)          | Sets the values to of any property   |\r\n|                                      | for viewing.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nThe following table describes the properties that can be set\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Property                             | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| extent                               | Control the view extent. In this     |\r\n|                                      | case, value should be a 2x1, 4x1 or  |\r\n|                                      | 6x1 matrix representing the view     |\r\n|                                      | range min x, max x, min y, max y,    |\r\n|                                      | min z and max z respectively.        |\r\n+--------------------------------------+--------------------------------------+\r\n| zoom                                 | Controls the relative zoom of the    |\r\n|                                      | perspective view compared to the     |\r\n|                                      | default level. To zoom in by a       |\r\n|                                      | factor of 2 in the perspective view, |\r\n|                                      | use                                  |\r\n|                                      |                                      |\r\n|                                      | setview(\"zoom\",2);                   |\r\n+--------------------------------------+--------------------------------------+\r\n| theta                                | Controls the polar angle of the      |\r\n|                                      | perspective view, in degrees.        |\r\n+--------------------------------------+--------------------------------------+\r\n| phi                                  | Controls the azimuthal angle of the  |\r\n|                                      | perspective view, in degrees.        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetview(), orbit(), redraw()\r\n"}, "shiftselect": {"link": "https://kb.lumerical.com/en/ref_scripts_shiftselect.html", "text": "Same as select, but does not unselect other currently selected objects.\r\nNote that only objects from the same \"group\" can be selected\r\nsimultaneously.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.shiftselect(\"name\")                | The same as select(\"name\"), but does |\r\n|                                      | not unselect currently selected      |\r\n|                                      | objects. Can be used to select       |\r\n|                                      | multiple objects.                    |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.shiftselect(\"group name::name\")    | The same as                          |\r\n|                                      | select(\"groupname::name\"), but does  |\r\n|                                      | not unselect currently selected      |\r\n|                                      | objects.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngroupscope()\r\n"}, "shiftselectpartial": {"link": "https://kb.lumerical.com/en/ref_scripts_shiftselectpartial.html", "text": "Same as selectpartial, but does not unselect other currently selected\r\nobjects.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.shiftselectpartial(\"partialname\")  | The same as                          |\r\n|                                      | selectpartial(\"partialname\"), but    |\r\n|                                      | does not unselect currently selected |\r\n|                                      | objects. Can be used to select       |\r\n|                                      | multiple objects.                    |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n| o.shiftselectpartial(\"partialgroupna | The same as                          |\r\n| me::partialname\")                    | selectpartial(\"partialgroupname::par |\r\n|                                      | tialname\"),                          |\r\n|                                      | but does not unselect currently      |\r\n|                                      | selected objects. Can be used to     |\r\n|                                      | select multiple objects.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngroupscope()\r\n"}, "show": {"link": "https://kb.lumerical.com/en/ref_scripts_show.html", "text": "Shows the graphical user interface, can be used with the hide command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.show()                             | shows the GUI.                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nhide()\r\n"}, "sign": {"link": "https://kb.lumerical.com/en/ref_scripts_sign.html", "text": "Returns the sign of a number.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sign(data)                   | If data is real:                     |\r\n|                                      |                                      |\r\n|                                      | sign = 0 for data=0                  |\r\n|                                      |                                      |\r\n|                                      | sign = 1 for data>0                  |\r\n|                                      |                                      |\r\n|                                      | sign =-1 for data<0                  |\r\n|                                      |                                      |\r\n|                                      | If data is complex:                  |\r\n|                                      |                                      |\r\n|                                      | sign = 0 for data=0+0i               |\r\n|                                      |                                      |\r\n|                                      | sign = data/abs(data) for data       |\r\n|                                      | different from zero                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nfloor(), ceil()\r\n"}, "simulation": {"link": "https://kb.lumerical.com/en/ref_scripts_simulation2.html", "text": "The script command simulation returns bandwidth related simulation\r\nproperties. The time domain simulator will try to accommodate the\r\ncurrent channels into non-overlapping simulation bandwidths. Simulation\r\nproperties include the center frequency, sample rate, number of samples,\r\nfrequency grid spacing, lower and upper frequency limits. If a single\r\nbandwidth is listed, this means all channels fit in the same bandwidth,\r\notherwise multiple bandwidths are required to accommodate all channels\r\nwith the current sample rate.\r\n\r\nThe command also returns the list of source channels in the current\r\nsimulation before the simulation estimate the simulation bandwidths.\r\nThis list includes the overlapped bandwidths. Simulation properties\r\ninclude the center frequency, sample rate, number of samples, frequency\r\ngrid spacing, lower and upper frequency limits. If a single bandwidth is\r\nlisted, this means all channels fit in the same bandwidth, otherwise\r\nmultiple bandwidths are required to accommodate all channels with the\r\ncurrent sample rate.\r\n\r\nThis function is valid during analysis or run-time mode only.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.simulation(\u201cbandwidth\u201d)      | Returns bandwidth related simulation |\r\n|                                      | properties.                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.simulation(\u201cchannels\u201d)       | Returns the list of source channels  |\r\n|                                      | in the current simulation before the |\r\n|                                      | simulation estimate the simulation   |\r\n|                                      | bandwidths.                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.simulation(\u201csingle\u201d)         | Returns the recommended setting for  |\r\n|                                      | simulation using a single band       |\r\n|                                      | (total field) that will make sure    |\r\n|                                      | all channels are merged into one     |\r\n|                                      | simulation bandwidth.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "simulationdiverged": {"link": "https://kb.lumerical.com/en/ref_scripts_simulationdiverged.html", "text": "In layout mode, check whether the simulation reached the divergence\r\nchecking auto shutoff threshold.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.simulationdiverged()           | Returns 1 if the simulation reached  |\r\n|                                      | the auto shutoff max threshold, 0    |\r\n|                                      | otherwise.                           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "sin": {"link": "https://kb.lumerical.com/en/ref_scripts_sin.html", "text": "Calculates the trigonometric sine function. Angle units are in radians.\r\nThe function is defined for complex angles. Phase of a complex number is\r\nevaluated between -pi and pi.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sin(x)                       | Returns the complex sine of x.       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nasin()\r\n"}, "size": {"link": "https://kb.lumerical.com/en/ref_scripts_size.html", "text": "Returns the size of a matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| y = o.size(x)                        | y is a matrix which shows the        |\r\n|                                      | dimensions of x.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| y = o.size(x,n)                      | n is an optional parameter to get    |\r\n|                                      | the size of the matrix in a specific |\r\n|                                      | dimension                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlength(), flip(), transpose()\r\n"}, "smithchart": {"link": "https://kb.lumerical.com/en/ref_scripts_smithchart.html", "text": "Plots impedance values in a Smith chart. The default impedance used for\r\nnormalization is 50 Ohms; this can be modified in the plot settings once\r\nthe plot has been created (see Visualizer for rectilinear data).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.smithchart(Z)                | Creates a curve in a Smith chart     |\r\n|                                      | with the impedance values in the     |\r\n|                                      | array Z. The array Z must be of the  |\r\n|                                      | form NX1 or 1XN.                     |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.smithchart(Z1,Z2,Z3)         | Creates three curves in a Smith      |\r\n|                                      | chart with the impedance values in   |\r\n|                                      | the arrays Z1, Z2 and Z3. Each array |\r\n|                                      | must be of the form NX1 or 1XN, but  |\r\n|                                      | they do not have to be of the same   |\r\n|                                      | dimension.                           |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.smithchart(Z, \"title\",       | Creates a Smith chart with a title,  |\r\n| \"aspect ratio\", norm\\_Z)             | a given aspect ratio and a           |\r\n|                                      | normalized impedance norm\\_Z. The    |\r\n|                                      | aspect ratio must be string that is  |\r\n|                                      | either \"1:1\" or \"fill scene\".        |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\npolar(), setplot()\r\n"}, "solar": {"link": "https://kb.lumerical.com/en/ref_scripts_solar.html", "text": "Returns the solar power spectrum, in Watts/meter^2/meter.\r\n\r\nThe values are based on the global tilt values from the following link:\r\nReference Solar Spectrum Irradiance: ASTM G-173.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.solar(1)                     | Returns the power of the solar       |\r\n|                                      | spectrum as a function of            |\r\n|                                      | wavelength, in W/m^2/m               |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.solar(0)                     | Returns the corresponding wavelength |\r\n|                                      | vector, in m                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplot(), integrate()\r\n"}, "sourceintensity": {"link": "https://kb.lumerical.com/en/ref_scripts_sourceintensity.html", "text": "Returns the source power divided by the area of the source. In 3D\r\nsimulations, the units will be in Watts/m2 if CW norm is used, and\r\nWatts/m2/Hertz2 if No norm is used. This function is often used when\r\nnormalizing power measurements from simulations with a TFSF source.\r\n\r\nIn the case of multiple sources, the sourceintensity(f) command will\r\nreturn the sum of all sourceintensity from all sources.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourceintensity(f)           | Returns the source intensity at the  |\r\n|                                      | vector of frequency points f (f is   |\r\n|                                      | the frequency in Hz).                |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourceintensity(f, option)   | The additional argument, option, can |\r\n|                                      | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourceintensity(f, option,   | This function makes it possible to   |\r\n| name)                                | perform the normalization using the  |\r\n|                                      | spectrum of one source, rather than  |\r\n|                                      | the sum of all the sources.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcenorm(), sourcepower(), sourceintensity\\_avg(),\r\nsourceintensity\\_pavg(), dipolepower(), transmission(), cwnorm(),\r\nnonorm()\r\n"}, "sourceintensity_avg": {"link": "https://kb.lumerical.com/en/ref_scripts_sourceintensity_avg.html", "text": "Returns the total spectral average intensity injected into the\r\nsimulation by the source. The average intensity is equal to the average\r\npower divided by the source area. See the sourcepower\\_pavg command and\r\nthe Units and normalization - Spectral averaging section for more\r\ninformation.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourceintensity\\_avg()       | Returns the spectrally averaged      |\r\n|                                      | source intensity as defined above.   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourceintensity\\_avg(option) | The additional argument, option, can |\r\n|                                      | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourceintensity\\_avg(option, | This function makes it possible to   |\r\n| \"sourcename\")                        | perform the normalization using the  |\r\n|                                      | spectrum of one source, rather than  |\r\n|                                      | the sum of all the sources.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcenorm2\\_avg(), sourceintensity(), sourcepower(),\r\ntransmission\\_avg(), cwnorm(), nonorm()\r\n"}, "sourceintensity_pavg": {"link": "https://kb.lumerical.com/en/ref_scripts_sourceintensity_pavg.html", "text": "Returns the partial spectral average intensity injected into the\r\nsimulation by the source. The partial average intensity is equal to the\r\npartial average power divided by the source area. See the\r\nsourcepower\\_pavg command and the Units and normalization - Spectral\r\naveraging section for more information.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourceintensity\\_pavg (f,df) | Returns the spectrally averaged      |\r\n|                                      | source power as defined above. The   |\r\n|                                      | quantity f is the frequency and the  |\r\n|                                      | quantity df is the frequency range   |\r\n|                                      | around which the averaging is        |\r\n|                                      | performed, both in Hz.               |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourceintensity\\_pavg(f,df,  | The additional argument, option, can |\r\n| option)                              | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourceintensity\\_pavg(f,df,  | This function makes it possible to   |\r\n| option, \"sourcename\")                | perform the normalization using the  |\r\n|                                      | spectrum of one source, rather than  |\r\n|                                      | the sum of all the sources.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcenorm2\\_pavg(), sourcepower(), sourcepower\\_avg(),\r\ntransmission\\_pavg(), cwnorm(), nonorm()\r\n"}, "sourcenorm": {"link": "https://kb.lumerical.com/en/ref_scripts_sourcenorm.html", "text": "Returns the source normalization spectrum used to normalize data in the\r\ncwnorm state for standard fourier transform quantities. See the Units\r\nand normalization chapter for more information. If the source time\r\nsignal of the jth source in the simulation is sj(t), and N is the number\r\nof active sources then\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcenorm(f)                | Returns the source normalization     |\r\n|                                      | used to normalize data in the cwnorm |\r\n|                                      | state at the vector of frequency     |\r\n|                                      | points f. (f is the frequency in Hz) |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcenorm(f, name)          | This function makes it possible to   |\r\n|                                      | perform the normalization using the  |\r\n|                                      | spectrum of one source, rather than  |\r\n|                                      | the sum of all the sources.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcenorm2\\_avg(), sourcenorm2\\_pavg(), sourcepower(), cwnorm(),\r\nnonorm()\r\n"}, "sourcenorm2_avg": {"link": "https://kb.lumerical.com/en/ref_scripts_sourcenorm2_avg.html", "text": "Returns the source normalization spectrum used to normalize data in the\r\ncwnorm state for the total spectral averaged quantities. See the Units\r\nand normalization - Spectral averaging section for more information.\r\n\r\nThe script function sourcenorm is defined as\r\n\r\nIf sourcenorm2\\_avg is called without any arguments, it returns\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcenorm2\\_avg()           | This function returns the source     |\r\n|                                      | normalization for total spectral     |\r\n|                                      | averaged quantities.                 |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcenorm2\\_avg(            | This function makes it possible to   |\r\n| \"sourcename\")                        | perform the normalization using the  |\r\n|                                      | spectrum of one source, rather than  |\r\n|                                      | the sum of all the sources.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcenorm(), sourcenorm2\\_pavg(), sourcepower\\_avg(), cwnorm(),\r\nnonorm()\r\n"}, "sourcenorm2_pavg": {"link": "https://kb.lumerical.com/en/ref_scripts_sourcenorm2_partial_avg.html", "text": "Returns the source normalization spectrum used to normalize data in the\r\ncwnorm state for the partial spectral averaged quantities. See the Units\r\nand normalization - Spectral averaging section for more information.\r\n\r\nIf the source time signal of the jth source in the simulation is sj(t),\r\nand N is the number of active sources then\r\n\r\nPartial spectral averaging uses a Lorentzian weighting of the following\r\nform. Delta is the FWHM of \\|h\\|2.\r\n\r\nIf this function is called without any arguments, it returns\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcenorm2\\_pavg( f, delta) | This function returns the source     |\r\n|                                      | normalization for partial spectral   |\r\n|                                      | averaged quantities.                 |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcenorm2\\_pavg( f, delta, | This function makes it possible to   |\r\n| \"sourcename\")                        | perform the normalization using the  |\r\n|                                      | spectrum of one source, rather than  |\r\n|                                      | the sum of all the sources.          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcenorm(), sourcenorm2\\_avg(), sourcepower\\_pavg(), cwnorm(),\r\nnonorm()\r\n"}, "sourcepower": {"link": "https://kb.lumerical.com/en/ref_scripts_sourcepower.html", "text": "Returns the power injected into the simulation by the source.\r\n\r\nDipole sources\r\n\r\nThe sourcepower script function returns the power the dipole source\r\nwould radiate in a homogeneous medium. This quantity can be calculated\r\nanalytically (see Dipoles - Radiated Power). The actual radiated power\r\nis not given by the sourcepower function. The actual radiated power is\r\nhighly dependant on the surrounding materials, since the reflections\r\nfrom the structures will interfere with the fields from the dipole,\r\nchanging the actual radiated power. To get the actual radiated power,\r\nsee the dipolepower script function.\r\n\r\nOther sources (Gaussian, plane wave, mode, etc)\r\n\r\nThe sourcepower is determined from the equation below. Note that is the\r\nPoynting vector determined from the E, H fields injected by the source.\r\nThe integral is evaluated over the injection plane of the source.\r\n\r\nAs stated above, sourcepower gives the amount of power injected into the\r\nsimulation. The only exception is if the simulation is setup such that\r\nthere is radiation which travels through the injection plane of the\r\nsource in the source injection direction (pink arrow). In such cases,\r\nthe actual amount of power injected by the source will not be given by\r\nsourcepower. In this situation, the incident radiation interferes with\r\nthe source, changing the amount of injected power (similar to what\r\nhappens for the dipole source). In most cases, this means your\r\nsimulation is not setup properly.\r\n\r\nAdditional notes\r\n\r\n\u2022In the case of multiple sources, the sourcepower(f) command will return\r\nthe sum of all sourcepowers from all sources.\r\n\r\n\u2022In 3D simulations, the units will be in Watts if CW norm is used, and\r\nWatts/Hertz2 if no norm is used.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcepower(f)               | Returns the source power used to     |\r\n|                                      | normalize transmission calculations  |\r\n|                                      | at the vector of frequency points f. |\r\n|                                      | (f is the frequency in Hz)           |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcepower(f, option)       | The additional argument, option, can |\r\n|                                      | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcepower(f, option, name) | This option allows you to obtain the |\r\n|                                      | spectrum of one source, rather than  |\r\n|                                      | the sum of all sources. This option  |\r\n|                                      | is only needed for simulations with  |\r\n|                                      | multiple sources.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcenorm(), sourcepower\\_avg(), sourcepower\\_pavg(), dipolepower(),\r\ntransmission(), sourceintensity(), cwnorm(), nonorm()\r\n"}, "sourcepower_avg": {"link": "https://kb.lumerical.com/en/ref_scripts_sourcepower_avg.html", "text": "Returns the total spectral average power injected into the simulation by\r\nthe source. See the Units and normalization - Spectral averaging section\r\nfor more information.\r\n\r\nThis script function calculates the following quantities, depending on\r\nwhether the normalization state is cwnorm or nonorm:\r\n\r\nwhere sourcepower is the quantity returned by the sourcepower script\r\nfunction, s(w) is returned by sourcenorm, and \u03c9=2pif. Typically, this\r\nfunction should be used in the cwnorm state. Also see the\r\nsourcenorm2\\_pavg script function.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcepower\\_avg()           | Returns the spectrally averaged      |\r\n|                                      | source power as defined above.       |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcepower\\_avg(option)     | The additional argument, option, can |\r\n|                                      | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcepower\\_avg(option,     | This option allows you to obtain the |\r\n| \"sourcename\")                        | spectrum of one source, rather than  |\r\n|                                      | the sum of all sources. This option  |\r\n|                                      | is only needed for simulations with  |\r\n|                                      | multiple sources.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcenorm2\\_avg(), sourcepower(), sourcepower\\_pavg(),\r\ntransmission\\_avg(), sourceintensity\\_avg(), cwnorm(), nonorm()\r\n"}, "sourcepower_pavg": {"link": "https://kb.lumerical.com/en/ref_scripts_sourcepower_partial_avg.html", "text": "Returns the partial spectral average power injected into the simulation\r\nby the source. See the Units and normalization - Spectral averaging\r\nsection for more information.\r\n\r\nPartial spectral averaging uses a Lorentzian weighting of the form\r\n\r\nThis script function calculates the following quantities, depending on\r\nwhether the normalization state is cwnorm or nonorm:\r\n\r\nwhere sourcepower is the quantity returned by the sourcepower script\r\nfunction, s(w) is returned by sourcenorm, and \u03c9=2pif. Typically, this\r\nfunction should be used in the cwnorm state. Also see the\r\nsourcenorm2\\_pavg script function.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcepower\\_pavg(f,df)      | Returns the spectrally averaged      |\r\n|                                      | source power as defined above. The   |\r\n|                                      | quantity f is the frequency and the  |\r\n|                                      | quantity df is the frequency range   |\r\n|                                      | around which the averaging is        |\r\n|                                      | performed, both in Hz.               |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcepower\\_pavg(f,         | The additional argument, option, can |\r\n| df,option)                           | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sourcepower\\_pavg(f,df,      | This option allows you to obtain the |\r\n| option, \"sourcename\")                | spectrum of one source, rather than  |\r\n|                                      | the sum of all sources. This option  |\r\n|                                      | is only needed for simulations with  |\r\n|                                      | multiple sources.                    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcenorm2\\_pavg(), sourcepower(), sourcepower\\_avg(),\r\ntransmission\\_pavg(), sourceintensity\\_pavg(), cwnorm(), nonorm()\r\n"}, "spline": {"link": "https://kb.lumerical.com/en/ref_scripts_spline.html", "text": "Does a cubic spline interpolation of a data set.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.spline(Ex,xold,xnew)         | Cubic spline interpolation of a 1D   |\r\n|                                      | function.                            |\r\n|                                      |                                      |\r\n|                                      | \u2022Ex is an existing data set          |\r\n|                                      |                                      |\r\n|                                      | \u2022xold specifies the points where Ex  |\r\n|                                      | is sampled                           |\r\n|                                      |                                      |\r\n|                                      | \u2022xnew specifies new points to        |\r\n|                                      | interpolate the data.                |\r\n|                                      |                                      |\r\n|                                      | The points in xnew do not have to be |\r\n|                                      | within the bounds of xold.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ninterp(), plotxy()\r\n"}, "splitstring": {"link": "https://kb.lumerical.com/en/ref_scripts_splitstring.html", "text": "Splits a long string into a series of substrings, where the substrings\r\nare stored in a cell (i.e., string) array.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| s2 = o.splitstring(s1,endl)          | Split the string S1 into a series of |\r\n|                                      | strings, using the end of line       |\r\n|                                      | character as the delimiter between   |\r\n|                                      | strings. S2 is a cell array.         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlength(), substring(), findstring(), replace(), str2num(), num2str(),\r\ncell(), dir(), getresult(), lower(), upper(), toscript()\r\n"}, "sqrt": {"link": "https://kb.lumerical.com/en/ref_scripts_sqrt.html", "text": "Calculates the square root of a number. Input can be complex or\r\nnegative.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sqrt(x)                      | The square root of x. The square     |\r\n|                                      | root is chosen so that               |\r\n|                                      | real(sqrt(x))\u22650 for any complex      |\r\n|                                      | number x. The imaginary part,        |\r\n|                                      | imag(sqrt(x)), can be positive or    |\r\n|                                      | negative but if real(sqrt(x))=0 then |\r\n|                                      | imag(sqrt(x))\u22650.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+----+\r\n+----+----+\r\n\r\nSee Also\r\n\r\n\r\n"}, "sroughness": {"link": "https://kb.lumerical.com/en/ref_scripts_sroughness.html", "text": "Returns a matrix containing a rough surface characterized by an RMS\r\namplitude.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out= o.sroughness(x\\_span, y\\_span,  | Returns a matrix containing a rough  |\r\n| sigma\\_rms, corr\\_x, corr\\_y, seed)  | surface characterized by an RMS      |\r\n|                                      | amplitude \u2018sigma\\_rms\u2019 and           |\r\n|                                      | correlation lengths \u2018corr\\_x\u2019 and    |\r\n|                                      | \u2018corr\\_y\u2019. The roughness is          |\r\n|                                      | generated by creating a random       |\r\n|                                      | matrix of values in K space defined  |\r\n|                                      | by \u2018x\\_span\u2019 and \u2018y\\_span\u2019. A        |\r\n|                                      | Gaussian filter is applied to this   |\r\n|                                      | matrix, then a Fourier transform is  |\r\n|                                      | used to transform the matrix back to |\r\n|                                      | real space. Due to the way the       |\r\n|                                      | Fourier transform is setup, the      |\r\n|                                      | roughness will be periodic with      |\r\n|                                      | period x, y span. This is convenient |\r\n|                                      | for some application, particularly   |\r\n|                                      | when using periodic boundary         |\r\n|                                      | conditions. The parameter \u2018seed\u2019     |\r\n|                                      | defined the random seed value used   |\r\n|                                      | to generate the surface.             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlength(), substring(), findstring(), replace(), str2num(), num2str(),\r\nsplitstring(), lower(), upper()\r\n"}, "stackrt": {"link": "https://kb.lumerical.com/en/ref_scripts_stackrt.html", "text": "Calculates the reflection and transmission of a plane wave through a\r\nmulti-layer stack using the analytic transfer matrix method. This\r\nfunction returns the fraction of transmitted and reflected power (Ts,\r\nTp, Rs, Rp), and the complex reflection and transmission coefficients\r\n(ts, tp, rs, rp), for both S and P polarizations. All results are\r\nreturned in a single dataset as a function of frequency and incidence\r\nangle (optional).\r\n\r\nTo calculate the fields within the stack, please see stackfield.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: Thickness of first and last layer                                  |\r\n|                                                                          |\r\n| It is necessary to specify the thickness of each layer, including the    |\r\n| first and last layers. Often, a thickness of zero can be used for these  |\r\n| layers, meaning the results will be calculated just beyond the first and |\r\n| last interface. If a larger value is used, the results will be           |\r\n| calculated further from the interface. For non-lossy materials, this     |\r\n| will not affect the reflected and transmitted power, but it will change  |\r\n| phase of the complex coefficients.                                       |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: Sign convention for rp                                             |\r\n|                                                                          |\r\n| stackrt uses the convention that rp is positive when the incident and    |\r\n| reflected magnetic fields are parallel.                                  |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| RT = o.stackrt(n,d,f)                | Arguments for a stack with Nlayers:  |\r\n|                                      |                                      |\r\n|                                      | n: Refractive index of each layer.   |\r\n|                                      | Size is either Nlayers, or Nlayers x |\r\n|                                      | length(f) if dispersive materials    |\r\n|                                      | are involved.                        |\r\n|                                      |                                      |\r\n|                                      | d: Thickness of each layer. Size is  |\r\n|                                      | Nlayers.                             |\r\n|                                      |                                      |\r\n|                                      | f: Frequency vector.                 |\r\n+--------------------------------------+--------------------------------------+\r\n| RT = o.stackrt(n,d,f,theta)          | theta: Angle vector, in degrees.     |\r\n|                                      | Optional.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nstackfield(), getfdtdindex(), visualize()\r\n"}, "stackfield": {"link": "https://kb.lumerical.com/en/ref_scripts_stackfield.html", "text": "Calculates the fields within a multilayer stack illuminated from below\r\nby a plane wave using the analytic transfer matrix method. This function\r\nreturns the E and H fields (Es, Ep, Hs, Hp). All results are returned in\r\na single dataset as a function of frequency, incidence angle and\r\nlocation in the stack (z).\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: Thickness of first and last layer                                  |\r\n|                                                                          |\r\n| It is necessary to specify the thickness of each layer, including the    |\r\n| first and last layers. Often, a thickness of zero can be used for these  |\r\n| layers, meaning the results will be calculated just beyond the first and |\r\n| last interface. If a larger value is used, the results will be           |\r\n| calculated further from the interface. For non-lossy materials, this     |\r\n| will not affect the reflected and transmitted power, but it will change  |\r\n| phase of the complex coefficients.                                       |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note:                                                                    |\r\n|                                                                          |\r\n| This script command was introduced in the 2016b release.                 |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| field = o.stackfield(n,d,f)          | Arguments for a stack with Nlayers:  |\r\n|                                      |                                      |\r\n|                                      | n: Refractive index of each layer.   |\r\n|                                      | Size is either Nlayers, or Nlayers x |\r\n|                                      | length(f) if dispersive materials    |\r\n|                                      | are involved.                        |\r\n|                                      |                                      |\r\n|                                      | d: Thickness of each layer. Size is  |\r\n|                                      | Nlayers.                             |\r\n|                                      |                                      |\r\n|                                      | f: Frequency vector.                 |\r\n+--------------------------------------+--------------------------------------+\r\n| field =                              | theta: Angle vector, in degrees.     |\r\n| o.stackfield(n,d,f,theta,res)        | Optional, default is 0.              |\r\n|                                      |                                      |\r\n|                                      | res: resolution in the field result  |\r\n|                                      | returned. Optional, default is 1000. |\r\n+--------------------------------------+--------------------------------------+\r\n| field =                              | min/max: the min/max position where  |\r\n| o.stackfield(n,d,f,theta,res,min,max | the user wishes to compute the       |\r\n| )                                    | field. 0 corresponds to the bottom   |\r\n|                                      | of the stack. Optional, default is   |\r\n|                                      | the span of the multilayer stack.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nstackrt(), getfdtdindex(), visualize(), stackdipole()\r\n"}, "stackdipole": {"link": "https://kb.lumerical.com/en/ref_scripts_stackdipole.html", "text": "Analytically calculates the dipole emission properties for a multilayer\r\nstack. For unpatterned planar stacks, this is often much more efficient\r\nthan running fully vectorial simulations with FDTD Solutions.\r\n\r\nThis function returns the luminance (cd/m^2) and radiance\r\n(W/steradian/m^2) as a function of emission angle, as well as the\r\ncorresponding X, Y, Z tristimulus values, assuming current density of\r\n1A/m^2. The CIE 1931 color functions [1] are used for calculating X, Y,\r\nZ.\r\n\r\nReferences:\r\n~~~~~~~~~~~\r\n\r\n[1] CIE Proceedings (1932), 1931. Cambridge: Cambridge University Press.\r\n\r\n \r\n~\r\n\r\nRelated topics:\r\n~~~~~~~~~~~~~~~\r\n\r\nTo calculate the Purcell factor and far-field emission power density for\r\na multilayer stack, see stackpurcell.\r\n\r\nFor simulating the plane wave transmission of a multi-layer stack, see\r\nstackrt, stackfield\r\n\r\nFor mode analysis of an OLED layer structure, see OLED slab mode\r\nanalysis. For simulating the dipole emission for arbitrary geometries\r\nusing the finite-difference time-domain method, see OLED application\r\nexamples.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: Thickness of first and last layer                                  |\r\n|                                                                          |\r\n| It is necessary to specify the thickness of each layer, including the    |\r\n| first and last layers. Often, a thickness of zero can be used for these  |\r\n| layers.                                                                  |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| dipole\\_emission =                   | Analytically calculates the dipole   |\r\n| o.stackdipole(n,d,f,z,dipole\\_spec,o | emission properties of a multi-layer |\r\n| rientation,res,direction,            | stack                                |\r\n| ef,st,rd)                            |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| n              | required       |                | vector         | Refractive     |\r\n|                |                |                |                | index of each  |\r\n|                |                |                |                | layer.         |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is either |\r\n|                |                |                |                | Nlayers, or    |\r\n|                |                |                |                | Nlayers x      |\r\n|                |                |                |                | length(f) if   |\r\n|                |                |                |                | dispersive     |\r\n|                |                |                |                | materials are  |\r\n|                |                |                |                | involved.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| d              | required       |                | vector         | Thickness of   |\r\n|                |                |                |                | each layer.    |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is        |\r\n|                |                |                |                | Nlayers.       |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | required       |                | vector         | Frequency      |\r\n|                |                |                |                | vector.        |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| z              | required       |                | vector         | Position of    |\r\n|                |                |                |                | the dipoles (0 |\r\n|                |                |                |                | is the bottom  |\r\n|                |                |                |                | of the stack). |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is        |\r\n|                |                |                |                | Ndipoles.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| dipole\\_spec   | required       |                | vector         | Dipole         |\r\n|                |                |                |                | spectrum. This |\r\n|                |                |                |                | is treated as  |\r\n|                |                |                |                | a power        |\r\n|                |                |                |                | intensity      |\r\n|                |                |                |                | distribution,  |\r\n|                |                |                |                | integrated by  |\r\n|                |                |                |                | midpoint rule  |\r\n|                |                |                |                | in wavelength. |\r\n|                |                |                |                | The photon     |\r\n|                |                |                |                | probability    |\r\n|                |                |                |                | distribution   |\r\n|                |                |                |                | is calculated  |\r\n|                |                |                |                | by normalizing |\r\n|                |                |                |                | dipole\\_spec/f |\r\n|                |                |                |                | .              |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is        |\r\n|                |                |                |                | Ndipoles x     |\r\n|                |                |                |                | length(f).     |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| orientation    | optional       | 0              | vector         | Orientation of |\r\n|                |                |                |                | the dipoles.   |\r\n|                |                |                |                | The options    |\r\n|                |                |                |                | are            |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Unpolarized: 0 |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Vertical       |\r\n|                |                |                |                | p-polarized :  |\r\n|                |                |                |                | 1              |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Horizontal     |\r\n|                |                |                |                | s-polarized: 2 |\r\n|                |                |                |                |                |\r\n|                |                |                |                | horizontal     |\r\n|                |                |                |                | p-polarized :  |\r\n|                |                |                |                | 3              |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is        |\r\n|                |                |                |                | Ndipoles.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| res            | optional       | 1000           | number         | The resolution |\r\n|                |                |                |                | for far field  |\r\n|                |                |                |                | emission       |\r\n|                |                |                |                | angle.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| direction      | optional       | 1              | number         | Choice of far  |\r\n|                |                |                |                | field half     |\r\n|                |                |                |                | space, this    |\r\n|                |                |                |                | can be +1      |\r\n|                |                |                |                | (top) or -1    |\r\n|                |                |                |                | (bottom).      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| ef             | optional       | 1              | vector         | The exciton    |\r\n|                |                |                |                | fraction. The  |\r\n|                |                |                |                | default value  |\r\n|                |                |                |                | is 1, which    |\r\n|                |                |                |                | means that     |\r\n|                |                |                |                | every carrier  |\r\n|                |                |                |                | results in an  |\r\n|                |                |                |                | exciton.       |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is        |\r\n|                |                |                |                | Ndipoles.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| st             | optional       | 0.25           | vector         | The singlet    |\r\n|                |                |                |                | exciton        |\r\n|                |                |                |                | fraction. The  |\r\n|                |                |                |                | default value  |\r\n|                |                |                |                | is 0.25, which |\r\n|                |                |                |                | means that     |\r\n|                |                |                |                | there are 3    |\r\n|                |                |                |                | spin triplets  |\r\n|                |                |                |                | per spin       |\r\n|                |                |                |                | singlet.       |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is        |\r\n|                |                |                |                | Ndipoles.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| rd             | optional       | 1              | vector         | The relative   |\r\n|                |                |                |                | decay rate.    |\r\n|                |                |                |                | The default    |\r\n|                |                |                |                | value is 1,    |\r\n|                |                |                |                | which means    |\r\n|                |                |                |                | that every     |\r\n|                |                |                |                | singlet        |\r\n|                |                |                |                | exciton        |\r\n|                |                |                |                | results in a   |\r\n|                |                |                |                | photon and     |\r\n|                |                |                |                | there is no    |\r\n|                |                |                |                | contribution   |\r\n|                |                |                |                | from           |\r\n|                |                |                |                | non-radiative  |\r\n|                |                |                |                | decay          |\r\n|                |                |                |                | processes.     |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is        |\r\n|                |                |                |                | Ndipoles.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nstackrt(), stackfield(), stackpurcell()\r\n"}, "stackpurcell": {"link": "https://kb.lumerical.com/en/ref_scripts_stackpurcell.html", "text": "Analytically calculates the Purcell factor and far-field emission power\r\ndensity for a multilayer stack. The usage for this command is very\r\nsimilar to stackdipole, but the result returned in this case is a struct\r\nthat contains the following datasets:\r\n\r\n1. power\r\n\r\nAttribute: purcell\\_factor. This is the total power of a monochromatic\r\ndipole at the specified position and emission frequency divided by the\r\npower that it would radiate in a homogeneous medium.\r\n\r\nParameters: dipole/z, f/lambda\r\n\r\n2. density\r\n\r\nAttributes: upward, downward, upward\\_into\\_air, downward\\_into\\_air.\r\nThis is the power density per steradian by far field emission angle,\r\nalso in units of the power that would radiate in a homogeneous medium.\r\n\r\nParameters: theta, dipole/z, frequency/wavelength\r\n\r\nRelated topics:\r\n~~~~~~~~~~~~~~~\r\n\r\nTo calculate the luminance and radiance of a multi-layer stack, see\r\nstackdipole\r\n\r\nFor simulating the plane wave transmission of a multi-layer stack, see\r\nstackrt, stackfield For mode analysis of an OLED layer structure, see\r\nOLED slab mode analysis. For simulating the dipole emission for\r\narbitrary geometries using the finite-difference time-domain method, see\r\nOLED application examples.\r\n\r\n+--------------------------------------------------------------------------+\r\n| Note: Thickness of first and last layer                                  |\r\n|                                                                          |\r\n| It is necessary to specify the thickness of each layer, including the    |\r\n| first and last layers. Often, a thickness of zero can be used for these  |\r\n| layers.                                                                  |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| result =                             | Analytically calculates the Purcell  |\r\n| o.stackpurcell(n,d,f,z,orientation,r | factor and far-field emission power  |\r\n| es)                                  | density of a multi-layer stack       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| n              | required       |                | vector         | Refractive     |\r\n|                |                |                |                | index of each  |\r\n|                |                |                |                | layer.         |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is either |\r\n|                |                |                |                | Nlayers, or    |\r\n|                |                |                |                | Nlayers x      |\r\n|                |                |                |                | length(f) if   |\r\n|                |                |                |                | dispersive     |\r\n|                |                |                |                | materials are  |\r\n|                |                |                |                | involved.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| d              | required       |                | vector         | Thickness of   |\r\n|                |                |                |                | each layer.    |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is        |\r\n|                |                |                |                | Nlayers.       |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| f              | required       |                | vector         | Frequency      |\r\n|                |                |                |                | vector.        |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| z              | required       |                | vector         | Position of    |\r\n|                |                |                |                | the dipoles (0 |\r\n|                |                |                |                | is the bottom  |\r\n|                |                |                |                | of the stack). |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is        |\r\n|                |                |                |                | Ndipoles.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| orientation    | optional       | 0              | vector         | Orientation of |\r\n|                |                |                |                | the dipoles.   |\r\n|                |                |                |                | The options    |\r\n|                |                |                |                | are            |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Unpolarized: 0 |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Vertical       |\r\n|                |                |                |                | p-polarized :  |\r\n|                |                |                |                | 1              |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Horizontal     |\r\n|                |                |                |                | s-polarized: 2 |\r\n|                |                |                |                |                |\r\n|                |                |                |                | horizontal     |\r\n|                |                |                |                | p-polarized :  |\r\n|                |                |                |                | 3              |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Size is        |\r\n|                |                |                |                | Ndipoles.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| res            | optional       | 1000           | number         | The resolution |\r\n|                |                |                |                | for far field  |\r\n|                |                |                |                | emission       |\r\n|                |                |                |                | angle.         |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nstackrt(), stackfield(), stackdipole()\r\n"}, "std": {"link": "https://kb.lumerical.com/en/ref_scripts_std.html", "text": "Returns the standard deviation of the all entries of the specified\r\nmatrix. The standard deviation of a set of N numbers X = [x1,...,xN] is\r\ndefined as\r\n\r\nwhere \u03bc is the mean of X.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.std(A)                       | Will return the standard deviation   |\r\n|                                      | of matrix A, over all dimensions.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nvar(), mean(), sum(), length()\r\n"}, "stepimport": {"link": "https://kb.lumerical.com/en/ref_scripts_stepimport.html", "text": "Adds a structure to the simulation environment with structure geometry\r\nloaded from specified STEP file.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.stepimport(\"filename\")             | Add new structures from specified    |\r\n|                                      | STEP (AP203/214) type CAD file.      |\r\n|                                      | Supports multibody parts. Only       |\r\n|                                      | manifold solid bodies are imported - |\r\n|                                      | wires, surfaces and faceted solids   |\r\n|                                      | will not be imported.                |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n"}, "stlimport": {"link": "https://kb.lumerical.com/en/ref_scripts_stlimport.html", "text": "Adds a structure to the simulation environment with structure geometry\r\nloaded from specified STL file.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.stlimport(filename,scalingFactor,  | Add a new structure from specified   |\r\n| vertexRadius,debugFlag)              | STL type CAD file.                   |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| Parameter      |                | Default value  | Type           | Description    |\r\n+================+================+================+================+================+\r\n| filename       | required       |                | string         | Name of the    |\r\n|                |                |                |                | STL CAD file.  |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| scalingFactor  | optional       | 1e-6           | number         | An STL file    |\r\n|                |                |                |                | does not       |\r\n|                |                |                |                | contain a      |\r\n|                |                |                |                | unit. When     |\r\n|                |                |                |                | imported to    |\r\n|                |                |                |                | Lumerical's    |\r\n|                |                |                |                | software, the  |\r\n|                |                |                |                | unit is micron |\r\n|                |                |                |                | by default. To |\r\n|                |                |                |                | have the unit  |\r\n|                |                |                |                | in nanometer,  |\r\n|                |                |                |                | set            |\r\n|                |                |                |                | scaling\\_facto |\r\n|                |                |                |                | r              |\r\n|                |                |                |                | 1e-9.          |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| vertexRadius   | optional       | 1e-12          | length (in m)  | Vertices may   |\r\n|                |                |                |                | be shared by   |\r\n|                |                |                |                | multiple       |\r\n|                |                |                |                | triangles so   |\r\n|                |                |                |                | the same       |\r\n|                |                |                |                | vertex may be  |\r\n|                |                |                |                | loaded         |\r\n|                |                |                |                | multiple times |\r\n|                |                |                |                | for different  |\r\n|                |                |                |                | triangles. The |\r\n|                |                |                |                | vertexRadius   |\r\n|                |                |                |                | is the minimum |\r\n|                |                |                |                | distance       |\r\n|                |                |                |                | between two    |\r\n|                |                |                |                | vertices so    |\r\n|                |                |                |                | that they are  |\r\n|                |                |                |                | considered to  |\r\n|                |                |                |                | be distinct    |\r\n|                |                |                |                | vertices.      |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n| debugFlag      | optional       | false          | boolean        | If true, the   |\r\n|                |                |                |                | following data |\r\n|                |                |                |                | will be        |\r\n|                |                |                |                | printed to the |\r\n|                |                |                |                | script prompt: |\r\n|                |                |                |                |                |\r\n|                |                |                |                | -Input Vertex  |\r\n|                |                |                |                | Count (total   |\r\n|                |                |                |                | number of      |\r\n|                |                |                |                | vertices in    |\r\n|                |                |                |                | the file)      |\r\n|                |                |                |                |                |\r\n|                |                |                |                | -Triangles     |\r\n|                |                |                |                | (total number  |\r\n|                |                |                |                | of triangles)  |\r\n|                |                |                |                |                |\r\n|                |                |                |                | -Filtered      |\r\n|                |                |                |                | Vertices       |\r\n|                |                |                |                | (number of     |\r\n|                |                |                |                | unique         |\r\n|                |                |                |                | vertices)      |\r\n|                |                |                |                |                |\r\n|                |                |                |                | -Vertex        |\r\n|                |                |                |                | Collisions     |\r\n|                |                |                |                | (Input Vertex  |\r\n|                |                |                |                | Count minus    |\r\n|                |                |                |                | Filtered       |\r\n|                |                |                |                | Vertices)      |\r\n|                |                |                |                |                |\r\n|                |                |                |                | -Invalid       |\r\n|                |                |                |                | Triangles      |\r\n|                |                |                |                |                |\r\n|                |                |                |                | -Expected      |\r\n|                |                |                |                | Vertex         |\r\n|                |                |                |                | Collisions     |\r\n|                |                |                |                |                |\r\n|                |                |                |                | If the number  |\r\n|                |                |                |                | of invalid     |\r\n|                |                |                |                | triangles is   |\r\n|                |                |                |                | larger than 0, |\r\n|                |                |                |                | try adjusting  |\r\n|                |                |                |                | the            |\r\n|                |                |                |                | vertexRadius   |\r\n|                |                |                |                | parameter and  |\r\n|                |                |                |                | importing the  |\r\n|                |                |                |                | object again.  |\r\n|                |                |                |                |                |\r\n|                |                |                |                | Note: If there |\r\n|                |                |                |                | are a large    |\r\n|                |                |                |                | number of      |\r\n|                |                |                |                | triangles in   |\r\n|                |                |                |                | the STL file,  |\r\n|                |                |                |                | the script     |\r\n|                |                |                |                | function can   |\r\n|                |                |                |                | take longer to |\r\n|                |                |                |                | run when       |\r\n|                |                |                |                | debugFlag is   |\r\n|                |                |                |                | set to true.   |\r\n+----------------+----------------+----------------+----------------+----------------+\r\n\r\nSee Also\r\n\r\nset(), readstltriangles()\r\n"}, "struct": {"link": "https://kb.lumerical.com/en/ref_scripts_struct.html", "text": "Adds a structure array. Any data type (such as matrix, string, dataset)\r\ncan be added to structure arrays.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| a = o.struct()                       | Creates an structure array.          |\r\n+--------------------------------------+--------------------------------------+\r\n| a.a = \"string\"()                     | Adds a string field to the structure |\r\n|                                      | array.                               |\r\n+--------------------------------------+--------------------------------------+\r\n| a.b = matrix(5,5)                    | Adds a field of matrix of 5x5 to the |\r\n|                                      | structure array.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nmatrixdataset(), rectilineardataset(), cell()\r\n"}, "str2num": {"link": "https://kb.lumerical.com/en/ref_scripts_str2num.html", "text": "Converts a string into a floating point number. Use the format script\r\ncommand to change the precision of the output.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.str2num(string)              | Converts string into a number.       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nendl(), write(), format(), findstring(), replace(), replacestring(),\r\nsubstring(), lower(), upper(), toscript(), almostequal()\r\n"}, "substring": {"link": "https://kb.lumerical.com/en/ref_scripts_substring.html", "text": "Extracts a substring from a string.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| s1 = o.substring(s,pos)              | Returns a substring of s, starting   |\r\n|                                      | at position pos to the end of s. The |\r\n|                                      | position pos can be 1 to length(s).  |\r\n+--------------------------------------+--------------------------------------+\r\n| s1 = o.substring(s,pos,len)          | Returns a substring of s, starting   |\r\n|                                      | at position pos, with len            |\r\n|                                      | characters. If len is -1 (or any     |\r\n|                                      | value less than 0) it returns the    |\r\n|                                      | substring at position pos to the end |\r\n|                                      | of s. The default value of len is    |\r\n|                                      | -1.                                  |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlength(), findstring(), replace(), replacestring(), str2num(),\r\nnum2str(), splitstring(), lower(), upper(), toscript()\r\n"}, "sum": {"link": "https://kb.lumerical.com/en/ref_scripts_sum.html", "text": "Returns the sum of elements in a matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sum(x)                       | Sum of all the elements in matrix x, |\r\n|                                      | over all dimensions.                 |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.sum(x,n)                     | Sum elements of x over the specified |\r\n|                                      | dimension n.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nintegrate(), mean(), prod()\r\n"}, "svd": {"link": "https://kb.lumerical.com/en/ref_scripts_svd.html", "text": "Returns a 3-cell array with the singular value decomposition of a matrix\r\nA. The command supports real and complex A.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| [U,S,V\\*] = o.svd(A)                 | Returns a 3-cell array with the      |\r\n|                                      | singular value decomposition of      |\r\n|                                      | matrix A. S is a diagonal matrix of  |\r\n|                                      | the same dimension as A, with        |\r\n|                                      | non-negative diagonal elements in    |\r\n|                                      | decreasing order. U and V\\* are      |\r\n|                                      | unitary matrices (V\\* is the         |\r\n|                                      | conjugate transpose of V). If M =    |\r\n|                                      | svd(A), then A = mult( M{1}, M{2},   |\r\n|                                      | M{3} ).                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\neig(), ctranspose(), mult()\r\n"}, "switchtodesign": {"link": "https://kb.lumerical.com/en/ref_scripts_switchtodesign.html", "text": "Switches INTERCONNECT to DESIGN mode.  The DESIGN mode allows you to add\r\nand modify circuit elements for a new simulation.  Once a simulation is\r\nrun, the solver goes into ANALYSIS mode and no elements can be added or\r\nmodified.  While in ANALYSIS mode, any command to modify or add elements\r\nwill return error. You must switch to DESIGN mode for that.  Note that\r\nany available results will be lost once the solver is switched back to\r\nDESIGN mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.switchtodesign()                   | Switches INTERCONNECT from ANALYSIS  |\r\n|                                      | to DESIGN mode.                      |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nswitchtolayout(), layoutmode(), designmode()\r\n"}, "switchtolayout": {"link": "https://kb.lumerical.com/en/ref_scripts_switchtolayout.html", "text": "Switches the solver to LAYOUT mode.  The LAYOUT mode allows you to add\r\nand modify simulation objects for a new simulation.  Once a simulation\r\nis run, the solver goes into ANALYSIS mode and no simulation objects can\r\nbe added or modified (Except for the \"Analysis\" tab of analysis groups).\r\n While in ANALYSIS mode, any commands to modify objects will return\r\nerrors. You must switch to LAYOUT mode before modifying any objects.\r\n Note that any available results will be lost once the solver is\r\nswitched back to LAYOUT mode.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.switchtolayout()                   | Switches to LAYOUT mode from         |\r\n|                                      | ANALYSIS mode.                       |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlayoutmode(), run(), setnamed()\r\n"}, "system": {"link": "https://kb.lumerical.com/en/ref_scripts_system.html", "text": "The system command allows you to have the operating system (OS) execute\r\na command, rather than the Lumerical Script Prompt.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.system(\"command\")                  | Run \"command\" at the OS command      |\r\n|                                      | prompt.                              |\r\n|                                      |                                      |\r\n|                                      | The system command does not return   |\r\n|                                      | any data.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nreaddata(), exit(), currentfilename()\r\n"}, "tan": {"link": "https://kb.lumerical.com/en/ref_scripts_tan.html", "text": "Calculates the trigonometric tangent function. Angle units are in\r\nradians. The function is defined for complex angles. Phase of a complex\r\nnumber is evaluated between -pi and pi.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.tan(x)                       | Returns the complex tangent of x.    |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\natan(), atan2()\r\n"}, "tecplotread": {"link": "https://kb.lumerical.com/en/ref_scripts_tecplotread.html", "text": "Imports data from Tecplot formatted file (text).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.tecplotread('filename.dat')  | List all zones ( domains) in the     |\r\n|                                      | data file.                           |\r\n+--------------------------------------+--------------------------------------+\r\n| print                                | List all of the data fields          |\r\n| o.tecplotread('filename.dat','zonena | associated with the zone.            |\r\n| me')                                 |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n| out =                                | Retrieve the data as an array        |\r\n| o.tecplotread('filename.dat','zonena |                                      |\r\n| me','dataname')                      |                                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsystem(), matlabload(), h5read()\r\n"}, "toscript": {"link": "https://kb.lumerical.com/en/ref_scripts_toscript.html", "text": "Returns a string containing the equivalent script to generate a\r\nvariable. This script function is particularly useful when debugging\r\ncells and structure variables.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.toscript(variable, expand)     | Returns a string containing the      |\r\n|                                      | equivalent script to generate        |\r\n|                                      | \u2018variable\u2019. If \u2018expand\u2019 is true,     |\r\n|                                      | matrix values will also be converted |\r\n|                                      | to script, regardless of their size  |\r\n|                                      | \u2013 this can lead to large strings. To |\r\n|                                      | prevent the matrix values conversion |\r\n|                                      | set expand to \u2018false\u2019. The default   |\r\n|                                      | for 'expand' is true.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlength(), substring(), findstring(), replace(), str2num(), num2str(),\r\nsplitstring(), lower(), upper()\r\n"}, "touchstoneload": {"link": "https://kb.lumerical.com/en/ref_scripts_touchstoneload.html", "text": "Loads passive network data from a file containing Touchstone file\r\nformatted s-parameters. For more information about the Touchstone\r\nspecification refer to\r\nhttp://www.vhdl.org/pub/ibis/connector/touchstone\\_spec11.pdf.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.touchstoneload (filename)    | It returns a matrix where the first  |\r\n|                                      | column contains the frequency values |\r\n|                                      | in Hz. S-parameters are returned     |\r\n|                                      | using MA format, where M is the      |\r\n|                                      | magnitude and A is the angle in      |\r\n|                                      | radians.                             |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\n\r\n"}, "transmission": {"link": "https://kb.lumerical.com/en/ref_scripts_transmission.html", "text": "Returns the amount of power transmitted through power monitors and\r\nprofile monitors, normalized to the source power.  A value of 0.3 means\r\nthat 30% the optical power injected by the source passed through the\r\nmonitor. Negative values mean the power is flowing in the negative\r\ndirection.\r\n\r\nIn the steady state, the transmission is calculated with the following\r\nformula.\r\n\r\nwhere\r\n\r\nT(f) is the normalized transmission as a function of frequency\r\n\r\nP(f) is the Poynting vector normal to the surface\r\n\r\ndS is the surface normal\r\n\r\nThe normalization state (cwnorm or nonorm) does not affect the result\r\nbecause of the source power normalization.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.transmission(\"mname\")        | Transmission through monitor mname.  |\r\n|                                      | It must be obvious from the shape of |\r\n|                                      | the monitor which axis is normal to  |\r\n|                                      | the monitor surface.                 |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.transmission(\"mname\",        | The additional argument, option, can |\r\n| option)                              | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcepower(), dipolepower(), transmission\\_avg(), transmission\\_pavg()\r\n"}, "transmission_avg": {"link": "https://kb.lumerical.com/en/ref_scripts_transmission_avg.html", "text": "Returns the total spectral average power through a monitor surface,\r\nnormalized to the total spectral average of the source. See the Units\r\nand normalization - Spectral averaging section for more information.\r\n\r\nwhere        \r\n\r\nTavg is the normalized total spectral average transmission\r\n\r\n<P> is the total spectral average Poynting vector\r\n\r\ndS is the surface normal\r\n\r\nThe normalization state (cwnorm or nonorm) does not affect the result\r\nbecause of the source power normalization.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.transmission\\_avg            | Returns the total spectral average   |\r\n| (\"monitorname\")                      | transmission through monitorname. It |\r\n|                                      | must be obvious from the shape of    |\r\n|                                      | the monitor which axis is normal to  |\r\n|                                      | the monitor surface.                 |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.transmission\\_avg            | The additional argument, option, can |\r\n| (\"monitorname\", option)              | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcepower\\_avg(), transmission(), transmission\\_pavg()\r\n"}, "transmission_pavg": {"link": "https://kb.lumerical.com/en/ref_scripts_transmission_partial_avg.html", "text": "Returns the partial spectral average power through a monitor surface,\r\nnormalized to the partial spectral average of the source. See the Units\r\nand normalization - Spectral averaging section for more information.\r\n\r\nwhere        \r\n\r\nTpavg is the normalized partial spectral average transmission\r\n\r\n<P> is the partial spectral average Poynting vector\r\n\r\ndS is the surface normal\r\n\r\nThe normalization state (cwnorm or nonorm) does not affect the result\r\nbecause of the source power normalization.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.transmission\\_pavg           | Returns the partial spectral average |\r\n| (\"monitorname\")                      | transmission through monitorname. It |\r\n|                                      | must be obvious from the shape of    |\r\n|                                      | the monitor which axis is normal to  |\r\n|                                      | the monitor surface.                 |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.transmission\\_pavg           | The additional argument, option, can |\r\n| (\"monitorname\", option)              | have a value of 1 or 2. If it is 2,  |\r\n|                                      | the data is unfolded where possible  |\r\n|                                      | according to the symmetry or         |\r\n|                                      | anti-symmetric boundaries if it      |\r\n|                                      | comes from a monitor that intersect  |\r\n|                                      | such a boundary at x min, y min or z |\r\n|                                      | min. The default value of option is  |\r\n|                                      | 2.                                   |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsourcepower\\_pavg(), transmission(), transmission\\_avg()\r\n"}, "transpose": {"link": "https://kb.lumerical.com/en/ref_scripts_transpose.html", "text": "Transposes a 1D or 2D matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| y = o.transpose(x)                   | If x is an N x M matrix, then y will |\r\n|                                      | be M x N, where the entries are      |\r\n|                                      | y(j,i)=x(i,j).                       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nctranspose(), reshape(), flip(), permute(), size()\r\n"}, "try": {"link": "https://kb.lumerical.com/en/ref_scripts_try.html", "text": "Allows the execution of the script to continue even though an error\r\noccurs within a block.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.try { Command1; Command2; ... }    | Runs the block of commands. If an    |\r\n|                                      | error occurs, the error message is   |\r\n|                                      | displayed and the script continues.  |\r\n+--------------------------------------+--------------------------------------+\r\n| o.try { Command1; Command2: ... }    | Runs the block of commands. If an    |\r\n| catch(errMsg)                        | error occurs, the error message is   |\r\n|                                      | stored in the variable \"errMsg\" and  |\r\n|                                      | the script continues.                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nif()\r\n"}, "unfoldsymmetricdata": {"link": "https://kb.lumerical.com/en/ref_scripts_unfoldsymmetricdata.html", "text": "Unfolds data from a symmetric dataset based on a given plane of\r\nsymmetry. This function is useful for obtaining the complete form of\r\ndata from a symmetric simulation which only contains data from one half\r\nof the simulation. Only unstructured datasets are supported by this\r\ncommand.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.unfoldsymmetricdata(dataset,'symme | Unfolds data from a symmetric        |\r\n| try\\_plane')                         | dataset based on a given plane of    |\r\n|                                      | symmetry.                            |\r\n|                                      |                                      |\r\n|                                      | The first argument is a 2D or 3D     |\r\n|                                      | unstructured dataset. The second     |\r\n|                                      | argument is the plane of symmetry    |\r\n|                                      | for the symmetric data in the format |\r\n|                                      | [+-][xyz], e.g. \u201c-y\u201d and refers to   |\r\n|                                      | the axis of the plane of symmetry    |\r\n|                                      | (i.e. the side of the simulation     |\r\n|                                      | region that will act as the plane of |\r\n|                                      | symmetry)                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\narrayperiodicdata(), unstructureddataset(), rectilineardataset(),\r\naddattribute(), addparameter(), visualize(), getparameter(),\r\ngetattribute(), matrixdataset(), struct()\r\n"}, "undo": {"link": "https://kb.lumerical.com/en/ref_scripts_undo.html", "text": "Undos the last command that modified any objects, you can undo the last\r\n5 commands.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.undo()                             | Undo last modify object command.     |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nredo(), historyon(), historyoff()\r\n"}, "unique": {"link": "https://kb.lumerical.com/en/ref_scripts_unique.html", "text": "Returns an array containing all the unique values in a matrix. In other\r\nwords, this command returns all the elements in a matrix without\r\nrepeating them if they appear more than once in the matrix.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.unique(a)                      | Returns an array containing          |\r\n|                                      | containing all unique values in the  |\r\n|                                      | matrix a.                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nuniquevertices()\r\n"}, "uniquevertices": {"link": "https://kb.lumerical.com/en/ref_scripts_uniquevertices.html", "text": "Given a matrix of vertices, returns a matrix of unique vertices with\r\ndifferences in values larger than a specified tolerance.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out=o.uniquevertices(vertexTable,    | Returns unique elements of a matrix  |\r\n| absTolerance)                        | with differences in values larger    |\r\n|                                      | than a specified tolerance.          |\r\n|                                      |                                      |\r\n|                                      | vertexTable is a Mx2 or Mx3 matrix   |\r\n|                                      |                                      |\r\n|                                      | absTolerance is the magnitude of the |\r\n|                                      | tolerance                            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nunique()\r\n"}, "unselectall": {"link": "https://kb.lumerical.com/en/ref_scripts_unselectall.html", "text": "Unselects all objects and groups. This is the counter operation of\r\nselectall.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.unselectall()                      | Unselects all objects and groups.    |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nselectall()\r\n"}, "unstructureddataset": {"link": "https://kb.lumerical.com/en/ref_scripts_unstructureddataset.html", "text": "Creates an empty dataset that is associated with arbitrary x/y/z\r\ncoordinate in space, and with additional matrix, a connectivity matrix\r\nto connect them. The connectivity matrix comes after x, y, and z. Like\r\nrectilinear datasets, unstructured datasets can be parameterized, and\r\ncan contain an arbitrary number of attributes (see addattribute) and\r\nparameters (see addparameter).\r\n\r\nSee Dataset introduction for more information. For datasets that are not\r\nassociated with the x/y/z coordinates (ex. transmission as a function of\r\nfrequency), see matrixdataset.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.unstructureddataset(x,y,z,C)       | Creates an empty unstructured        |\r\n|                                      | dataset associated with the          |\r\n|                                      | coordinates x/y/z and a connectivity |\r\n|                                      | matrix to connect them.              |\r\n|                                      |                                      |\r\n|                                      | Arguments 'x', 'y' and 'z' must be   |\r\n|                                      | the same length; equivalent to the   |\r\n|                                      | total number of points.              |\r\n|                                      |                                      |\r\n|                                      | The argument 'C' should be a matrix  |\r\n|                                      | of integers where the number of rows |\r\n|                                      | equal to number of shapes in the     |\r\n|                                      | mesh, the number of columns should   |\r\n|                                      | be 2 (line segments), 3 (triangles)  |\r\n|                                      | or 4 (tetrahedra), and values should |\r\n|                                      | be integers.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrectilineardataset(), addattribute(), addparameter(), visualize(),\r\ngetparameter(), getattribute(), matrixdataset(), struct()\r\n"}, "unwrap": {"link": "https://kb.lumerical.com/en/ref_scripts_unwrap.html", "text": "Removes changes of more than 2pi from a 1D array. It can be useful after\r\nangle(x) to see phase without discontinuities.\r\n\r\nThe unwrap function is primarily intended for 1D arrays. Care must be\r\ntaken when applying it to matrices with more than one dimension.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.unwrap(x)                    | Return the values of x without       |\r\n|                                      | discontinuities.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+----+----+\r\n+----+----+\r\n\r\nSee Also\r\n\r\nreal(), imag(), angle()\r\n"}, "updatemodes": {"link": "https://kb.lumerical.com/en/ref_scripts_updatemodes.html", "text": "Updates the mode profile(s) of selected mode expansion monitor If there\r\nare no mode profiles stored in the mode expansion monitor, then the mode\r\nwith the highest effective index will be selected. If mode profiles are\r\nalready stored in the mode expansion monitor, then the modes with the\r\nbest overlap with the old modes will be selected. Note that the mode\r\nexpansion monitor must be selected before running this command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.updatemodes()                      | Updates mode profile of the selected |\r\n|                                      | mode expansion monitor.              |\r\n|                                      |                                      |\r\n|                                      | Returns 1 if the update was          |\r\n|                                      | successful and -1 if not.            |\r\n+--------------------------------------+--------------------------------------+\r\n| o.updatemodes(mode\\_number)          | Updates the mode expansion monitor   |\r\n|                                      | and selects the desired mode         |\r\n|                                      | numbers. For example,                |\r\n|                                      | updatemodes(1:10); will calculate    |\r\n|                                      | the 10 modes with the highest        |\r\n|                                      | refractive index. Please note that   |\r\n|                                      | making this call will force a        |\r\n|                                      | recalculation of a modes, even if    |\r\n|                                      | the same modes have previously been  |\r\n|                                      | calculated. In addition, making this |\r\n|                                      | call will force the mode selection   |\r\n|                                      | method to become \"user select\". This |\r\n|                                      | optional argument was introduced in  |\r\n|                                      | FDTD Solutions 8.6.3 and MODE        |\r\n|                                      | Solutions 6.5.3.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------------------------------------------------------------+\r\n| NOTE: Saving simulation files before using updatesourcemode              |\r\n|                                                                          |\r\n| If you have a script file which updates the simulation mesh, then you    |\r\n| should use the save script command before updating the source mode. This |\r\n| will ensure that the mesh has been updated before the new mode is        |\r\n| calculated.                                                              |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------------------------------------------+\r\n| NOTE: overlap                                                            |\r\n|                                                                          |\r\n| The fraction of electromagnetic fields that overlap between the two      |\r\n| modes is given by the expression below. It is also the fraction of power |\r\n| from mode2 that can propagate in mode1. For more information, please see |\r\n| overlap script command.                                                  |\r\n                                                                          \r\n+--------------------------------------------------------------------------+\r\n\r\nSee Also\r\n\r\naddmode(), addmodeexpansion(), clearsourcedata(), clearmodedata(),\r\ngetresult(), overlap(), expand(), seteigensolver(), geteigensolver(),\r\nupdatesourcemode()\r\n"}, "updateportmodes": {"link": "https://kb.lumerical.com/en/ref_scripts_updateportmodes.html", "text": "Selects the specified modes in the selected port object in FDTD\r\nSolutions or MODE Solutions' EME solver, or updates already selected\r\nport modes. Modes are specified by the mode number in the eigensolver's\r\nmode list. For more information about the port object in FDTD Solutions\r\nsee Ports.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.updateportmodes(modes\\_to\\_select) | Selects the specified modes in the   |\r\n|                                      | the selected port object.            |\r\n|                                      |                                      |\r\n|                                      | This function returns 1 if modes     |\r\n|                                      | were updated successfully and -1 if  |\r\n|                                      | there was an error updating the      |\r\n|                                      | modes.                               |\r\n+--------------------------------------+--------------------------------------+\r\n| o.updateportmodes()                  | Updates the mode profiles of the     |\r\n|                                      | selected mode ports.                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\naddport(), set(), geteigensolver(), seteigensolver(),\r\nclearportmodedata()\r\n"}, "updatesourcemode": {"link": "https://kb.lumerical.com/en/ref_scripts_updatesourcemode.html", "text": "Updates the mode profile of selected mode source. If there is no mode\r\nprofile stored in the source, then the mode with the highest effective\r\nindex will be selected. If a mode is already stored in the source, then\r\nthe mode with the best overlap with the old mode will be selected. Note\r\nthat the mode source must be selected before running this command.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| print o.updatesourcemode()           | Updates mode profile of the selected |\r\n|                                      | Mode source.                         |\r\n|                                      |                                      |\r\n|                                      | Returns the fraction of              |\r\n|                                      | electromagnetic fields that overlap  |\r\n|                                      | between the old and the new mode     |\r\n+--------------------------------------+--------------------------------------+\r\n| print                                | Updates the mode source and selects  |\r\n| o.updatesourcemode(mode\\_number)     | the desired mode number. For         |\r\n|                                      | example, updatesourcemode(1); will   |\r\n|                                      | calculate the fundamental mode.      |\r\n|                                      | Please note that making this call    |\r\n|                                      | will force a recalculation of a      |\r\n|                                      | mode, even if the same mode has      |\r\n|                                      | previously been calculated. In       |\r\n|                                      | addition, making this call will      |\r\n|                                      | force the mode selection method to   |\r\n|                                      | become \"user select\". This optional  |\r\n|                                      | argument was introduced in FDTD      |\r\n|                                      | Solutions 8.6.3 and MODE Solutions   |\r\n|                                      | 6.5.3.                               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\n+--------------------------------------------------------------------------+\r\n| NOTE: Saving simulation files before using updatesourcemode              |\r\n|                                                                          |\r\n| If you have a script file which updates the simulation mesh, then you    |\r\n| should use the save script command before updating the source mode. This |\r\n| will ensure that the mesh has been updated before the new mode is        |\r\n| calculated.                                                              |\r\n+--------------------------------------------------------------------------+\r\n\r\n+--------------------------------------------------------------------------+\r\n| NOTE: overlap                                                            |\r\n|                                                                          |\r\n| The fraction of electromagnetic fields that overlap between the two      |\r\n| modes is given by the expression below. It is also the fraction of power |\r\n| from mode2 that can propagate in mode1. For more information, please see |\r\n| overlap script command.                                                  |\r\n                                                                          \r\n+--------------------------------------------------------------------------+\r\n\r\nSee Also\r\n\r\naddmode(), clearsourcedata(), clearmodedata(), getresult(), overlap(),\r\nexpand(), seteigensolver(), geteigensolver(), updateportmodes()\r\n"}, "upper": {"link": "https://kb.lumerical.com/en/ref_scripts_upper.html", "text": "Converts all the characters in a string to upper case.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.upper(string)                      | Converts a string to upper case.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlength(), substring(), findstring(), replace(), str2num(), num2str(),\r\nsplitstring(), lower(), toscript()\r\n"}, "validate": {"link": "https://kb.lumerical.com/en/ref_scripts_validate.html", "text": "Updates the results for the specified analyzer.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.validate(\"analyzer\")               | Updates the results for the          |\r\n|                                      | specified \"analyzer\". If the name is |\r\n|                                      | not provided, the selected analyzer  |\r\n|                                      | will be updated.                     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nvalidateall()\r\n"}, "validateall": {"link": "https://kb.lumerical.com/en/ref_scripts_validateall.html", "text": "Updates the results for all the analyzers in the current simulation.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.validateall()                      | Updates the results for all the      |\r\n|                                      | analyzers in the current simulation. |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nvalidate()\r\n"}, "var": {"link": "https://kb.lumerical.com/en/ref_scripts_var.html", "text": "Returns the variance of all entries of the matrix specified. The\r\nvariance of a set of N numbers X = [x1,...,xN] is defined as\r\n\r\nwhere \u03bc is the mean of X.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.var(A)                       | Will return variance of all of       |\r\n|                                      | matrix A, over all dimensions.       |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nstd(), mean(), sum(), length()\r\n"}, "vectorplot": {"link": "https://kb.lumerical.com/en/ref_scripts_vectorplot.html", "text": "Creates a vector plot from a rectilinear dataset. The rectilinear\r\ndataset must be a vector, like the E field, and it must have no\r\nadditional parameters (i.e., if you have E vs. x,y,z,f and f has two or\r\nmore values, then the command fails). Generally, it is easier to use\r\nvisualize(E) and then select the vector plot option (see Visualizer and\r\nfigure settings).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.vectorplot(E)                      | Creates a vector plot of the dataset |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nplotxy(), legend(), image(), closeall(), setplot(), exportfigure(),\r\nplot()\r\n"}, "version": {"link": "https://kb.lumerical.com/en/ref_scripts_version.html", "text": "Returns the current version of the application.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.version()                    | Returns the version of the           |\r\n|                                      | application.                         |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nversionfile()\r\n"}, "versionfile": {"link": "https://kb.lumerical.com/en/ref_scripts_versionfile.html", "text": "Returns the current version of the file loaded by the application.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.versionfile()                | Returns the version of the file      |\r\n|                                      | loaded by the application.           |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nversion()\r\n"}, "visualize": {"link": "https://kb.lumerical.com/en/ref_scripts_visualize.html", "text": "Sends data to the visualizer (see Visualizer and figure settings).\r\n\r\nFor FDTD, MODE, DEVICE, and INTERCONNECT\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.visualize(R)                       | Plots the dataset R in the           |\r\n|                                      | Visualizer.                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.visualize(R,T)                     | Sends two datasets to the            |\r\n|                                      | Visualizer.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nexportfigure(), image(), plot(), setplot(), closeall(), add2visualizer()\r\n"}, "vtksave": {"link": "https://kb.lumerical.com/en/ref_scripts_vtksave.html", "text": "Saves a Lumerical dataset into the VTK format. The command only saves\r\nrectilinear and unstructured datasets. The \u201cfilename\u201d will have .vtr\r\nappended for rectilinear dataset, .vtu appended for unstructured\r\ndataset. The freely available data visualization program Paraview can\r\nthen be used to create sophisticated plots of your data.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.vtksave(\u201cfilename\u201d, dataset)       | Save the dataset in vtk file of the  |\r\n|                                      | name specified.                      |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nrectilineardataset(), matlabsave()\r\n"}, "waituntildone": {"link": "https://kb.lumerical.com/en/ref_scripts_waituntildone.html", "text": "This function only returns after the current simulation is done.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.waituntildone()                    | This function only returns after the |\r\n|                                      | current simulation is done. It       |\r\n|                                      | allows to wait for the simulation    |\r\n|                                      | before performing any other tasks    |\r\n|                                      | that depends on simulation           |\r\n|                                      | completion.                          |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nruninitialize(), runstep(), runfinalize()\r\n"}, "which": {"link": "https://kb.lumerical.com/en/ref_scripts_which.html", "text": "Returns the full file pathname for the specified file.\r\n\r\nThis function can be helpful when you have added several directories to\r\nthe Lumerical path variable and you want to check which files are being\r\naccessed.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.which(\"filename\")            | Returns the pathname of the file     |\r\n|                                      | \"filename\" as a string.              |\r\n|                                      |                                      |\r\n|                                      | Use ?which(\"filename\"); to display   |\r\n|                                      | the result to the screen.            |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\ngetpath(), addpath(), pwd(), currentfilename(), fileexists()\r\n"}, "wizarddata": {"link": "https://kb.lumerical.com/en/ref_scripts_wizarddata.html", "text": "This command will cause the wizard window to wait until the user selects\r\nOK or Cancel. It then returns value data from the matrix in a N+1 length\r\nmatrix, where N is the number of widgets (excluding labels) in the\r\ncurrent wizard page.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.wizarddata()                 | The values of out are                |\r\n|                                      |                                      |\r\n|                                      | \u2022out(1) = 0, 1 or -1. 0 means the    |\r\n|                                      | user pressed Cancel, 1 means the     |\r\n|                                      | user pressed the first button        |\r\n|                                      | (typically \"OK\" or \"Next\") and -1    |\r\n|                                      | means the user pressed the second    |\r\n|                                      | button (typically \"Back\")            |\r\n|                                      |                                      |\r\n|                                      | \u2022out(2:N+1) gives the numeric values |\r\n|                                      | that the user entered for each input |\r\n|                                      | field when out(1) is 1. Note that    |\r\n|                                      | check boxes return 1 if checked and  |\r\n|                                      | 0 if unchecked. Menu items return a  |\r\n|                                      | number between 1 and M where M is    |\r\n|                                      | the number of choices in the menu.   |\r\n|                                      | If out(1) is 0 or -1, all the values |\r\n|                                      | out(2:N+1) are zero.                 |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewwizard()\r\n"}, "wizardgetdata": {"link": "https://kb.lumerical.com/en/ref_scripts_wizardgetdata.html", "text": "Returns data entered into a specific widget.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.wizardgetdata(N)             | Returns the value that the user      |\r\n|                                      | entered into the Nth widget. Out     |\r\n|                                      | will be a number or a string,        |\r\n|                                      | depending on the type of widget.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewwizardpage()\r\n"}, "wizardoption": {"link": "https://kb.lumerical.com/en/ref_scripts_wizardoption.html", "text": "Sets some options for wizard widgets and labels.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.wizardoption                       | The options are                      |\r\n| (\"optionname\",setting)               |                                      |\r\n|                                      | \u2022\"fontsize\" sets the font size to    |\r\n|                                      | any value between 8 and 40           |\r\n|                                      |                                      |\r\n|                                      | \u2022\"fieldwidth\" sets the width of each |\r\n|                                      | widget field to any value between 20 |\r\n|                                      | and the full width of the wizard     |\r\n|                                      | window.                              |\r\n|                                      |                                      |\r\n|                                      | \u2022\"fieldheight\" sets the height of    |\r\n|                                      | each field to any value between 8    |\r\n|                                      | and the full height of the wizard    |\r\n|                                      | window.                              |\r\n|                                      |                                      |\r\n|                                      | \u2022\"margin\", sets size of the left     |\r\n|                                      | margin to any value between 0 and    |\r\n|                                      | full width of the wizard window.     |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewwizard()\r\n"}, "wizardwidget": {"link": "https://kb.lumerical.com/en/ref_scripts_wizardwidget.html", "text": "Adds a new widget to the current wizard window. This command should only\r\nbe done after creating a new wizard page with the command newwizard.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.wizardwidget( \"type\", \"name\")      | type can be                          |\r\n|                                      |                                      |\r\n|                                      | \u2022\"number\" for a numeric input field  |\r\n|                                      |                                      |\r\n|                                      | \u2022\"string\" for a alphanumeric field   |\r\n|                                      |                                      |\r\n|                                      | \u2022\"checkbox\" for a checkbox           |\r\n|                                      |                                      |\r\n|                                      | \u2022\"menu\" for a pulldown menu field    |\r\n|                                      |                                      |\r\n|                                      | \u2022\"label\" to add a string label       |\r\n|                                      | (wizardgetdata does not return       |\r\n|                                      | information for labels)              |\r\n|                                      |                                      |\r\n|                                      | name is a string used to give the    |\r\n|                                      | input field, checkbox, menu item or  |\r\n|                                      | label a name.                        |\r\n+--------------------------------------+--------------------------------------+\r\n| o.wizardwidget( \"type\", \"label\",     | defaultValue provides a default      |\r\n| defaultValue)                        | value for numeric inputs,            |\r\n|                                      | checkboxes, menu items or strings.   |\r\n+--------------------------------------+--------------------------------------+\r\n| o.wizardwidget( \"type\", \"label\",     | If the \"type\" of widget is a \"menu\", |\r\n| \"choices\", defaultValue)             | then the menu choices must be        |\r\n|                                      | provided. These choices should be    |\r\n|                                      | separated by the character \"\\|\". For |\r\n|                                      | example, to create a pulldown widget |\r\n|                                      | with the name \"simulation type\" and  |\r\n|                                      | 3 choices \"TE\",\"TM\",\"3D\", with the   |\r\n|                                      | default choice \"3D\", the command is  |\r\n|                                      |                                      |\r\n|                                      | wizardwidget(\"menu\",\"simulation      |\r\n|                                      | type\",\"TE\\|TM\\|3D\",3);               |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nnewwizardpage()\r\n"}, "workspace": {"link": "https://kb.lumerical.com/en/ref_scripts_workspace.html", "text": "Returns a list of all the currently defined variables in the scripting\r\nworkspace.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| out = o.workspace()                  | Returns a string that lists all      |\r\n|                                      | currently defined variables in the   |\r\n|                                      | workspace.                           |\r\n|                                      |                                      |\r\n|                                      | Use ?workspace; to print this to the |\r\n|                                      | screen.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nclear()\r\n"}, "write": {"link": "https://kb.lumerical.com/en/ref_scripts_write.html", "text": "Writes string variables to text files or to standard output.\r\n\r\nTypically the write command is used to output data to a text file. If\r\nthe specified file does not exist, it will be created. If it does exist,\r\nthen the output string will be appended to the end of the file. The\r\nwrite command will automatically add a new line character at the end of\r\nthe string.\r\n\r\nOn Linux systems only, the write command will output to the standard\r\noutput (stdout) if a filename is not specified.\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| o.write(my\\_string)                  | Write my\\_string to the standard     |\r\n|                                      | output (linux only).                 |\r\n+--------------------------------------+--------------------------------------+\r\n| o.write(\"testfile.txt\", my\\_string)  | Will write the contents of the       |\r\n|                                      | string variable my\\_string to        |\r\n|                                      | testfile.txt.                        |\r\n|                                      |                                      |\r\n|                                      | This function does not return any    |\r\n|                                      | data.                                |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nsavedata(), readdata(), read(), rm(), num2str(), endl(), format(),\r\nfileexists(), matlabsave()\r\n"}, "zeros": {"link": "https://kb.lumerical.com/en/ref_scripts_zeros.html", "text": "Initialize a matrix. All elements are set to zero (same as matrix).\r\n\r\n+--------------------------------------+--------------------------------------+\r\n| Syntax                               | Description                          |\r\n+--------------------------------------+--------------------------------------+\r\n| x = o.zeros(i,j,k,....)              | Initializes an i x j x k x ....      |\r\n|                                      | matrix.                              |\r\n+--------------------------------------+--------------------------------------+\r\n\r\nSee Also\r\n\r\nlinspace(), matrix(), ones()\r\n"}, "pi": {"link": "https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html", "text": "The number pi.\n"}, "c": {"link": "https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html", "text": "The speed of light in a vacuum in m/s.\n"}, "eps0": {"link": "https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html", "text": "The permittivity of free space in SI units.\n"}, "mu0": {"link": "https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html", "text": "The permeability of free space in SI units.\n"}, "h": {"link": "https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html", "text": "The Planck constant.\n"}, "hbar": {"link": "https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html", "text": "The reduced Planck constant.\n"}, "e": {"link": "https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html", "text": "The electron volt.\n"}}